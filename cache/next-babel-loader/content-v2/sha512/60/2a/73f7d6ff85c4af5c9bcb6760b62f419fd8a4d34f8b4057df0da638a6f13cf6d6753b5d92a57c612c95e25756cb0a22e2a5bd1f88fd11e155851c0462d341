{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useEffect, useState } from 'react';\nimport { fetchWithLocalCache } from '../utils';\nimport data from './../data/last-update.json';\nexport function useData() {\n  let {\n    0: ready,\n    1: setReady\n  } = useState(false);\n  let {\n    0: versioning,\n    1: bumpVersioning\n  } = useState(false);\n  let {\n    0: weeks,\n    1: setWeeks\n  } = useState(false);\n  let {\n    0: sns,\n    1: setSns\n  } = useState(false);\n  let {\n    0: ecdc,\n    1: setECDC\n  } = useState(false);\n  let {\n    0: ars,\n    1: setArs\n  } = useState(false);\n  let {\n    0: owid,\n    1: setOwid\n  } = useState(false);\n  let {\n    0: vaccines,\n    1: setVaccines\n  } = useState(false);\n  let {\n    0: casesData,\n    1: setCasesData\n  } = useState(false);\n  let {\n    0: labels,\n    1: setLabels\n  } = useState([]);\n  let {\n    0: rt,\n    1: setRt\n  } = useState([]);\n  let options = {\n    month: 'short',\n    day: 'numeric'\n  };\n  let options2 = {\n    month: 'short',\n    day: 'numeric',\n    year: 'numeric'\n  };\n  let f = new Intl.DateTimeFormat('pt-PT', options);\n  let f2 = new Intl.DateTimeFormat('pt-PT', options2);\n\n  function parseData(data) {\n    if (!ready) return;\n    let values = [];\n    let labels = [];\n    data.forEach(el => {\n      labels.push(f.format(new Date(el.Data)));\n      values.push(el.Vacinados_Ac);\n    });\n    return {\n      values,\n      labels\n    };\n  }\n\n  let statistics = {\n    getRaw: () => {\n      return vaccines;\n    },\n    getDailyData: () => {\n      return parseData(vaccines);\n    },\n    getDesvioPadrao: () => {},\n    getMediaMovel: dias => {\n      let medias = [];\n      let labelsMedias = [];\n      let {\n        labels,\n        values\n      } = parseData(vaccines);\n\n      for (let start = 1; start <= dias; start++) {\n        let sum = Math.round(values.slice(0, start).reduce((prev, current) => prev + current, 0) / start);\n        medias.push(sum);\n        labelsMedias.push(labels[start]);\n      }\n\n      for (let start = dias; start <= values.length; start++) {\n        let sum = Math.round(values.slice(start - dias, start).reduce((prev, current) => prev + current, 0) / dias);\n        medias.push(sum);\n        labelsMedias.push(labels[start]);\n      }\n\n      return {\n        values: medias,\n        labels: labelsMedias\n      };\n    },\n    getRtRegiao: async regiao => {\n      let data2 = await fetchWithLocalCache(`/api/rt/${regiao}?${btoa(data.date)}`).then(responseRt => {\n        setRt(responseRt);\n        return responseRt;\n      });\n      let date = new Date('2020-12-27T00:00:45.000Z').getTime(); // let returnRt = data.filter((el) => new Date(el.Data).getTime() >= date);\n\n      let returnRt = data2;\n      return {\n        labels: returnRt.map(el => f.format(new Date(el.Data))),\n        rt: returnRt\n      };\n    },\n    getRtRegioes: async () => {\n      let data = await fetchWithLocalCache(`/api/rt/todas?${btoa(data.date)}`).then(responseRt => {\n        return responseRt;\n      });\n      let dates = data.rt_continente.map(el => el.Data); //get rt for each date\n\n      let rtData = [];\n      dates.forEach(el => {\n        let tempD = {\n          continente: data.rt_continente.filter(tempEl => tempEl.Data === el)[0],\n          centro: data.rt_centro.filter(tempEl => tempEl.Data === el)[0],\n          nacional: data.rt_nacional.filter(tempEl => tempEl.Data === el)[0],\n          lvt: data.rt_lvt.filter(tempEl => tempEl.Data === el)[0],\n          alentejo: data.rt_alentejo.filter(tempEl => tempEl.Data === el)[0],\n          norte: data.rt_norte.filter(tempEl => tempEl.Data === el)[0],\n          algarve: data.rt_algarve.filter(tempEl => tempEl.Data === el)[0],\n          ram: data.rt_ram.filter(tempEl => tempEl.Data === el)[0],\n          raa: data.rt_raa.filter(tempEl => tempEl.Data === el)[0]\n        };\n        rtData.push(tempD);\n      });\n      return {\n        labels: dates.map(el => f.format(new Date(el))),\n        values: rtData\n      };\n    },\n    getOwid: () => {\n      let labels = owid.eun.data.map(el => f.format(new Date(el.date)));\n      let data = {\n        pt: owid.prt.data,\n        eu: owid.eun.data\n      };\n      return _objectSpread(_objectSpread({}, data), {}, {\n        labels\n      });\n    },\n    getMediaMovelDiaria: dias => {\n      let medias = [];\n      let labelsMedias = [];\n      let {\n        values\n      } = statistics.getVacinadosPorDia();\n\n      for (let start = 1; start <= dias; start++) {\n        if (values[start] === null) {\n          medias.push(null);\n          continue;\n        }\n\n        let sum = Math.round(values.slice(0, start).reduce((prev, current) => prev + current, 0) / start);\n        medias.push(sum);\n        labelsMedias.push(labels[start]);\n      }\n\n      for (let start = dias; start <= values.length; start++) {\n        let slice = values.slice(start - dias, start);\n\n        if (values[start] === null || slice.includes(null) > 0) {\n          medias.push(null);\n          continue;\n        }\n\n        let sum = Math.round(slice.reduce((prev, current) => prev + current, 0) / dias);\n        medias.push(sum);\n        labelsMedias.push(labels[start]);\n      }\n\n      return {\n        values: medias,\n        labels: labelsMedias\n      };\n    },\n    getVacinadosPorDia: () => {\n      let {\n        labels,\n        values\n      } = statistics.getDailyData();\n      let vacinadosPorDia = values.map((val, idx, vals) => {\n        //The first one\n        if (idx === 0) {\n          return val;\n        }\n\n        let nextDay = idx - 1;\n\n        if (vals[nextDay] == null || val == null) {\n          return null;\n        }\n\n        return val - vals[nextDay];\n      });\n      return {\n        values: vacinadosPorDia,\n        labels\n      };\n    },\n    getVacinadosAcum: () => {\n      let in1 = [];\n      let in2 = [];\n      let total = [];\n      let {\n        labels,\n        values\n      } = statistics.getDailyData();\n      values.forEach((val, idx, vals) => {\n        in1.push(vaccines[idx].Inoculacao1_Ac);\n        in2.push(vaccines[idx].Inoculacao2_Ac);\n        total.push(vaccines[idx].Vacinados_Ac);\n      });\n      return {\n        valuesIn1: in1,\n        valuesIn2: in2,\n        values: total,\n        labels\n      };\n    },\n    getDiariosInoculacoes: () => {\n      let in1 = [];\n      let in2 = [];\n      let {\n        labels,\n        values\n      } = parseData(vaccines);\n      let total = values.map((val, idx, vals) => {\n        //The first one\n        if (idx === 0) {\n          in1.push(vaccines[idx].Inoculacao1_Ac);\n          in2.push(vaccines[idx].Inoculacao2_Ac);\n          return val;\n        }\n\n        let prevDay = idx - 1;\n\n        if (vaccines[prevDay].Inoculacao1_Ac == null || vaccines[idx].Inoculacao1_Ac == null) {\n          in1.push(null);\n        } else {\n          in1.push(vaccines[idx].Inoculacao1_Ac - vaccines[prevDay].Inoculacao1_Ac);\n        }\n\n        if (vaccines[prevDay].Inoculacao2_Ac == null || vaccines[idx].Inoculacao2_Ac == null) {\n          in2.push(null);\n        } else {\n          in2.push(vaccines[idx].Inoculacao2_Ac - vaccines[prevDay].Inoculacao2_Ac);\n        }\n\n        if (vals[prevDay] == null || val == null) {\n          return null;\n        }\n\n        return val - vals[prevDay];\n      });\n      return {\n        valuesIn1: in1,\n        valuesIn2: in2,\n        values: total,\n        raw: vaccines,\n        labels\n      };\n    },\n    getDiariosCases: () => {\n      let labels2 = [];\n      let values2 = [];\n      casesData.forEach(el => {\n        labels2.push(new Date(el.Data));\n        values2.push(el);\n      });\n      return {\n        labels: labels2,\n        values: values2,\n        raw: casesData\n      };\n    },\n    getReceivedDosesByBrandByWeek: async () => {\n      let labels = {};\n      let com = {};\n      let mod = {};\n      let az = {};\n      ecdc.forEach(el => {\n        var obj = {};\n\n        if (parseInt(el['NumberDosesReceived']) > 0) {\n          com[el['YearWeekISO']] = com[el['YearWeekISO']] || null;\n          mod[el['YearWeekISO']] = mod[el['YearWeekISO']] || null;\n          az[el['YearWeekISO']] = az[el['YearWeekISO']] || null;\n          labels[el['YearWeekISO']] = weeks[el['YearWeekISO']];\n\n          if (el['Vaccine'] === 'COM') {\n            com[el['YearWeekISO']] = parseInt(el['NumberDosesReceived']);\n          }\n\n          if (el['Vaccine'] === 'MOD') {\n            mod[el['YearWeekISO']] = parseInt(el['NumberDosesReceived']);\n          }\n\n          if (el['Vaccine'] === 'AZ') {\n            az[el['YearWeekISO']] = parseInt(el['NumberDosesReceived']);\n          }\n        }\n      });\n      com = Object.values(com);\n      mod = Object.values(mod);\n      az = Object.values(az);\n      labels = Object.values(labels);\n      return {\n        com,\n        mod,\n        az,\n        labels\n      };\n    },\n    getAdministredDosesByAgeByWeek: async () => {\n      let labels = {};\n      let maxValue = 0;\n      let groups = {};\n      ecdc.forEach(el => {\n        debugger;\n\n        if (el['NumberDosesReceived'] == '') {\n          if (!labels.hasOwnProperty(el['YearWeekISO'])) {\n            labels[el['YearWeekISO'].replace('-', '')] = weeks[el['YearWeekISO']];\n          }\n\n          groups[el['TargetGroup']] = groups[el['TargetGroup']] || {\n            dose_1: [],\n            dose_2: []\n          };\n          maxValue = Math.max(el['FirstDose'], el['SecondDose']);\n          groups[el['TargetGroup']].dose_1[el['YearWeekISO']] = (groups[el['TargetGroup']].dose_1[el['YearWeekISO']] || 0) + parseInt(el['FirstDose']);\n          groups[el['TargetGroup']].dose_2[el['YearWeekISO']] = (groups[el['TargetGroup']].dose_2[el['YearWeekISO']] || 0) + parseInt(el['SecondDose']);\n        }\n      });\n      return {\n        maxValue,\n        labels,\n        groups\n      };\n    },\n    getTotalAdministredDosesByAgeByWeek: async () => {\n      let labels = {};\n      let groups = {};\n      ecdc.forEach(el => {\n        if (el['NumberDosesReceived'] == '') {\n          groups[el['TargetGroup']] = groups[el['TargetGroup']] || {\n            mod: [],\n            com: [],\n            az: [],\n            target: 0\n          };\n\n          if (el['Vaccine'] === 'COM') {\n            groups[el['TargetGroup']].com[0] = parseInt((groups[el['TargetGroup']].com[0] || 0) + parseInt(el['FirstDose']));\n            groups[el['TargetGroup']].com[1] = (groups[el['TargetGroup']].com[1] || 0) + parseInt(el['SecondDose']);\n          }\n\n          if (el['Vaccine'] === 'MOD') {\n            groups[el['TargetGroup']].mod[0] = (groups[el['TargetGroup']].mod[0] || 0) + parseInt(el['FirstDose']);\n            groups[el['TargetGroup']].mod[1] = (groups[el['TargetGroup']].mod[1] || 0) + parseInt(el['SecondDose']);\n          }\n\n          if (el['Vaccine'] === 'AZ') {\n            groups[el['TargetGroup']].az[0] = (groups[el['TargetGroup']].az[0] || 0) + parseInt(el['FirstDose']);\n            groups[el['TargetGroup']].az[1] = (groups[el['TargetGroup']].az[1] || 0) + parseInt(el['SecondDose']);\n          }\n\n          groups[el['TargetGroup']].target = (groups[el['TargetGroup']].target || 0) + parseInt(el['Denominator']);\n        }\n      });\n      return groups;\n    },\n    getTotalSNS: () => {\n      return sns.filter(el => {\n        return (el.TYPE === 'REGIONAL' || el.TYPE === 'GENERAL') && el.DATE == data.dateSnsStartWeirdFormat;\n      });\n    },\n    getTotalARS: () => {\n      let data = {};\n      ars.features.forEach(el => {\n        if (el.attributes.ARSNome === 'Nacional') el.attributes.ARSNome = 'All';\n\n        if (!(el.attributes.ARSNome in data)) {\n          data[el.attributes.ARSNome] = {\n            obitosNovos7Dias: 0,\n            casosNovos7Dias: 0\n          };\n        }\n\n        data[el.attributes.ARSNome].obitosNovos7Dias += el.attributes.VarObitos;\n        data[el.attributes.ARSNome].casosNovos7Dias += el.attributes.ConfirmadosNovos;\n      });\n      return data;\n    },\n    getCases: () => {\n      return casesData;\n    },\n    getDosesRecebidasAcum: () => {\n      if (ecdc == false) return;\n      let labels = {};\n      let data = {};\n      let com = {};\n      let mod = {};\n      let az = {};\n      let sum = [];\n      let ecdcCopy = JSON.parse(JSON.stringify(ecdc));\n      let numbers = [1, 1, 1, 1];\n\n      function sumArray(array) {\n        return array.reduce((prev, current) => {\n          return prev + current;\n        }, 0);\n      }\n\n      ecdcCopy.filter(el => el['NumberDosesReceived'] > 0).forEach(el => {\n        if (!labels.hasOwnProperty(el['YearWeekISO'])) {\n          labels[el['YearWeekISO']] = weeks[el['YearWeekISO']];\n        }\n\n        com[el['YearWeekISO']] = com[el['YearWeekISO']] || 0;\n        mod[el['YearWeekISO']] = mod[el['YearWeekISO']] || 0;\n        az[el['YearWeekISO']] = az[el['YearWeekISO']] || 0;\n\n        if (el['Vaccine'] === 'COM') {\n          com[el['YearWeekISO']] = parseInt(el['NumberDosesReceived']);\n        }\n\n        if (el['Vaccine'] === 'MOD') {\n          mod[el['YearWeekISO']] = parseInt(el['NumberDosesReceived']);\n        }\n\n        if (el['Vaccine'] === 'AZ') {\n          az[el['YearWeekISO']] = parseInt(el['NumberDosesReceived']);\n        }\n      });\n      com = Object.values(com).reverse().map((el, idx, arr) => sumArray(arr.slice(idx, arr.length))).reverse();\n      az = Object.values(az).reverse().map((el, idx, arr) => sumArray(arr.slice(idx, arr.length))).reverse();\n      mod = Object.values(mod).reverse().map((el, idx, arr) => sumArray(arr.slice(idx, arr.length))).reverse();\n      sum = mod.map((el, idx, arr) => {\n        return com[idx] + az[idx] + mod[idx];\n      });\n      return {\n        mod,\n        com,\n        az,\n        sum,\n        labels: Object.values(labels)\n      };\n    }\n  };\n  useEffect(() => {\n    Promise.all([fetchWithLocalCache(`/api/ecdc?${btoa(data.dateEcdc)}`, false), fetchWithLocalCache(`/api/weeks`, false), fetchWithLocalCache(`/api/sns?${btoa(data.dateSnsStartWeirdFormat)}`, false), fetchWithLocalCache(`/api/vaccinesold?${btoa(data.date)}`), fetchWithLocalCache(`/api/ars?${btoa(data.dateSnsStartWeirdFormat)}`, false), fetchWithLocalCache(`/api/cases?${btoa(data.date)}`), fetchWithLocalCache(`/api/owid?${btoa(data.date)}`), fetchWithLocalCache(`/api/rt/continente?${btoa(Date.now())}`)]).then(([ecdc, weeks, sns, vaccines, ars, cases, owid, rt]) => {\n      setSns(sns);\n      setWeeks(weeks);\n      setECDC(ecdc);\n      setVaccines(vaccines);\n      setArs(ars);\n      setCasesData(cases);\n      setOwid(owid);\n      setRt(rt);\n      setReady(true);\n    });\n  }, []);\n\n  function update(type, data) {\n    switch (type) {\n      case 'vacinas':\n        let arr = Array.from(vaccines);\n        arr.push(data);\n        setVaccines(arr);\n        bumpVersioning(versioning + 1);\n        break;\n\n      case 'casos':\n        //casos.push(data);\n        //setCasos(casos);\n        bumpVersioning(versioning + 1);\n        break;\n\n      case 'reload':\n        window.location.reload();\n        break;\n    }\n  }\n\n  return {\n    versioning,\n    statistics,\n    ready,\n    update\n  };\n}","map":null,"metadata":{},"sourceType":"module"}