{"ast":null,"code":"require('dotenv').config({\n  path: './../.env'\n});\n\nconst crypto = require('crypto');\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nconst webhookPayloadParser = req => new Promise(resolve => {\n  let data = '';\n  req.on('data', chunk => {\n    data += chunk;\n  });\n  req.on('end', () => {\n    resolve(Buffer.from(data).toString());\n  });\n});\n\nfunction verifyPostData(req, res) {\n  return new Promise((resolve, rej) => {\n    if (!req.rawBody) {\n      resolve('Request body empty');\n    }\n\n    const sig = Buffer.from(req.headers[process.env.HOOKS_HEADER_NAME] || '', 'utf8');\n    const hmac = crypto.createHmac(process.env.HOOKS_SHA, process.env.HOOKS_SECRET);\n    const digest = Buffer.from(process.env.HOOKS_SHA + '=' + hmac.update(req.rawBody).digest('hex'), 'utf8');\n\n    if (sig.length !== digest.length || !crypto.timingSafeEqual(digest, sig)) {\n      resolve(`Request body digest (${digest}) did not match ${process.env.HOOKS_HEADER_NAME} (${sig})`);\n    } else {\n      resolve('Valid Key');\n      shelljs('yarn update:server');\n    }\n  });\n}\n\nexport default async function handler(req, res) {\n  const data = await webhookPayloadParser(req);\n  req.rawBody = data;\n  await verifyPostData(req, res);\n  res.statusCode = 200;\n  res.json({});\n}","map":null,"metadata":{},"sourceType":"module"}