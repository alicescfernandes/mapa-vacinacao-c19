{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useEffect, useRef, useState } from 'react'; //import 'chartjs-plugin-annotation';\n\nimport { Bar, Line } from 'react-chartjs-2';\nimport { formatNumber } from '../../utils';\nimport { Card } from './../Card';\nimport generic from '../../data/generic.json';\nimport { CustomCheckbox } from '../CustomCheckbox';\nimport { RESIZE_TRESHOLD } from '../../constants';\nimport styles from './../Card.module.scss';\nexport function BarVacinasRecebidaDiaAcum({\n  statistics,\n  colors\n}) {\n  let {\n    0: loading,\n    1: setLoading\n  } = useState(true);\n  let {\n    0: graphData,\n    1: setGraphData\n  } = useState({});\n  let [foreground, color_1, color_2, color_3, color_4] = colors;\n  let {\n    0: annotationsToggle,\n    1: setAnnotationsToggle\n  } = useState({\n    dose: true,\n    dose2: true,\n    dose3: true\n  });\n\n  const data = canvas => {\n    let {\n      labels,\n      mod,\n      com,\n      az\n    } = graphData;\n\n    if (window.innerWidth <= RESIZE_TRESHOLD) {\n      canvas.parentNode.style.width = RESIZE_TRESHOLD + 'px';\n    } else {\n      canvas.parentNode.style.width = '100%';\n    }\n\n    window.addEventListener('resize', () => {\n      if (window.innerWidth <= RESIZE_TRESHOLD) {\n        canvas.parentNode.style.width = RESIZE_TRESHOLD + 'px';\n      } else {\n        canvas.parentNode.style.width = '100%';\n      }\n    });\n    return {\n      labels: labels.map(({\n        from,\n        to\n      }) => {\n        let fromDate = new Date(from);\n        let toDate = new Date(to);\n        return `De ${formatNumber(fromDate.getDate())}/${formatNumber(fromDate.getMonth() + 1)} a ${formatNumber(toDate.getDate())}/${formatNumber(toDate.getMonth() + 1)}`;\n      }),\n      datasets: [{\n        label: 'Comirnaty (Pfizer/BioNTech)',\n        fill: false,\n        type: 'bar',\n        overlayBars: true,\n        backgroundColor: foreground,\n        data: com,\n        order: 2,\n        display: false,\n        stack: 'stack0'\n      }, {\n        label: 'Moderna',\n        backgroundColor: color_1,\n        borderColor: color_1,\n        data: mod,\n        type: 'bar',\n        overlayBars: true,\n        order: 3,\n        stack: 'stack0'\n      }, {\n        label: 'AstraZeneca',\n        backgroundColor: color_3,\n        borderColor: color_3,\n        type: 'bar',\n        data: az,\n        overlayBars: true,\n        order: 3,\n        stack: 'stack0'\n      }]\n    };\n  };\n\n  const options = () => {\n    return {\n      plugins: {\n        datalabels: {\n          display: false,\n          color: 'blue'\n        }\n      },\n      legend: {\n        position: 'bottom',\n        align: 'start',\n        onHover: function (event, legend) {\n          document.body.classList.add('mouse-pointer');\n        },\n        onLeave: function (event, legend) {\n          document.body.classList.remove('mouse-pointer');\n        }\n      },\n      animation: {\n        duration: 1000\n      },\n      annotation: {\n        annotations: [{\n          type: 'line',\n          mode: 'horizontal',\n          scaleID: 'y-axis-0',\n          value: annotationsToggle.dose ? generic.doses.valor : null,\n          borderColor: '#0A9DD1',\n          borderWidth: 2,\n          borderDash: [5, 5],\n          label: {\n            backgroundColor: 'rgba(0,0,0,0.0)',\n            drawTime: 'afterDatasetsDraw',\n            fontSize: 13,\n            textAlign: 'left',\n            fontColor: '#0A9DD1',\n            position: 'left',\n            xAdjust: 10,\n            yAdjust: -10,\n            fontSize: '13px',\n            fontStyle: 'bold',\n            enabled: true,\n            content: `Doses adquiridas - ${generic.doses.legenda} (01/03/2021) `\n          }\n        }, {\n          type: 'line',\n          mode: 'horizontal',\n          scaleID: 'y-axis-0',\n          value: annotationsToggle.dose ? 41000000 : null,\n          borderColor: 'transparent',\n          borderWidth: 0,\n          label: {\n            backgroundColor: 'rgba(0,0,0,0.0)',\n            xAdjust: 0,\n            yAdjust: -10,\n            enabled: false\n          }\n        }, {\n          type: 'line',\n          mode: 'horizontal',\n          scaleID: 'y-axis-0',\n          value: annotationsToggle.dose3 ? generic.doses3.valor : null,\n          borderColor: '#D17615',\n          borderWidth: 2,\n          borderDash: [5, 5],\n          label: {\n            backgroundColor: 'rgba(0,0,0,0.0)',\n            drawTime: 'afterDatasetsDraw',\n            fontSize: 13,\n            textAlign: 'left',\n            font: {\n              style: 'bold'\n            },\n            fontStyle: 'bold',\n            fontColor: '#D11541',\n            fontSize: '13px',\n            position: 'left',\n            xAdjust: 0,\n            yAdjust: -10,\n            enabled: true,\n            content: `Doses adquiridas - ${generic.doses3.legenda} (21/01/2020) `\n          }\n        }, {\n          type: 'line',\n          mode: 'horizontal',\n          scaleID: 'y-axis-0',\n          value: annotationsToggle.dose2 ? generic.doses2.valor : null,\n          borderColor: '#D17615',\n          borderWidth: 2,\n          borderDash: [5, 5],\n          label: {\n            backgroundColor: 'rgba(0,0,0,0.0)',\n            drawTime: 'afterDatasetsDraw',\n            fontSize: 13,\n            textAlign: 'left',\n            font: {\n              style: 'bold'\n            },\n            fontStyle: 'bold',\n            fontColor: '#D17615',\n            fontSize: '13px',\n            position: 'left',\n            xAdjust: 0,\n            yAdjust: -10,\n            enabled: true,\n            content: `Doses adquiridas - ${generic.doses2.legenda} (04/12/2020) `\n          }\n        }]\n      },\n      tooltips: {\n        mode: 'index',\n        intersect: false,\n        callbacks: {\n          label: (tooltipItem, data) => {\n            var label = data.datasets[tooltipItem.datasetIndex].label;\n            return label + ': ' + (parseInt(tooltipItem.value) ? formatNumber(parseInt(tooltipItem.value), false) : 0);\n          },\n          title: (tooltipItem, data) => {\n            var label = data.datasets[tooltipItem[0].datasetIndex];\n            return tooltipItem[0].label;\n          }\n        }\n      },\n      scales: {\n        yAxes: [{\n          stacked: true,\n          ticks: {\n            beginAtZero: true,\n            maxTicksLimit: window.innerWidth <= RESIZE_TRESHOLD ? 8 : 10,\n            minTicksLimit: window.innerWidth <= RESIZE_TRESHOLD ? 8 : 10,\n            callback: value => formatNumber(value, false)\n          }\n        }],\n        xAxes: [{\n          stacked: true,\n          ticks: {\n            beginAtZero: true\n          }\n        }]\n      }\n    };\n  };\n\n  useEffect(async () => {\n    setGraphData(await statistics.getDosesRecebidasAcum());\n    setLoading(false);\n  }, []);\n  return /*#__PURE__*/_jsxs(Card, {\n    allowOverflow: true,\n    children: [/*#__PURE__*/_jsxs(\"div\", {\n      className: [styles.card_checkboxes, styles.card_scrollable].join(' '),\n      style: {\n        textAlign: 'left'\n      },\n      children: [/*#__PURE__*/_jsx(CustomCheckbox, {\n        checked: annotationsToggle.dose,\n        label: 'Doses adquiridas (01/03/2021)',\n        onChange: checked => {\n          setAnnotationsToggle(_objectSpread(_objectSpread({}, annotationsToggle), {}, {\n            dose: checked\n          }));\n        }\n      }), /*#__PURE__*/_jsx(CustomCheckbox, {\n        checked: annotationsToggle.dose3,\n        label: 'Doses adquiridas (21/01/2021)',\n        onChange: checked => {\n          setAnnotationsToggle(_objectSpread(_objectSpread({}, annotationsToggle), {}, {\n            dose3: checked\n          }));\n        }\n      }), /*#__PURE__*/_jsx(CustomCheckbox, {\n        checked: annotationsToggle.dose2,\n        label: 'Doses adquiridas (04/12/2020)',\n        onChange: checked => {\n          setAnnotationsToggle(_objectSpread(_objectSpread({}, annotationsToggle), {}, {\n            dose2: checked\n          }));\n        }\n      })]\n    }), /*#__PURE__*/_jsx(\"div\", {\n      children: !loading ? /*#__PURE__*/_jsx(Bar, {\n        height: 100,\n        options: options(),\n        data: data\n      }) : ''\n    })]\n  });\n}","map":null,"metadata":{},"sourceType":"module"}