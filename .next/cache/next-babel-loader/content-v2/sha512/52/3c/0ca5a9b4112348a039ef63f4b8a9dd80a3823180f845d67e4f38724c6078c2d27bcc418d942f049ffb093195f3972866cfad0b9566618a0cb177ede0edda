{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useEffect, useRef, useState } from 'react';\nimport { Bar } from 'react-chartjs-2';\nimport { formatNumber } from '../../utils';\nimport { Card } from './../Card';\nimport classNames from 'classnames';\nimport { RESIZE_TRESHOLD } from './../../constants';\nexport function BarAdministradasPorFaixaEtaria(_ref) {\n  var statistics = _ref.statistics,\n      colors = _ref.colors;\n\n  var _useState = useState(false),\n      loaded = _useState[0],\n      setLoaded = _useState[1];\n\n  var main = colors.main,\n      shades = colors.shades,\n      tints = colors.tints,\n      complements = colors.complements;\n\n  var _useState2 = useState({}),\n      graphData = _useState2[0],\n      setGraphData = _useState2[1];\n\n  var _useState3 = useState(1),\n      activeDose = _useState3[0],\n      setActiveDose = _useState3[1];\n\n  var canvasRef = useRef(null);\n  useEffect(function () {\n    var _canvasRef$current;\n\n    if (canvasRef !== null && canvasRef !== void 0 && (_canvasRef$current = canvasRef.current) !== null && _canvasRef$current !== void 0 && _canvasRef$current.chartInstance) {\n      canvasRef.current.chartInstance.data.datasets.forEach(function (dataset) {\n        if (dataset.customDose == activeDose) {\n          dataset.hidden = false;\n        } else {\n          dataset.hidden = true;\n        }\n\n        canvasRef.current.chartInstance.update();\n      });\n    }\n  }, [activeDose]);\n\n  var data = function data(canvas) {\n    var labels = graphData.labels,\n        groups = graphData.groups;\n\n    if (window.innerWidth <= RESIZE_TRESHOLD) {\n      canvas.parentNode.style.width = '1000px';\n    } else {\n      canvas.parentNode.style.width = 'auto';\n    }\n\n    window.addEventListener('resize', function () {\n      if (window.innerWidth <= RESIZE_TRESHOLD) {\n        canvas.parentNode.style.width = '1000px';\n      } else {\n        canvas.parentNode.style.width = '100%';\n      }\n    });\n    return {\n      labels: Object.keys(graphData.labels).map(function (key) {\n        var fromDate = new Date(labels[key].from);\n        var toDate = new Date(labels[key].to);\n        return \"De \".concat(formatNumber(fromDate.getDate()), \"/\").concat(formatNumber(fromDate.getMonth() + 1), \" a \").concat(formatNumber(toDate.getDate()), \"/\").concat(formatNumber(toDate.getMonth() + 1));\n      }),\n      datasets: [{\n        label: 'Grupo 18/24 - 2ª Dose',\n        labelGroup: 'Grupo 18/24',\n        fill: false,\n        type: 'bar',\n        backgroundColor: shades[0],\n        data: Object.values(groups['Age18_24'].dose_2),\n        stack: 'stack',\n        order: 1,\n        hidden: true,\n        display: false,\n        customDose: 2\n      }, {\n        label: 'Grupo 18/24 - 1ª Dose',\n        labelGroup: 'Grupo 18/24',\n        backgroundColor: shades[0],\n        data: Object.values(groups['Age18_24'].dose_1),\n        stack: 'stack',\n        order: 2,\n        hidden: false,\n        display: true,\n        customDose: 1\n      }, {\n        label: 'Grupo 25/49 - 2ª Dose',\n        labelGroup: 'Grupo 25/49',\n        fill: false,\n        type: 'bar',\n        backgroundColor: tints[1],\n        data: Object.values(groups['Age25_49'].dose_2),\n        stack: 'stack',\n        order: 3,\n        hidden: true,\n        display: false,\n        customDose: 2\n      }, {\n        label: 'Grupo 25/49 - 1ª Dose',\n        labelGroup: 'Grupo 25/49',\n        backgroundColor: tints[1],\n        data: Object.values(groups['Age25_49'].dose_1),\n        stack: 'stack',\n        order: 4,\n        hidden: false,\n        display: true,\n        customDose: 1\n      }, {\n        label: 'Grupo 50/59 - 2ª Dose',\n        labelGroup: 'Grupo 50/59',\n        fill: false,\n        type: 'bar',\n        backgroundColor: main,\n        data: Object.values(groups['Age50_59'].dose_2),\n        stack: 'stack',\n        order: 5,\n        hidden: true,\n        display: false,\n        customDose: 2\n      }, {\n        label: 'Grupo 50/59 - 1ª Dose',\n        labelGroup: 'Grupo 50/59',\n        backgroundColor: main,\n        data: Object.values(groups['Age50_59'].dose_1),\n        stack: 'stack',\n        order: 6,\n        hidden: false,\n        display: true,\n        customDose: 1\n      }, {\n        label: 'Grupo 60/69 - 2ª Dose',\n        labelGroup: 'Grupo 60/69',\n        fill: false,\n        type: 'bar',\n        backgroundColor: shades[2],\n        data: Object.values(groups['Age60_69'].dose_2),\n        stack: 'stack',\n        order: 7,\n        hidden: true,\n        display: false,\n        customDose: 2\n      }, {\n        label: 'Grupo 60/69 - 1ª Dose',\n        labelGroup: 'Grupo 60/69',\n        backgroundColor: shades[2],\n        data: Object.values(groups['Age60_69'].dose_1),\n        stack: 'stack',\n        order: 8,\n        hidden: false,\n        display: true,\n        customDose: 1\n      }, {\n        label: 'Grupo 70/79 - 2ª Dose',\n        labelGroup: 'Grupo 70/79',\n        fill: false,\n        type: 'bar',\n        backgroundColor: complements[2],\n        data: Object.values(groups['Age70_79'].dose_2),\n        stack: 'stack',\n        order: 9,\n        hidden: true,\n        display: false,\n        customDose: 2\n      }, {\n        label: 'Grupo 70/79 - 1ª Dose',\n        labelGroup: 'Grupo 70/79',\n        backgroundColor: complements[2],\n        data: Object.values(groups['Age70_79'].dose_1),\n        stack: 'stack',\n        order: 10,\n        hidden: false,\n        display: true,\n        customDose: 1\n      }, {\n        label: 'Grupo 80+ - 2ª Dose',\n        labelGroup: 'Grupo 80+',\n        type: 'bar',\n        backgroundColor: complements[1],\n        data: Object.values(groups['Age80+'].dose_2),\n        stack: 'stack',\n        order: 11,\n        hidden: true,\n        display: false,\n        customDose: 2\n      }, {\n        label: 'Grupo 80+ - 1ª Dose',\n        labelGroup: 'Grupo 80+',\n        backgroundColor: complements[1],\n        data: Object.values(groups['Age80+'].dose_1),\n        stack: 'stack',\n        order: 12,\n        hidden: false,\n        display: true,\n        customDose: 1\n      }]\n    };\n  };\n\n  var options = function options() {\n    var maxValue = 180000;\n    return {\n      //maintainAspectRatio: false,\n      plugins: {\n        datalabels: {\n          display: false,\n          color: 'blue'\n        }\n      },\n      onResize: function onResize(a, b, c) {\n        if (window.innerWidth <= RESIZE_TRESHOLD) {\n          a.canvas.parentNode.style.width = '1000px';\n        } else {\n          a.canvas.parentNode.style.width = 'auto';\n        }\n      },\n      legend: {\n        position: 'bottom',\n        align: 'start',\n        onHover: function onHover(event, legend) {\n          document.body.classList.add('mouse-pointer');\n        },\n        onLeave: function onLeave(event, legend) {\n          document.body.classList.remove('mouse-pointer');\n        },\n        labels: {\n          filter: function filter(item, chart) {\n            return chart.datasets[item.datasetIndex].hidden == false;\n          }\n        }\n      },\n      animation: {\n        duration: 1000\n      },\n      tooltips: {\n        mode: 'index',\n        intersect: false,\n        callbacks: {\n          label: function label(tooltipItem, data) {\n            var label = data.datasets[tooltipItem.datasetIndex].label;\n            return label.replace('- 1ª Dose', '').replace('- 2ª Dose', '') + ': ' + formatNumber(parseInt(tooltipItem.value, false));\n          },\n          title: function title(tooltipItem, data) {\n            //var label = data.datasets[tooltipItem[0].datasetIndex];\n            return tooltipItem[0].label;\n          }\n        }\n      },\n      scales: {\n        yAxes: [{\n          stacked: true,\n          ticks: {\n            beginAtZero: false,\n            min: 0,\n            max: maxValue,\n            stepSize: (maxValue / 5).toFixed(0),\n            callback: function callback(value) {\n              return formatNumber(value, false);\n            }\n          }\n        }, {\n          stacked: false,\n          id: 'total',\n          display: false,\n          ticks: {\n            beginAtZero: false,\n            min: 0,\n            max: maxValue,\n            stepSize: (maxValue / 5).toFixed(0),\n            callback: function callback(value) {\n              return formatNumber(value, false);\n            }\n          }\n        }],\n        xAxes: [{\n          stacked: true\n        }]\n      }\n    };\n  };\n\n  useEffect(function () {\n    statistics.getAdministredDosesByAgeByWeek().then(function (data) {\n      setGraphData(data);\n      setLoaded(true);\n      setActiveDose(1);\n    });\n  }, []);\n  return /*#__PURE__*/_jsx(Card, {\n    textLeft: true,\n    allowOverflow: true,\n    children: /*#__PURE__*/_jsx(\"div\", {\n      children: loaded === true ? /*#__PURE__*/_jsxs(_Fragment, {\n        children: [/*#__PURE__*/_jsx(\"div\", {\n          className: 'toggle_buttons',\n          children: /*#__PURE__*/_jsxs(\"p\", {\n            children: [/*#__PURE__*/_jsx(\"button\", {\n              className: classNames('toggle_button', {\n                active: activeDose === 1\n              }),\n              onClick: function onClick() {\n                setActiveDose(1);\n              },\n              children: \"1\\xAA Dose\"\n            }), /*#__PURE__*/_jsx(\"button\", {\n              className: classNames('toggle_button', {\n                active: activeDose === 2\n              }),\n              onClick: function onClick() {\n                setActiveDose(2);\n              },\n              children: \"2\\xAA Dose\"\n            })]\n          })\n        }), /*#__PURE__*/_jsx(\"div\", {\n          children: /*#__PURE__*/_jsx(Bar, {\n            height: 80,\n            ref: canvasRef,\n            options: options(),\n            data: data\n          })\n        })]\n      }) : ''\n    })\n  });\n}","map":null,"metadata":{},"sourceType":"module"}