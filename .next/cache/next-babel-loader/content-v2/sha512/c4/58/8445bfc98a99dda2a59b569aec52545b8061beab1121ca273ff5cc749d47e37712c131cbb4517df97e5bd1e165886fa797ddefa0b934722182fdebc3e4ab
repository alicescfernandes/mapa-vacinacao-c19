{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport _regeneratorRuntime from \"/home/runner/work/mapa-vacinacao-c19/mapa-vacinacao-c19/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/runner/work/mapa-vacinacao-c19/mapa-vacinacao-c19/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { useEffect, useState } from 'react';\nimport { Col, Row } from 'react-bootstrap';\nimport { Bar } from 'react-chartjs-2';\nimport { grades, grades_pretty, MADEIRA_DICOS, RESIZE_TRESHOLD } from '../../constants';\nimport { formatNumber, getColor } from '../../utils';\nimport { Card } from '../Card';\nimport { populacao_residente_ram } from './../../data/generic.json';\nimport cardStyles from './../Card.module.scss';\nexport function RamMapa(_ref) {\n  var statistics = _ref.statistics,\n      colors = _ref.colors;\n\n  var _useState = useState(),\n      graphData = _useState[0],\n      setGraphData = _useState[1];\n\n  var _useState2 = useState(false),\n      loaded = _useState2[0],\n      setLoaded = _useState2[1];\n\n  var main = colors.main,\n      shades = colors.shades;\n\n  var renderMap = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(map) {\n      var madeira, madeiraMapa, layers, legend;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return fetch('/madeira.geojson').then(function (r) {\n                return r.json();\n              });\n\n            case 2:\n              madeira = _context.sent;\n              madeiraMapa = L.map('map', {\n                zoomSnap: 0.1,\n                doubleClickZoom: false,\n                closePopupOnClick: false,\n                dragging: false,\n                zoomDelta: false,\n                trackResize: false,\n                touchZoom: false,\n                scrollWheelZoom: false,\n                zoomControl: false,\n                draggable: false\n              });\n              layers = L.geoJSON(madeira, {\n                onEachFeature: function onEachFeature(feature, shape) {\n                  var concelho = MADEIRA_DICOS[feature.properties.Dico];\n                  var data = graphData.concelhos[concelho];\n                  var percentagem_1 = data.dose_1 / populacao_residente_ram[feature.properties.Dico].valor * 100;\n                  var percentagem_2 = data.dose_2 / populacao_residente_ram[feature.properties.Dico].valor * 100;\n                  shape.bindPopup(\"<p>\\n\\t\\t\\t\\t\\t\\t<strong>\".concat(feature.properties.Municipio, \"</strong>\\n\\t\\t\\t\\t\\t\\t<br>1\\xAA Dose: \").concat(formatNumber(data.dose_1), \" (\").concat(percentagem_1.toFixed(2), \"%)\\n\\t\\t\\t\\t\\t\\t</br>2\\xAA Dose: \").concat(formatNumber(data.dose_2), \" (\").concat(percentagem_2.toFixed(2), \"%)\\n\\t\\t\\t\\t\\t</p>\"));\n                  shape.on('click', function () {//console.log('click');\n                  });\n                },\n                style: function style(feature) {\n                  var concelho = MADEIRA_DICOS[feature.properties.Dico];\n                  var data = graphData.concelhos[concelho];\n                  var percentagem = data.dose_2 / populacao_residente_ram[feature.properties.Dico].valor * 100;\n                  return {\n                    fillOpacity: 1,\n                    fillColor: getColor(percentagem),\n                    lineJoin: 'round',\n                    stroke: true,\n                    weight: 2,\n                    color: '#018b79'\n                  };\n                }\n              }).addTo(madeiraMapa);\n              layers.eachLayer(function (layer) {\n                layer.feature.properties.layerID = layer.feature.properties.DICOFRE;\n              });\n              madeiraMapa.fitBounds(layers.getBounds());\n              madeiraMapa.setZoom(10); //Create legend\n\n              legend = L.control({\n                position: 'bottomleft'\n              });\n\n              legend.onAdd = function (map) {\n                var div = L.DomUtil.create('div', 'info legend');\n\n                for (var i = 0; i < grades.length; i++) {\n                  var grade = grades[i];\n                  var grade_pretty = grades_pretty[grade];\n                  div.innerHTML += \"<p>\\n\\t\\t\\t\\t\\t\\t<i style=\\\"background:\".concat(getColor(grades[i] + 1), \"\\\"></i>\").concat(grade_pretty, \"</p>\");\n                }\n\n                return div;\n              };\n\n              legend.addTo(madeiraMapa);\n\n            case 11:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function renderMap(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  function renderGraph(el) {\n    var data = function data(canvas, cenas) {\n      /* \tif (window.innerWidth <= RESIZE_TRESHOLD) {\n      \tcanvas.parentNode.style.width = RESIZE_TRESHOLD + 'px';\n      } else {\n      \tcanvas.parentNode.style.width = '100%';\n      } */\n\n      /* \twindow.addEventListener('resize', () => {\n      \tif (window.innerWidth <= RESIZE_TRESHOLD) {\n      \t\tcanvas.parentNode.style.width = RESIZE_TRESHOLD + 'px';\n      \t} else {\n      \t\tcanvas.parentNode.style.width = '100%';\n      \t}\n      });\n      */\n      var chartData = {\n        labels: [''],\n        datasets: [{\n          label: 'Total de vacinas administradas - 1ª Dose',\n          borderColor: main,\n          backgroundColor: main,\n          stack: 'stack0',\n          order: 2,\n          data: [el.dose_1]\n        }, {\n          label: 'Total de vacinas administradas - 2ª Dose',\n          borderColor: shades[0],\n          backgroundColor: shades[0],\n          data: [el.dose_2],\n          stack: 'stack0',\n          order: 1\n        }]\n      };\n      return chartData;\n    };\n\n    var options = function options() {\n      var dico = MADEIRA_DICOS[el.chave];\n      var populacao_residente = populacao_residente_ram[dico].valor;\n      return {\n        indexAxis: 'y',\n        plugins: {\n          datalabels: {\n            display: false\n          },\n          legend: {\n            position: 'bottom',\n            align: 'start',\n            display: false\n          }\n        },\n        layout: {\n          padding: {\n            left: -12\n          }\n        },\n        animation: {\n          duration: 1000\n        },\n        tooltips: {\n          mode: 'index',\n          intersect: false,\n          callbacks: {\n            title: function title(tooltipItem, data) {\n              return '';\n            }\n          }\n        },\n        scales: {\n          yAxes: [{\n            stacked: true,\n            id: 'y-axis',\n            ticks: {\n              beginAtZero: true\n            }\n          }],\n          xAxes: [{\n            stacked: false,\n            ticks: {\n              beginAtZero: true,\n              max: populacao_residente,\n              stepSize: Math.round(window.innerWidth <= RESIZE_TRESHOLD ? populacao_residente / 3 : populacao_residente / 6),\n              callback: function callback(value) {\n                return formatNumber(value, false);\n              }\n            }\n          }]\n        }\n      };\n    };\n\n    return /*#__PURE__*/_jsx(Col, {\n      xs: 12,\n      lg: 4,\n      children: /*#__PURE__*/_jsxs(\"div\", {\n        className: cardStyles.ram_subchart_bar,\n        children: [/*#__PURE__*/_jsx(\"h2\", {\n          className: cardStyles.text_left,\n          children: el.nome\n        }), /*#__PURE__*/_jsx(Bar, {\n          height: window.innerWidth <= RESIZE_TRESHOLD ? 60 : 60,\n          options: options(),\n          data: data\n        })]\n      })\n    });\n  }\n\n  useEffect( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            statistics.getArquipelagoData().then(function (data) {\n              setGraphData(data[12]);\n\n              if (loaded === false) {\n                setLoaded(true);\n              }\n\n              if (loaded === true) {\n                renderMap();\n              }\n            });\n\n          case 1:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  })), [loaded]);\n  return loaded === true ? /*#__PURE__*/_jsxs(Card, {\n    children: [/*#__PURE__*/_jsx(Row, {\n      children: /*#__PURE__*/_jsx(Col, {\n        children: /*#__PURE__*/_jsx(\"div\", {\n          id: \"map\",\n          style: {\n            height: '350px'\n          }\n        })\n      })\n    }), /*#__PURE__*/_jsx(Row, {\n      style: {\n        marginTop: 15\n      },\n      children: Object.values(graphData.concelhos).map(renderGraph)\n    }), /*#__PURE__*/_jsx(Row, {\n      children: /*#__PURE__*/_jsx(\"div\", {\n        className: 'legends',\n        children: /*#__PURE__*/_jsxs(\"p\", {\n          children: [/*#__PURE__*/_jsxs(\"span\", {\n            className: 'legend',\n            children: [/*#__PURE__*/_jsx(\"span\", {\n              style: {\n                backgroundColor: main\n              },\n              className: 'color_sample'\n            }), \"1\\xAA Dose\"]\n          }), /*#__PURE__*/_jsxs(\"span\", {\n            className: 'legend',\n            children: [/*#__PURE__*/_jsx(\"span\", {\n              style: {\n                backgroundColor: shades[1]\n              },\n              className: 'color_sample'\n            }), \"2\\xAA Dose\"]\n          })]\n        })\n      })\n    })]\n  }) : '';\n} //<Row>{renderGraph(graphData.concelhos.ribeira_brava)}</Row>","map":null,"metadata":{},"sourceType":"module"}