{"ast":null,"code":"import _slicedToArray from \"/home/runner/work/mapa-vacinacao-c19/mapa-vacinacao-c19/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _defineProperty from \"/home/runner/work/mapa-vacinacao-c19/mapa-vacinacao-c19/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"/home/runner/work/mapa-vacinacao-c19/mapa-vacinacao-c19/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/runner/work/mapa-vacinacao-c19/mapa-vacinacao-c19/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useEffect, useState } from 'react';\nimport { ECDC_MAPPING, REGIOES } from '../constants';\nimport { fetchWithLocalCache } from '../utils';\nimport data from './../data/last-update.json';\nimport { populacao, populacao_ram, populacao_raa } from './../data/generic.json';\nimport lastUpdate from './../data/last-update.json';\nimport { isSameDay } from 'date-fns';\nexport function useData(_ref) {\n  var regiao = _ref.regiao;\n\n  var _useState = useState(false),\n      ready = _useState[0],\n      setReady = _useState[1];\n\n  var _useState2 = useState(false),\n      versioning = _useState2[0],\n      bumpVersioning = _useState2[1];\n\n  var _useState3 = useState(false),\n      ecdc = _useState3[0],\n      setECDC = _useState3[1];\n\n  var _useState4 = useState(false),\n      vaccines = _useState4[0],\n      setVaccines = _useState4[1];\n\n  var _useState5 = useState(false),\n      casesData = _useState5[0],\n      setCasesData = _useState5[1];\n\n  var _useState6 = useState({\n    madeira: {\n      vacinas: [],\n      casos: []\n    },\n    acores: {\n      vacinas: [],\n      casos: []\n    }\n  }),\n      arquipelagos = _useState6[0],\n      setArquipelagos = _useState6[1];\n\n  var options = {\n    month: 'numeric',\n    day: 'numeric'\n  };\n  /* let options2 = {\n  \tmonth: 'short',\n  \tday: 'numeric',\n  \tyear: 'numeric',\n  }; \n  console.log(1)\n  */\n\n  var f = new Intl.DateTimeFormat('pt-PT', options); // let f2 = new Intl.DateTimeFormat('pt-PT', options2);\n\n  function parseData(data) {\n    if (!ready) return;\n    var vaccines_stock = [];\n    var values = [];\n    var labels = [];\n    data.forEach(function (el) {\n      labels.push(f.format(new Date(el.Data)));\n      values.push(el.Vacinados_Ac);\n    });\n    return {\n      values: values,\n      labels: labels\n    };\n  }\n\n  var statistics = {\n    getRaw: function getRaw() {\n      return vaccines;\n    },\n    getEstimativaStock: function () {\n      var _getEstimativaStock = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var DAYS_PER_WEEK, totalDays, _statistics$getDiario, totalDiarios, labels, vaccines_stock, vaccines_stock_var, _yield$statistics$get, com, mod, az, labelsEcdc, totais, current_vaccine_stock;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                DAYS_PER_WEEK = 7;\n                totalDays = data.week * DAYS_PER_WEEK;\n                _statistics$getDiario = statistics.getDiariosInoculacoes(), totalDiarios = _statistics$getDiario.values, labels = _statistics$getDiario.labels;\n                vaccines_stock = Array(totalDiarios.length).fill(0);\n                vaccines_stock_var = Array(totalDays).fill(0);\n                _context.next = 7;\n                return statistics.getReceivedDosesByBrandByWeek();\n\n              case 7:\n                _yield$statistics$get = _context.sent;\n                com = _yield$statistics$get.com;\n                mod = _yield$statistics$get.mod;\n                az = _yield$statistics$get.az;\n                labelsEcdc = _yield$statistics$get.labels;\n                totais = com.map(function (el, idx) {\n                  var _mod$idx, _az$idx, _com$idx;\n\n                  return ((_mod$idx = mod[idx]) !== null && _mod$idx !== void 0 ? _mod$idx : 0) + ((_az$idx = az[idx]) !== null && _az$idx !== void 0 ? _az$idx : 0) + ((_com$idx = com[idx]) !== null && _com$idx !== void 0 ? _com$idx : 0);\n                });\n                vaccines_stock = vaccines_stock.map(function (el, idx) {\n                  var found_date = null;\n                  var date = vaccines[idx].Data; //Try to find if that date had vaccines\n\n                  labelsEcdc.filter(function (el, date_idx) {\n                    if (idx == 0) {\n                      found_date = 1;\n                      return;\n                    }\n\n                    if (idx == 1) {\n                      return;\n                    }\n\n                    if (isSameDay(date, new Date(el.from).getTime())) {\n                      found_date = date_idx;\n                    }\n                  });\n\n                  if (found_date !== null) {\n                    return totais[found_date];\n                  }\n\n                  return 0;\n                });\n                current_vaccine_stock = 0;\n                vaccines_stock_var = vaccines_stock_var.map(function (el, idx) {\n                  current_vaccine_stock = current_vaccine_stock - (totalDiarios[idx] || 0) + vaccines_stock[idx];\n                  return current_vaccine_stock;\n                });\n                return _context.abrupt(\"return\", {\n                  vaccines_stock_var: vaccines_stock_var,\n                  labels: labels\n                });\n\n              case 17:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function getEstimativaStock() {\n        return _getEstimativaStock.apply(this, arguments);\n      }\n\n      return getEstimativaStock;\n    }(),\n    getLastVaccineAvaliable: function getLastVaccineAvaliable() {\n      var data = {};\n\n      if (regiao !== REGIOES.PORTUGAL) {\n        var dados_regiao = arquipelagos[regiao].vacinas;\n        var lastItem = dados_regiao[dados_regiao.length - 1];\n        data = {\n          dose_2: lastItem.dose_2,\n          dose_1: lastItem.dose_1,\n          total: lastItem.total\n        };\n      } else {\n        var _lastItem = vaccines[vaccines.length - 1];\n        data = {\n          dose_2: _lastItem.Inoculacao2_Ac,\n          dose_1: _lastItem.Inoculacao1_Ac,\n          total: _lastItem.Vacinados_Ac\n        };\n      }\n\n      return data;\n    },\n    getLastCaseAvaliable: function getLastCaseAvaliable() {\n      var data = {};\n\n      if (regiao !== REGIOES.PORTUGAL) {\n        var dados_regiao = arquipelagos[regiao].casos;\n        var lastItem = dados_regiao[dados_regiao.length - 1];\n        data = {\n          ativos: parseInt(lastItem.ativos),\n          recuperados: parseInt(lastItem.recuperados),\n          obitos: parseInt(lastItem.obitos),\n          populacao: regiao == REGIOES.MADEIRA ? parseInt(populacao_ram.valor) : parseInt(populacao_raa.valor),\n          data: lastItem.data\n        };\n      } else {\n        var _lastItem2 = casesData[casesData.length - 1];\n        data = {\n          ativos: _lastItem2.Activos,\n          recuperados: _lastItem2.Recuperados,\n          obitos: _lastItem2.Obitos,\n          populacao: populacao.valor,\n          data: _lastItem2.Data\n        };\n      }\n\n      return data;\n    },\n    getDailyData: function getDailyData() {\n      if (regiao !== REGIOES.PORTUGAL) {\n        var dados_regiao = arquipelagos[regiao].vacinas;\n        var labels = [];\n        var values = [];\n        dados_regiao.forEach(function (el) {\n          labels.push(f.format(new Date(el.data)));\n          values.push(el.total);\n        });\n        return {\n          labels: labels,\n          values: values\n        };\n      } else {\n        return parseData(vaccines);\n      }\n    },\n    getDesvioPadrao: function getDesvioPadrao() {},\n    getMediaMovel: function getMediaMovel(dias) {\n      var medias = [];\n      var labelsMedias = [];\n\n      if (regiao === REGIOES.PORTUGAL) {\n        var _parseData = parseData(vaccines),\n            labels = _parseData.labels,\n            values = _parseData.values;\n\n        for (var start = 1; start <= dias; start++) {\n          var sum = Math.round(values.slice(0, start).reduce(function (prev, current) {\n            return prev + current;\n          }, 0) / start);\n          medias.push(sum);\n          labelsMedias.push(labels[start]);\n        }\n\n        for (var _start = dias; _start <= values.length; _start++) {\n          var _sum = Math.round(values.slice(_start - dias, _start).reduce(function (prev, current) {\n            return prev + current;\n          }, 0) / dias);\n\n          medias.push(_sum);\n          labelsMedias.push(labels[_start]);\n        }\n      }\n\n      return {\n        values: medias,\n        labels: labelsMedias\n      };\n    },\n    getRtRegiao: function () {\n      var _getRtRegiao = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(regiao) {\n        var data2, date, returnRt;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return fetchWithLocalCache(\"/api/rt/\".concat(regiao, \"?\").concat(btoa(lastUpdate.date))).then(function (responseRt) {\n                  return responseRt;\n                });\n\n              case 2:\n                data2 = _context2.sent;\n                date = new Date('2021-01-01').getTime();\n                returnRt = data2.filter(function (el) {\n                  return new Date(el.Data).getTime() >= date;\n                }); //let returnRt = data2;\n\n                return _context2.abrupt(\"return\", {\n                  labels: returnRt.map(function (el) {\n                    return f.format(new Date(el.Data));\n                  }),\n                  rt: returnRt\n                });\n\n              case 6:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function getRtRegiao(_x) {\n        return _getRtRegiao.apply(this, arguments);\n      }\n\n      return getRtRegiao;\n    }(),\n    getRtRegioes: function () {\n      var _getRtRegioes = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var data, dates, rtData;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return fetchWithLocalCache(\"/api/rt/todas?\".concat(btoa(lastUpdate.date))).then(function (responseRt) {\n                  return responseRt;\n                });\n\n              case 2:\n                data = _context3.sent;\n                dates = data.rt_continente.map(function (el) {\n                  return el.Data;\n                }); //get rt for each date\n\n                rtData = [];\n                dates.forEach(function (el) {\n                  var tempD = {\n                    continente: data.rt_continente.filter(function (tempEl) {\n                      return tempEl.Data === el;\n                    })[0],\n                    centro: data.rt_centro.filter(function (tempEl) {\n                      return tempEl.Data === el;\n                    })[0],\n                    nacional: data.rt_nacional.filter(function (tempEl) {\n                      return tempEl.Data === el;\n                    })[0],\n                    lvt: data.rt_lvt.filter(function (tempEl) {\n                      return tempEl.Data === el;\n                    })[0],\n                    alentejo: data.rt_alentejo.filter(function (tempEl) {\n                      return tempEl.Data === el;\n                    })[0],\n                    norte: data.rt_norte.filter(function (tempEl) {\n                      return tempEl.Data === el;\n                    })[0],\n                    algarve: data.rt_algarve.filter(function (tempEl) {\n                      return tempEl.Data === el;\n                    })[0],\n                    ram: data.rt_ram.filter(function (tempEl) {\n                      return tempEl.Data === el;\n                    })[0],\n                    raa: data.rt_raa.filter(function (tempEl) {\n                      return tempEl.Data === el;\n                    })[0]\n                  };\n                  rtData.push(tempD);\n                });\n                return _context3.abrupt(\"return\", {\n                  labels: dates.map(function (el) {\n                    return f.format(new Date(el));\n                  }),\n                  values: rtData\n                });\n\n              case 7:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      function getRtRegioes() {\n        return _getRtRegioes.apply(this, arguments);\n      }\n\n      return getRtRegioes;\n    }(),\n    getOwid: function () {\n      var _getOwid = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        var owid, labels, data;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return fetchWithLocalCache(\"/api/owid?\".concat(btoa(lastUpdate.date)));\n\n              case 2:\n                owid = _context4.sent;\n                labels = owid.eun.data.map(function (el) {\n                  return f.format(new Date(el.date));\n                });\n                data = {\n                  pt: owid.prt.data,\n                  eu: owid.eun.data\n                };\n                return _context4.abrupt(\"return\", _objectSpread(_objectSpread({}, data), {}, {\n                  labels: labels\n                }));\n\n              case 6:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }));\n\n      function getOwid() {\n        return _getOwid.apply(this, arguments);\n      }\n\n      return getOwid;\n    }(),\n    getMediaMovelDiaria: function getMediaMovelDiaria(dias) {\n      var medias = [];\n      var labels = [];\n      var labelsMedias = [];\n\n      if (regiao === REGIOES.PORTUGAL) {\n        var _statistics$getVacina = statistics.getVacinadosPorDia(),\n            values = _statistics$getVacina.values;\n\n        for (var start = 1; start < dias; start++) {\n          if (values[start] === null) {\n            medias.push(null);\n            continue;\n          }\n\n          var sum = Math.round(values.slice(0, start).reduce(function (prev, current) {\n            return prev + current;\n          }, 0) / start);\n          medias.push(sum);\n          labelsMedias.push(labels[start]);\n        }\n\n        for (var _start2 = dias; _start2 <= values.length; _start2++) {\n          var slice = values.slice(_start2 - dias, _start2);\n\n          if (values[_start2] === null || slice.includes(null) > 0) {\n            medias.push(null);\n            continue;\n          }\n\n          var _sum2 = Math.round(slice.reduce(function (prev, current) {\n            return prev + current;\n          }, 0) / dias);\n\n          medias.push(_sum2);\n          labelsMedias.push(labels[_start2]);\n        }\n      }\n\n      return {\n        values: medias,\n        labels: labelsMedias\n      };\n    },\n    getVacinadosPorDia: function getVacinadosPorDia() {\n      var _statistics$getDailyD = statistics.getDailyData(),\n          labels = _statistics$getDailyD.labels,\n          values = _statistics$getDailyD.values;\n\n      var vacinadosPorDia = values.map(function (val, idx, vals) {\n        //The first one\n        if (idx === 0) {\n          return val;\n        }\n\n        var nextDay = idx - 1;\n\n        if (vals[nextDay] == null || val == null) {\n          return null;\n        }\n\n        return val - vals[nextDay];\n      });\n      return {\n        values: vacinadosPorDia,\n        labels: labels\n      };\n    },\n    getVacinadosAcum: function getVacinadosAcum() {\n      var in1 = [];\n      var in2 = [];\n      var total = [];\n\n      var _statistics$getDailyD2 = statistics.getDailyData(),\n          labels = _statistics$getDailyD2.labels,\n          values = _statistics$getDailyD2.values;\n\n      if (regiao !== REGIOES.PORTUGAL) {\n        var dados_regiao = arquipelagos[regiao].vacinas;\n        dados_regiao.forEach(function (val, idx, vals) {\n          in1.push(dados_regiao[idx].dose_1);\n          in2.push(dados_regiao[idx].dose_2);\n          total.push(dados_regiao[idx].total);\n        });\n      } else {\n        values.forEach(function (val, idx, vals) {\n          in1.push(vaccines[idx].Inoculacao1_Ac);\n          in2.push(vaccines[idx].Inoculacao2_Ac);\n          total.push(vaccines[idx].Vacinados_Ac);\n        });\n      }\n\n      return {\n        valuesIn1: in1,\n        valuesIn2: in2,\n        values: total,\n        labels: labels\n      };\n    },\n    getDiariosInoculacoes: function getDiariosInoculacoes() {\n      var in1 = [];\n      var in2 = [];\n      var total = [];\n      var raw = vaccines;\n      var labels = [];\n\n      if (regiao !== REGIOES.PORTUGAL) {\n        var _raw = arquipelagos[regiao].vacinas;\n\n        var _statistics$getDailyD3 = statistics.getDailyData(),\n            labelsMad = _statistics$getDailyD3.labels,\n            values = _statistics$getDailyD3.values;\n\n        labels = labelsMad;\n        total = values.map(function (val, idx, vals) {\n          //The first one\n          if (idx === 0) {\n            in1.push(_raw[idx].dose_1);\n            in2.push(_raw[idx].dose_2);\n            return val;\n          }\n\n          var prevDay = idx - 1;\n\n          if (_raw[prevDay].dose_1 == null || _raw[idx].dose_1 == null) {\n            in1.push(null);\n          } else {\n            in1.push(_raw[idx].dose_1 - _raw[prevDay].dose_1);\n          }\n\n          if (_raw[prevDay].dose_2 == null || _raw[idx].dose_2 == null) {\n            in2.push(null);\n          } else {\n            in2.push(_raw[idx].dose_2 - _raw[prevDay].dose_2);\n          }\n\n          if (vals[prevDay] == null || val == null) {\n            return null;\n          }\n\n          return val - vals[prevDay];\n        });\n      } else {\n        var _parseData2 = parseData(vaccines),\n            labelsCont = _parseData2.labels,\n            _values = _parseData2.values;\n\n        labels = labelsCont;\n        total = _values.map(function (val, idx, vals) {\n          //The first one\n          if (idx === 0) {\n            in1.push(vaccines[idx].Inoculacao1_Ac);\n            in2.push(vaccines[idx].Inoculacao2_Ac);\n            return val;\n          }\n\n          var prevDay = idx - 1;\n\n          if (vaccines[prevDay].Inoculacao1_Ac == null || vaccines[idx].Inoculacao1_Ac == null) {\n            in1.push(null);\n          } else {\n            in1.push(vaccines[idx].Inoculacao1_Ac - vaccines[prevDay].Inoculacao1_Ac);\n          }\n\n          if (vaccines[prevDay].Inoculacao2_Ac == null || vaccines[idx].Inoculacao2_Ac == null) {\n            in2.push(null);\n          } else {\n            in2.push(vaccines[idx].Inoculacao2_Ac - vaccines[prevDay].Inoculacao2_Ac);\n          }\n\n          if (vals[prevDay] == null || val == null) {\n            return null;\n          }\n\n          return val - vals[prevDay];\n        });\n      }\n\n      return {\n        valuesIn1: in1,\n        valuesIn2: in2,\n        values: total,\n        raw: raw,\n        labels: labels\n      };\n    },\n    getDiariosCases: function getDiariosCases() {\n      var labels2 = [];\n      var values2 = [];\n      casesData.forEach(function (el) {\n        labels2.push(new Date(el.Data));\n        values2.push(el);\n      });\n      return {\n        labels: labels2,\n        values: values2,\n        raw: casesData\n      };\n    },\n    getReceivedDosesByBrandByWeek: function () {\n      var _getReceivedDosesByBrandByWeek = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n        var labels, weeks, com, mod, az, janss, ecdcRegion;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                labels = {};\n                _context5.next = 3;\n                return fetchWithLocalCache(\"/api/weeks\", false);\n\n              case 3:\n                weeks = _context5.sent;\n                com = {};\n                mod = {};\n                az = {};\n                janss = {};\n                ecdcRegion = ECDC_MAPPING[regiao];\n                ecdc.forEach(function (el) {\n                  if (parseInt(el['NumberDosesReceived']) > 0 && el['Region'] === ecdcRegion) {\n                    com[el['YearWeekISO']] = com[el['YearWeekISO']] || null;\n                    mod[el['YearWeekISO']] = mod[el['YearWeekISO']] || null;\n                    az[el['YearWeekISO']] = az[el['YearWeekISO']] || null;\n                    janss[el['YearWeekISO']] = janss[el['YearWeekISO']] || null;\n                    labels[el['YearWeekISO']] = weeks[el['YearWeekISO']];\n\n                    if (el['Vaccine'] === 'COM') {\n                      com[el['YearWeekISO']] = parseInt(el['NumberDosesReceived']);\n                    }\n\n                    if (el['Vaccine'] === 'MOD') {\n                      mod[el['YearWeekISO']] = parseInt(el['NumberDosesReceived']);\n                    }\n\n                    if (el['Vaccine'] === 'AZ') {\n                      az[el['YearWeekISO']] = parseInt(el['NumberDosesReceived']);\n                    }\n\n                    if (el['Vaccine'] === 'JANSS') {\n                      janss[el['YearWeekISO']] = parseInt(el['NumberDosesReceived']);\n                    }\n                  }\n                });\n                com = Object.values(com);\n                mod = Object.values(mod);\n                az = Object.values(az);\n                janss = Object.values(janss);\n                labels = Object.values(labels);\n                return _context5.abrupt(\"return\", {\n                  com: com,\n                  mod: mod,\n                  az: az,\n                  janss: janss,\n                  labels: labels\n                });\n\n              case 16:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5);\n      }));\n\n      function getReceivedDosesByBrandByWeek() {\n        return _getReceivedDosesByBrandByWeek.apply(this, arguments);\n      }\n\n      return getReceivedDosesByBrandByWeek;\n    }(),\n    getAdministredDosesByAgeByWeek: function () {\n      var _getAdministredDosesByAgeByWeek = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {\n        var labels, maxValue, weeks, groups, ecdcRegion;\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                labels = {};\n                maxValue = 0;\n                _context6.next = 4;\n                return fetchWithLocalCache(\"/api/weeks\", false);\n\n              case 4:\n                weeks = _context6.sent;\n                groups = {};\n                ecdcRegion = ECDC_MAPPING[regiao];\n                ecdc.forEach(function (el) {\n                  if (el['NumberDosesReceived'] == '' && el['Region'] === ecdcRegion) {\n                    if (!labels.hasOwnProperty(el['YearWeekISO'])) {\n                      labels[el['YearWeekISO'].replace('-', '')] = weeks[el['YearWeekISO']];\n                    }\n\n                    groups[el['TargetGroup']] = groups[el['TargetGroup']] || {\n                      dose_1: [],\n                      dose_2: []\n                    };\n                    maxValue = Math.max(el['FirstDose'], el['SecondDose']);\n                    groups[el['TargetGroup']].dose_1[el['YearWeekISO']] = (groups[el['TargetGroup']].dose_1[el['YearWeekISO']] || 0) + parseInt(el['FirstDose']);\n                    groups[el['TargetGroup']].dose_2[el['YearWeekISO']] = (groups[el['TargetGroup']].dose_2[el['YearWeekISO']] || 0) + parseInt(el['SecondDose']);\n                  }\n                });\n                return _context6.abrupt(\"return\", {\n                  maxValue: maxValue,\n                  labels: labels,\n                  groups: groups\n                });\n\n              case 9:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6);\n      }));\n\n      function getAdministredDosesByAgeByWeek() {\n        return _getAdministredDosesByAgeByWeek.apply(this, arguments);\n      }\n\n      return getAdministredDosesByAgeByWeek;\n    }(),\n    getAdministredDosesByAgeByWeekRam: function () {\n      var _getAdministredDosesByAgeByWeekRam = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7() {\n        var labels, maxValue, groups;\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                labels = [];\n                maxValue = 0;\n                groups = [];\n                arquipelagos.madeira.vacinas.forEach(function (el) {\n                  labels.push(el.data);\n                  groups.push(el.escaloes);\n                });\n                return _context7.abrupt(\"return\", {\n                  maxValue: maxValue,\n                  labels: labels,\n                  groups: groups\n                });\n\n              case 5:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7);\n      }));\n\n      function getAdministredDosesByAgeByWeekRam() {\n        return _getAdministredDosesByAgeByWeekRam.apply(this, arguments);\n      }\n\n      return getAdministredDosesByAgeByWeekRam;\n    }(),\n    getTotalAdministredDosesByAgeByWeek: function () {\n      var _getTotalAdministredDosesByAgeByWeek = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8() {\n        var groups;\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                groups = {};\n                ecdc.forEach(function (el) {\n                  if (el['NumberDosesReceived'] == '') {\n                    groups[el['TargetGroup']] = groups[el['TargetGroup']] || {\n                      mod: [],\n                      com: [],\n                      az: [],\n                      janss: [],\n                      target: 0,\n                      max: 0\n                    };\n\n                    if (el['Vaccine'] === 'COM') {\n                      groups[el['TargetGroup']].com[0] = parseInt((groups[el['TargetGroup']].com[0] || 0) + parseInt(el['FirstDose']));\n                      groups[el['TargetGroup']].com[1] = (groups[el['TargetGroup']].com[1] || 0) + parseInt(el['SecondDose']);\n                    }\n\n                    if (el['Vaccine'] === 'MOD') {\n                      groups[el['TargetGroup']].mod[0] = (groups[el['TargetGroup']].mod[0] || 0) + parseInt(el['FirstDose']);\n                      groups[el['TargetGroup']].mod[1] = (groups[el['TargetGroup']].mod[1] || 0) + parseInt(el['SecondDose']);\n                    }\n\n                    if (el['Vaccine'] === 'AZ') {\n                      groups[el['TargetGroup']].az[0] = (groups[el['TargetGroup']].az[0] || 0) + parseInt(el['FirstDose']);\n                      groups[el['TargetGroup']].az[1] = (groups[el['TargetGroup']].az[1] || 0) + parseInt(el['SecondDose']);\n                    }\n\n                    if (el['Vaccine'] === 'JANSS') {\n                      groups[el['TargetGroup']].janss[0] = (groups[el['TargetGroup']].janss[0] || 0) + parseInt(el['FirstDose']);\n                      groups[el['TargetGroup']].janss[1] = (groups[el['TargetGroup']].janss[1] || 0) + parseInt(el['SecondDose']);\n                    }\n\n                    groups[el['TargetGroup']].target = (groups[el['TargetGroup']].target || 0) + parseInt(el['Denominator']);\n                  }\n                });\n                return _context8.abrupt(\"return\", groups);\n\n              case 3:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8);\n      }));\n\n      function getTotalAdministredDosesByAgeByWeek() {\n        return _getTotalAdministredDosesByAgeByWeek.apply(this, arguments);\n      }\n\n      return getTotalAdministredDosesByAgeByWeek;\n    }(),\n    getTotalSNS: function () {\n      var _getTotalSNS = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9() {\n        var sns;\n        return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                _context9.next = 2;\n                return fetchWithLocalCache(\"/api/sns?\".concat(btoa(lastUpdate.dateSnsStartWeirdFormat)), false);\n\n              case 2:\n                sns = _context9.sent;\n                return _context9.abrupt(\"return\", sns.filter(function (el) {\n                  return (el.TYPE === 'REGIONAL' || el.TYPE === 'GENERAL') && el.DATE == data.dateSnsStartWeirdFormat;\n                }));\n\n              case 4:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9);\n      }));\n\n      function getTotalSNS() {\n        return _getTotalSNS.apply(this, arguments);\n      }\n\n      return getTotalSNS;\n    }(),\n    getTotalSNSIdade: function () {\n      var _getTotalSNSIdade = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10() {\n        var sns;\n        return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                _context10.next = 2;\n                return fetchWithLocalCache(\"/api/sns?\".concat(btoa(lastUpdate.dateSnsStartWeirdFormat)), false);\n\n              case 2:\n                sns = _context10.sent;\n                return _context10.abrupt(\"return\", sns.filter(function (el) {\n                  return el.TYPE === 'AGES';\n                }));\n\n              case 4:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10);\n      }));\n\n      function getTotalSNSIdade() {\n        return _getTotalSNSIdade.apply(this, arguments);\n      }\n\n      return getTotalSNSIdade;\n    }(),\n    getTotalSNSRecebidas: function () {\n      var _getTotalSNSRecebidas = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee11() {\n        var sns, _sns$filter, _sns$filter2, item;\n\n        return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                _context11.next = 2;\n                return fetchWithLocalCache(\"/api/sns?\".concat(btoa(lastUpdate.dateSnsStartWeirdFormat)), false);\n\n              case 2:\n                sns = _context11.sent;\n                _sns$filter = sns.filter(function (el) {\n                  return el.TYPE === 'GENERAL' && el.RECEIVED !== 'NA' && el.DATE == data.dateSnsStartWeirdFormat;\n                }), _sns$filter2 = _slicedToArray(_sns$filter, 1), item = _sns$filter2[0];\n                return _context11.abrupt(\"return\", item);\n\n              case 5:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee11);\n      }));\n\n      function getTotalSNSRecebidas() {\n        return _getTotalSNSRecebidas.apply(this, arguments);\n      }\n\n      return getTotalSNSRecebidas;\n    }(),\n    getTotalARS: function () {\n      var _getTotalARS = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee12() {\n        var ars, data;\n        return _regeneratorRuntime.wrap(function _callee12$(_context12) {\n          while (1) {\n            switch (_context12.prev = _context12.next) {\n              case 0:\n                _context12.next = 2;\n                return fetchWithLocalCache(\"/api/ars?\".concat(btoa(lastUpdate.dateSnsStartWeirdFormat)), false);\n\n              case 2:\n                ars = _context12.sent;\n                data = {};\n                ars.features.forEach(function (el) {\n                  if (el.attributes.ARSNome === 'Nacional') el.attributes.ARSNome = 'All';\n\n                  if (!(el.attributes.ARSNome in data)) {\n                    data[el.attributes.ARSNome] = {\n                      obitosNovos7Dias: 0,\n                      casosNovos7Dias: 0\n                    };\n                  }\n\n                  data[el.attributes.ARSNome].obitosNovos7Dias += el.attributes.VarObitos;\n                  data[el.attributes.ARSNome].casosNovos7Dias += el.attributes.ConfirmadosNovos;\n                });\n                return _context12.abrupt(\"return\", data);\n\n              case 6:\n              case \"end\":\n                return _context12.stop();\n            }\n          }\n        }, _callee12);\n      }));\n\n      function getTotalARS() {\n        return _getTotalARS.apply(this, arguments);\n      }\n\n      return getTotalARS;\n    }(),\n    getCases: function getCases() {\n      return casesData;\n    },\n    getDosesRecebidasAcum: function () {\n      var _getDosesRecebidasAcum = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee13() {\n        var weeks, labels, com, mod, az, janss, sum, ecdcCopy, sumArray;\n        return _regeneratorRuntime.wrap(function _callee13$(_context13) {\n          while (1) {\n            switch (_context13.prev = _context13.next) {\n              case 0:\n                sumArray = function _sumArray(array) {\n                  return array.reduce(function (prev, current) {\n                    return prev + current;\n                  }, 0);\n                };\n\n                _context13.next = 3;\n                return fetchWithLocalCache(\"/api/weeks\", false);\n\n              case 3:\n                weeks = _context13.sent;\n\n                if (!(ecdc == false)) {\n                  _context13.next = 6;\n                  break;\n                }\n\n                return _context13.abrupt(\"return\");\n\n              case 6:\n                labels = {};\n                com = {};\n                mod = {};\n                az = {};\n                janss = {};\n                sum = [];\n                ecdcCopy = JSON.parse(JSON.stringify(ecdc));\n                ecdcCopy.filter(function (el) {\n                  return el['NumberDosesReceived'] > 0;\n                }).forEach(function (el) {\n                  if (!labels.hasOwnProperty(el['YearWeekISO'])) {\n                    labels[el['YearWeekISO']] = weeks[el['YearWeekISO']];\n                  }\n\n                  com[el['YearWeekISO']] = com[el['YearWeekISO']] || 0;\n                  mod[el['YearWeekISO']] = mod[el['YearWeekISO']] || 0;\n                  az[el['YearWeekISO']] = az[el['YearWeekISO']] || 0;\n                  janss[el['YearWeekISO']] = janss[el['YearWeekISO']] || 0;\n\n                  if (el['Vaccine'] === 'COM') {\n                    com[el['YearWeekISO']] = parseInt(el['NumberDosesReceived']);\n                  }\n\n                  if (el['Vaccine'] === 'MOD') {\n                    mod[el['YearWeekISO']] = parseInt(el['NumberDosesReceived']);\n                  }\n\n                  if (el['Vaccine'] === 'AZ') {\n                    az[el['YearWeekISO']] = parseInt(el['NumberDosesReceived']);\n                  }\n\n                  if (el['Vaccine'] === 'JANSS') {\n                    janss[el['YearWeekISO']] = parseInt(el['NumberDosesReceived']);\n                  }\n                });\n                com = Object.values(com).reverse().map(function (el, idx, arr) {\n                  return sumArray(arr.slice(idx, arr.length));\n                }).reverse();\n                az = Object.values(az).reverse().map(function (el, idx, arr) {\n                  return sumArray(arr.slice(idx, arr.length));\n                }).reverse();\n                mod = Object.values(mod).reverse().map(function (el, idx, arr) {\n                  return sumArray(arr.slice(idx, arr.length));\n                }).reverse();\n                janss = Object.values(janss).reverse().map(function (el, idx, arr) {\n                  return sumArray(arr.slice(idx, arr.length));\n                }).reverse();\n                sum = mod.map(function (el, idx, arr) {\n                  return com[idx] + az[idx] + mod[idx] + janss[idx];\n                });\n                return _context13.abrupt(\"return\", {\n                  mod: mod,\n                  com: com,\n                  az: az,\n                  janss: janss,\n                  sum: sum,\n                  labels: Object.values(labels)\n                });\n\n              case 20:\n              case \"end\":\n                return _context13.stop();\n            }\n          }\n        }, _callee13);\n      }));\n\n      function getDosesRecebidasAcum() {\n        return _getDosesRecebidasAcum.apply(this, arguments);\n      }\n\n      return getDosesRecebidasAcum;\n    }(),\n    getArquipelagoData: function () {\n      var _getArquipelagoData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee14() {\n        var res;\n        return _regeneratorRuntime.wrap(function _callee14$(_context14) {\n          while (1) {\n            switch (_context14.prev = _context14.next) {\n              case 0:\n                _context14.next = 2;\n                return fetchWithLocalCache(\"/api/\".concat(regiao, \"?\").concat(btoa(lastUpdate.dateMadeira)));\n\n              case 2:\n                res = _context14.sent;\n                return _context14.abrupt(\"return\", res);\n\n              case 4:\n              case \"end\":\n                return _context14.stop();\n            }\n          }\n        }, _callee14);\n      }));\n\n      function getArquipelagoData() {\n        return _getArquipelagoData.apply(this, arguments);\n      }\n\n      return getArquipelagoData;\n    }(),\n    getMadeiraPDS: function () {\n      var _getMadeiraPDS = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee15() {\n        var res;\n        return _regeneratorRuntime.wrap(function _callee15$(_context15) {\n          while (1) {\n            switch (_context15.prev = _context15.next) {\n              case 0:\n                _context15.next = 2;\n                return fetchWithLocalCache(\"/api/\".concat(regiao, \"/pontosituacao?\").concat(btoa(lastUpdate.dateMadeiraCases)));\n\n              case 2:\n                res = _context15.sent;\n                return _context15.abrupt(\"return\", res);\n\n              case 4:\n              case \"end\":\n                return _context15.stop();\n            }\n          }\n        }, _callee15);\n      }));\n\n      function getMadeiraPDS() {\n        return _getMadeiraPDS.apply(this, arguments);\n      }\n\n      return getMadeiraPDS;\n    }()\n  };\n  useEffect(function () {\n    Promise.all([fetchWithLocalCache(\"/api/ecdc?\".concat(btoa(lastUpdate.dateEcdc)), false), fetchWithLocalCache(\"/api/vaccinesold?\".concat(btoa(lastUpdate.date))), fetchWithLocalCache(\"/api/cases?\".concat(btoa(lastUpdate.date))), fetchWithLocalCache(\"/api/madeira?\".concat(btoa(lastUpdate.dateMadeira))), fetchWithLocalCache(\"/api/madeira/pontosituacao?\".concat(btoa(lastUpdate.dateMadeiraCases))), fetchWithLocalCache(\"/api/acores?\".concat(btoa(lastUpdate.dateAcores))), fetchWithLocalCache(\"/api/acores/pontosituacao?\".concat(btoa(lastUpdate.dateAcoresCases)))]).then(function (_ref2) {\n      var _ref3 = _slicedToArray(_ref2, 7),\n          ecdc = _ref3[0],\n          vaccines = _ref3[1],\n          cases = _ref3[2],\n          madeira = _ref3[3],\n          madeiraPDS = _ref3[4],\n          acores = _ref3[5],\n          acoresPDS = _ref3[6];\n\n      setECDC(ecdc);\n      setVaccines(vaccines);\n      setCasesData(cases);\n      setArquipelagos({\n        madeira: {\n          vacinas: madeira,\n          casos: madeiraPDS\n        },\n        acores: {\n          vacinas: acores,\n          casos: acoresPDS\n        }\n      });\n      setReady(true);\n    });\n  }, []);\n\n  function update(type, data) {\n    switch (type) {\n      case 'vacinas':\n        var arr = Array.from(vaccines);\n        arr.push(data);\n        setVaccines(arr);\n        bumpVersioning(versioning + 1);\n        break;\n\n      case 'casos':\n        //casos.push(data);\n        //setCasos(casos);\n        bumpVersioning(versioning + 1);\n        break;\n\n      case 'reload':\n        window.location.reload();\n        break;\n    }\n  }\n\n  return {\n    versioning: versioning,\n    statistics: statistics,\n    ready: ready,\n    update: update\n  };\n}","map":null,"metadata":{},"sourceType":"module"}