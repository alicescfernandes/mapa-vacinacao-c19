{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useEffect, useRef, useState } from 'react';\nimport { Bar } from 'react-chartjs-2';\nimport { formatNumber } from '../../utils';\nimport { Card } from './../Card';\nimport classNames from 'classnames';\nimport { Col, Row } from 'react-bootstrap';\nimport { RESIZE_TRESHOLD } from '../../constants';\nlet styles = {\n  'labels-container': {\n    display: 'inline-block',\n    position: 'relative',\n    //width: '15%',\n    width: '0%',\n    height: '126px',\n    overflow: 'hidden',\n    verticalAlign: 'top',\n    padding: '15px 0px'\n  },\n  'labels-label': {\n    textAlign: 'right',\n    fontSize: '12px',\n    marginBottom: '0px',\n    lineHeight: 'calc(100px / 3)'\n  },\n  'graph-container': {\n    display: 'inline-block',\n    lineHeight: '40px',\n    position: 'relative',\n    width: '100%',\n    height: 150,\n    overflow: 'hidden'\n  }\n};\nexport function BarsVacinacaoArs({\n  statistics,\n  colors\n}) {\n  let {\n    0: loading,\n    1: setLoading\n  } = useState(true);\n  let {\n    main,\n    shades,\n    tints,\n    complements\n  } = colors;\n  const {\n    0: snsData,\n    1: setSNSData\n  } = useState({});\n\n  const data = canvas => {\n    if (window.innerWidth <= RESIZE_TRESHOLD) {\n      canvas.parentNode.style.width = RESIZE_TRESHOLD + 'px';\n    } else {\n      canvas.parentNode.style.width = '100%';\n    }\n\n    window.addEventListener('resize', () => {\n      if (window.innerWidth <= RESIZE_TRESHOLD) {\n        canvas.parentNode.style.width = RESIZE_TRESHOLD + 'px';\n      } else {\n        canvas.parentNode.style.width = '100%';\n      }\n    });\n    return {\n      labels: snsData.filter(el => el.REGION != 'All').map(el => el.REGION.replace('All', 'Nacional')),\n      datasets: [{\n        label: '1ª Dose',\n        backgroundColor: main,\n        data: snsData.filter(el => el.REGION != 'All').map(el => el.CUMUL_VAC_1),\n        fill: false,\n        stack: 'stack1'\n      }, {\n        label: '2ª Dose',\n        backgroundColor: tints[1],\n        data: snsData.filter(el => el.REGION != 'All').map(el => el.CUMUL_VAC_2),\n        stack: 'stack1'\n      }]\n    };\n  };\n\n  const options = () => {\n    return {\n      plugins: {\n        datalabels: {\n          display: false,\n          color: 'white'\n        }\n      },\n      layout: {\n        padding: -5\n      },\n      legend: {\n        display: true,\n        position: 'top',\n        align: 'start',\n        onHover: function (event, legend) {\n          document.body.classList.add('mouse-pointer');\n        },\n        onLeave: function (event, legend) {\n          document.body.classList.remove('mouse-pointer');\n        }\n      },\n      animation: {\n        duration: 1000\n      },\n      tooltips: {\n        mode: 'index',\n        intersect: false,\n        callbacks: {\n          label: (tooltipItem, data) => {\n            var label = data.datasets[tooltipItem.datasetIndex].label;\n            return label + ': ' + formatNumber(parseInt(tooltipItem.value), false);\n          },\n          title: (tooltipItem, data) => {\n            var label = data.datasets[tooltipItem[0].datasetIndex];\n          }\n        }\n      },\n      scales: {\n        yAxes: [{\n          gridLines: {\n            display: true\n          },\n          ticks: {\n            display: true,\n            maxTicksLimit: 7,\n            minTicksLimit: 7,\n            callback: value => formatNumber(value, false)\n          }\n        }],\n        xAxes: [{\n          stacked: true,\n          gridLines: {\n            display: true\n          },\n          ticks: {\n            beginAtZero: true,\n            display: true\n          }\n        }]\n      }\n    };\n  };\n\n  useEffect(async () => {\n    setSNSData(await statistics.getTotalSNS());\n    setLoading(false);\n  }, []);\n  return !loading === true ? /*#__PURE__*/_jsx(Card, {\n    allowOverflow: true,\n    children: /*#__PURE__*/_jsx(\"div\", {\n      children: !loading ? /*#__PURE__*/_jsx(_Fragment, {\n        children: /*#__PURE__*/_jsx(Bar, {\n          height: 80,\n          options: options(),\n          data: data\n        })\n      }) : ''\n    })\n  }) : '';\n}","map":null,"metadata":{},"sourceType":"module"}