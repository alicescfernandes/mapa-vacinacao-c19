{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport _slicedToArray from \"/home/runner/work/mapa-vacinacao-c19/mapa-vacinacao-c19/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useEffect, useRef, useState } from 'react';\nimport { Bar } from 'react-chartjs-2';\nimport { RESIZE_TRESHOLD } from '../../constants';\nimport { formatNumber } from '../../utils';\nimport { Card } from './../Card';\nexport function VacinadosPorDia(_ref) {\n  var statistics = _ref.statistics,\n      colors = _ref.colors;\n\n  var _useState = useState(true),\n      loading = _useState[0],\n      setLoading = _useState[1];\n\n  var _statistics$getDiario = statistics.getDiariosInoculacoes(),\n      values = _statistics$getDiario.values,\n      labels = _statistics$getDiario.labels,\n      valuesIn1 = _statistics$getDiario.valuesIn1,\n      valuesIn2 = _statistics$getDiario.valuesIn2;\n\n  var _statistics$getMediaM = statistics.getMediaMovelDiaria(7),\n      values2 = _statistics$getMediaM.values;\n\n  var _colors = _slicedToArray(colors, 5),\n      foreground = _colors[0],\n      color_1 = _colors[1],\n      color_2 = _colors[2],\n      color_4 = _colors[4];\n\n  console.log(colors);\n  var canvasRef = useRef(null);\n\n  var data = function data(canvas) {\n    if (window.innerWidth <= RESIZE_TRESHOLD) {\n      canvas.parentNode.style.width = RESIZE_TRESHOLD + 'px';\n    } else {\n      canvas.parentNode.style.width = '100%';\n    }\n\n    window.addEventListener('resize', function () {\n      if (window.innerWidth <= RESIZE_TRESHOLD) {\n        canvas.parentNode.style.width = RESIZE_TRESHOLD + 'px';\n      } else {\n        canvas.parentNode.style.width = '100%';\n      }\n    });\n    return {\n      labels: labels,\n      datasets: [{\n        label: 'Vacinas diárias - Média movel de 7 dias',\n        fill: false,\n        lineTension: 0.5,\n        overlayBars: true,\n        type: 'line',\n        lineBorder: 1,\n        borderWidth: 3,\n        borderColor: color_4,\n        borderJoinStyle: 'miter',\n        pointBorderColor: color_4,\n        pointBackgroundColor: color_4,\n        pointBorderWidth: 1,\n        pointHoverRadius: 3,\n        pointHoverBorderWidth: 2,\n        pointRadius: 1,\n        pointHitRadius: 10,\n        data: values2,\n        order: 1\n      }, {\n        label: 'Inoculação - 2ª Dose',\n        fill: false,\n        type: 'bar',\n        overlayBars: true,\n        backgroundColor: foreground,\n        data: valuesIn2,\n        order: 2,\n        display: false,\n        stack: 'stack0'\n      }, {\n        label: 'Inoculação - 1ª Dose',\n        backgroundColor: color_1,\n        borderColor: color_1,\n        data: valuesIn1,\n        overlayBars: true,\n        order: 3,\n        stack: 'stack0'\n      }, {\n        label: 'Vacinas Totais',\n        type: 'bar',\n        overlayBars: true,\n        backgroundColor: color_2,\n        data: values,\n        order: 4,\n        yAxisID: 'total',\n        stack: 'stack0'\n      }]\n    };\n  };\n\n  var numberFormatter = new Intl.NumberFormat();\n\n  var options = function options() {\n    return {\n      layout: {\n        padding: -5\n      },\n      plugins: {\n        datalabels: {\n          display: false,\n          color: 'blue'\n        }\n      },\n      legend: {\n        position: 'bottom',\n        align: 'start'\n      },\n      animation: {\n        duration: 1000\n      },\n      tooltips: {\n        mode: 'index',\n        intersect: false,\n        callbacks: {\n          label: function label(tooltipItem, data) {\n            var label = data.datasets[tooltipItem.datasetIndex].label;\n            return label + ': ' + numberFormatter.format(parseInt(tooltipItem.value)).replace(',', ' ');\n          },\n          title: function title(tooltipItem, data) {\n            return 'Dia ' + tooltipItem[0].label;\n          }\n        }\n      },\n      scales: {\n        yAxes: [{\n          stacked: true,\n          ticks: {\n            beginAtZero: false,\n            maxTicksLimit: window.innerWidth <= RESIZE_TRESHOLD ? 8 : 10,\n            minTicksLimit: window.innerWidth <= RESIZE_TRESHOLD ? 8 : 10,\n            callback: function callback(value, index, values) {\n              return formatNumber(value, false);\n            }\n          }\n        }, {\n          stacked: true,\n          id: 'total',\n          display: false\n        }],\n        xAxes: [{\n          stacked: true,\n          ticks: {\n            beginAtZero: true,\n            maxTicksLimit: window.innerWidth <= RESIZE_TRESHOLD ? 30 : 60,\n            minTicksLimit: window.innerWidth <= RESIZE_TRESHOLD ? 30 : 60\n          }\n        }]\n      }\n    };\n  };\n\n  useEffect(function () {\n    if (values.length) {\n      setLoading(false);\n    }\n  }, [values]);\n  return /*#__PURE__*/_jsx(Card, {\n    allowOverflow: true,\n    children: /*#__PURE__*/_jsx(\"div\", {\n      children: !loading ? /*#__PURE__*/_jsx(Bar, {\n        height: 80,\n        ref: canvasRef,\n        options: options(),\n        data: data\n      }) : ''\n    })\n  });\n}","map":null,"metadata":{},"sourceType":"module"}