{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useEffect, useState } from 'react';\nimport { fetchWithLocalCache } from '../utils';\nimport data from './../data/last-update.json';\nexport function useData() {\n  var _useState = useState(false),\n      ready = _useState[0],\n      setReady = _useState[1];\n\n  var _useState2 = useState(false),\n      versioning = _useState2[0],\n      bumpVersioning = _useState2[1];\n\n  var _useState3 = useState(false),\n      weeks = _useState3[0],\n      setWeeks = _useState3[1];\n\n  var _useState4 = useState(false),\n      sns = _useState4[0],\n      setSns = _useState4[1];\n\n  var _useState5 = useState(false),\n      ecdc = _useState5[0],\n      setECDC = _useState5[1];\n\n  var _useState6 = useState(false),\n      ars = _useState6[0],\n      setArs = _useState6[1];\n\n  var _useState7 = useState(false),\n      owid = _useState7[0],\n      setOwid = _useState7[1];\n\n  var _useState8 = useState(false),\n      vaccines = _useState8[0],\n      setVaccines = _useState8[1];\n\n  var _useState9 = useState(false),\n      casesData = _useState9[0],\n      setCasesData = _useState9[1];\n\n  var _useState10 = useState([]),\n      labels = _useState10[0],\n      setLabels = _useState10[1];\n\n  var _useState11 = useState([]),\n      rt = _useState11[0],\n      setRt = _useState11[1];\n\n  var options = {\n    month: 'short',\n    day: 'numeric'\n  };\n  var options2 = {\n    month: 'short',\n    day: 'numeric',\n    year: 'numeric'\n  };\n  var f = new Intl.DateTimeFormat('pt-PT', options);\n  var f2 = new Intl.DateTimeFormat('pt-PT', options2);\n\n  function parseData(data) {\n    if (!ready) return;\n    var values = [];\n    var labels = [];\n    data.forEach(function (el) {\n      labels.push(f.format(new Date(el.Data)));\n      values.push(el.Vacinados_Ac);\n    });\n    return {\n      values: values,\n      labels: labels\n    };\n  }\n\n  var statistics = {\n    getRaw: function getRaw() {\n      return vaccines;\n    },\n    getDailyData: function getDailyData() {\n      return parseData(vaccines);\n    },\n    getDesvioPadrao: function getDesvioPadrao() {},\n    getMediaMovel: function getMediaMovel(dias) {\n      var medias = [];\n      var labelsMedias = [];\n\n      var _parseData = parseData(vaccines),\n          labels = _parseData.labels,\n          values = _parseData.values;\n\n      for (var start = 1; start <= dias; start++) {\n        var sum = Math.round(values.slice(0, start).reduce(function (prev, current) {\n          return prev + current;\n        }, 0) / start);\n        medias.push(sum);\n        labelsMedias.push(labels[start]);\n      }\n\n      for (var _start = dias; _start <= values.length; _start++) {\n        var _sum = Math.round(values.slice(_start - dias, _start).reduce(function (prev, current) {\n          return prev + current;\n        }, 0) / dias);\n\n        medias.push(_sum);\n        labelsMedias.push(labels[_start]);\n      }\n\n      return {\n        values: medias,\n        labels: labelsMedias\n      };\n    },\n    getRtRegiao: function () {\n      var _getRtRegiao = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(regiao) {\n        var data2, date, returnRt;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return fetchWithLocalCache(\"/api/rt/\".concat(regiao, \"?\").concat(btoa(data.date))).then(function (responseRt) {\n                  setRt(responseRt);\n                  return responseRt;\n                });\n\n              case 2:\n                data2 = _context.sent;\n                date = new Date('2020-12-27T00:00:45.000Z').getTime(); // let returnRt = data.filter((el) => new Date(el.Data).getTime() >= date);\n\n                returnRt = data2;\n                return _context.abrupt(\"return\", {\n                  labels: returnRt.map(function (el) {\n                    return f.format(new Date(el.Data));\n                  }),\n                  rt: returnRt\n                });\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function getRtRegiao(_x) {\n        return _getRtRegiao.apply(this, arguments);\n      }\n\n      return getRtRegiao;\n    }(),\n    getRtRegioes: function () {\n      var _getRtRegioes = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var data, dates, rtData;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return fetchWithLocalCache(\"/api/rt/todas?\".concat(btoa(data.date))).then(function (responseRt) {\n                  return responseRt;\n                });\n\n              case 2:\n                data = _context2.sent;\n                dates = data.rt_continente.map(function (el) {\n                  return el.Data;\n                }); //get rt for each date\n\n                rtData = [];\n                dates.forEach(function (el) {\n                  var tempD = {\n                    continente: data.rt_continente.filter(function (tempEl) {\n                      return tempEl.Data === el;\n                    })[0],\n                    centro: data.rt_centro.filter(function (tempEl) {\n                      return tempEl.Data === el;\n                    })[0],\n                    nacional: data.rt_nacional.filter(function (tempEl) {\n                      return tempEl.Data === el;\n                    })[0],\n                    lvt: data.rt_lvt.filter(function (tempEl) {\n                      return tempEl.Data === el;\n                    })[0],\n                    alentejo: data.rt_alentejo.filter(function (tempEl) {\n                      return tempEl.Data === el;\n                    })[0],\n                    norte: data.rt_norte.filter(function (tempEl) {\n                      return tempEl.Data === el;\n                    })[0],\n                    algarve: data.rt_algarve.filter(function (tempEl) {\n                      return tempEl.Data === el;\n                    })[0],\n                    ram: data.rt_ram.filter(function (tempEl) {\n                      return tempEl.Data === el;\n                    })[0],\n                    raa: data.rt_raa.filter(function (tempEl) {\n                      return tempEl.Data === el;\n                    })[0]\n                  };\n                  rtData.push(tempD);\n                });\n                return _context2.abrupt(\"return\", {\n                  labels: dates.map(function (el) {\n                    return f.format(new Date(el));\n                  }),\n                  values: rtData\n                });\n\n              case 7:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function getRtRegioes() {\n        return _getRtRegioes.apply(this, arguments);\n      }\n\n      return getRtRegioes;\n    }(),\n    getOwid: function getOwid() {\n      var labels = owid.eun.data.map(function (el) {\n        return f.format(new Date(el.date));\n      });\n      var data = {\n        pt: owid.prt.data,\n        eu: owid.eun.data\n      };\n      return _objectSpread(_objectSpread({}, data), {}, {\n        labels: labels\n      });\n    },\n    getMediaMovelDiaria: function getMediaMovelDiaria(dias) {\n      var medias = [];\n      var labelsMedias = [];\n\n      var _statistics$getVacina = statistics.getVacinadosPorDia(),\n          values = _statistics$getVacina.values;\n\n      for (var start = 1; start <= dias; start++) {\n        if (values[start] === null) {\n          medias.push(null);\n          continue;\n        }\n\n        var sum = Math.round(values.slice(0, start).reduce(function (prev, current) {\n          return prev + current;\n        }, 0) / start);\n        medias.push(sum);\n        labelsMedias.push(labels[start]);\n      }\n\n      for (var _start2 = dias; _start2 <= values.length; _start2++) {\n        var slice = values.slice(_start2 - dias, _start2);\n\n        if (values[_start2] === null || slice.includes(null) > 0) {\n          medias.push(null);\n          continue;\n        }\n\n        var _sum2 = Math.round(slice.reduce(function (prev, current) {\n          return prev + current;\n        }, 0) / dias);\n\n        medias.push(_sum2);\n        labelsMedias.push(labels[_start2]);\n      }\n\n      return {\n        values: medias,\n        labels: labelsMedias\n      };\n    },\n    getVacinadosPorDia: function getVacinadosPorDia() {\n      var _statistics$getDailyD = statistics.getDailyData(),\n          labels = _statistics$getDailyD.labels,\n          values = _statistics$getDailyD.values;\n\n      var vacinadosPorDia = values.map(function (val, idx, vals) {\n        //The first one\n        if (idx === 0) {\n          return val;\n        }\n\n        var nextDay = idx - 1;\n\n        if (vals[nextDay] == null || val == null) {\n          return null;\n        }\n\n        return val - vals[nextDay];\n      });\n      return {\n        values: vacinadosPorDia,\n        labels: labels\n      };\n    },\n    getVacinadosAcum: function getVacinadosAcum() {\n      var in1 = [];\n      var in2 = [];\n      var total = [];\n\n      var _statistics$getDailyD2 = statistics.getDailyData(),\n          labels = _statistics$getDailyD2.labels,\n          values = _statistics$getDailyD2.values;\n\n      values.forEach(function (val, idx, vals) {\n        in1.push(vaccines[idx].Inoculacao1_Ac);\n        in2.push(vaccines[idx].Inoculacao2_Ac);\n        total.push(vaccines[idx].Vacinados_Ac);\n      });\n      return {\n        valuesIn1: in1,\n        valuesIn2: in2,\n        values: total,\n        labels: labels\n      };\n    },\n    getDiariosInoculacoes: function getDiariosInoculacoes() {\n      var in1 = [];\n      var in2 = [];\n\n      var _parseData2 = parseData(vaccines),\n          labels = _parseData2.labels,\n          values = _parseData2.values;\n\n      var total = values.map(function (val, idx, vals) {\n        //The first one\n        if (idx === 0) {\n          in1.push(vaccines[idx].Inoculacao1_Ac);\n          in2.push(vaccines[idx].Inoculacao2_Ac);\n          return val;\n        }\n\n        var prevDay = idx - 1;\n\n        if (vaccines[prevDay].Inoculacao1_Ac == null || vaccines[idx].Inoculacao1_Ac == null) {\n          in1.push(null);\n        } else {\n          in1.push(vaccines[idx].Inoculacao1_Ac - vaccines[prevDay].Inoculacao1_Ac);\n        }\n\n        if (vaccines[prevDay].Inoculacao2_Ac == null || vaccines[idx].Inoculacao2_Ac == null) {\n          in2.push(null);\n        } else {\n          in2.push(vaccines[idx].Inoculacao2_Ac - vaccines[prevDay].Inoculacao2_Ac);\n        }\n\n        if (vals[prevDay] == null || val == null) {\n          return null;\n        }\n\n        return val - vals[prevDay];\n      });\n      return {\n        valuesIn1: in1,\n        valuesIn2: in2,\n        values: total,\n        raw: vaccines,\n        labels: labels\n      };\n    },\n    getDiariosCases: function getDiariosCases() {\n      var labels2 = [];\n      var values2 = [];\n      casesData.forEach(function (el) {\n        labels2.push(new Date(el.Data));\n        values2.push(el);\n      });\n      return {\n        labels: labels2,\n        values: values2,\n        raw: casesData\n      };\n    },\n    getReceivedDosesByBrandByWeek: function () {\n      var _getReceivedDosesByBrandByWeek = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var labels, com, mod, az;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                labels = {};\n                com = {};\n                mod = {};\n                az = {};\n                ecdc.forEach(function (el) {\n                  var obj = {};\n\n                  if (parseInt(el['NumberDosesReceived']) > 0) {\n                    com[el['YearWeekISO']] = com[el['YearWeekISO']] || null;\n                    mod[el['YearWeekISO']] = mod[el['YearWeekISO']] || null;\n                    az[el['YearWeekISO']] = az[el['YearWeekISO']] || null;\n                    labels[el['YearWeekISO']] = weeks[el['YearWeekISO']];\n\n                    if (el['Vaccine'] === 'COM') {\n                      com[el['YearWeekISO']] = parseInt(el['NumberDosesReceived']);\n                    }\n\n                    if (el['Vaccine'] === 'MOD') {\n                      mod[el['YearWeekISO']] = parseInt(el['NumberDosesReceived']);\n                    }\n\n                    if (el['Vaccine'] === 'AZ') {\n                      az[el['YearWeekISO']] = parseInt(el['NumberDosesReceived']);\n                    }\n                  }\n                });\n                com = Object.values(com);\n                mod = Object.values(mod);\n                az = Object.values(az);\n                labels = Object.values(labels);\n                return _context3.abrupt(\"return\", {\n                  com: com,\n                  mod: mod,\n                  az: az,\n                  labels: labels\n                });\n\n              case 10:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      function getReceivedDosesByBrandByWeek() {\n        return _getReceivedDosesByBrandByWeek.apply(this, arguments);\n      }\n\n      return getReceivedDosesByBrandByWeek;\n    }(),\n    getAdministredDosesByAgeByWeek: function () {\n      var _getAdministredDosesByAgeByWeek = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        var labels, maxValue, groups;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                labels = {};\n                maxValue = 0;\n                groups = {};\n                ecdc.forEach(function (el) {\n                  debugger;\n\n                  if (el['NumberDosesReceived'] == '') {\n                    if (!labels.hasOwnProperty(el['YearWeekISO'])) {\n                      labels[el['YearWeekISO'].replace('-', '')] = weeks[el['YearWeekISO']];\n                    }\n\n                    groups[el['TargetGroup']] = groups[el['TargetGroup']] || {\n                      dose_1: [],\n                      dose_2: []\n                    };\n                    maxValue = Math.max(el['FirstDose'], el['SecondDose']);\n                    groups[el['TargetGroup']].dose_1[el['YearWeekISO']] = (groups[el['TargetGroup']].dose_1[el['YearWeekISO']] || 0) + parseInt(el['FirstDose']);\n                    groups[el['TargetGroup']].dose_2[el['YearWeekISO']] = (groups[el['TargetGroup']].dose_2[el['YearWeekISO']] || 0) + parseInt(el['SecondDose']);\n                  }\n                });\n                return _context4.abrupt(\"return\", {\n                  maxValue: maxValue,\n                  labels: labels,\n                  groups: groups\n                });\n\n              case 5:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }));\n\n      function getAdministredDosesByAgeByWeek() {\n        return _getAdministredDosesByAgeByWeek.apply(this, arguments);\n      }\n\n      return getAdministredDosesByAgeByWeek;\n    }(),\n    getTotalAdministredDosesByAgeByWeek: function () {\n      var _getTotalAdministredDosesByAgeByWeek = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n        var labels, groups;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                labels = {};\n                groups = {};\n                ecdc.forEach(function (el) {\n                  if (el['NumberDosesReceived'] == '') {\n                    groups[el['TargetGroup']] = groups[el['TargetGroup']] || {\n                      mod: [],\n                      com: [],\n                      az: [],\n                      target: 0\n                    };\n\n                    if (el['Vaccine'] === 'COM') {\n                      groups[el['TargetGroup']].com[0] = parseInt((groups[el['TargetGroup']].com[0] || 0) + parseInt(el['FirstDose']));\n                      groups[el['TargetGroup']].com[1] = (groups[el['TargetGroup']].com[1] || 0) + parseInt(el['SecondDose']);\n                    }\n\n                    if (el['Vaccine'] === 'MOD') {\n                      groups[el['TargetGroup']].mod[0] = (groups[el['TargetGroup']].mod[0] || 0) + parseInt(el['FirstDose']);\n                      groups[el['TargetGroup']].mod[1] = (groups[el['TargetGroup']].mod[1] || 0) + parseInt(el['SecondDose']);\n                    }\n\n                    if (el['Vaccine'] === 'AZ') {\n                      groups[el['TargetGroup']].az[0] = (groups[el['TargetGroup']].az[0] || 0) + parseInt(el['FirstDose']);\n                      groups[el['TargetGroup']].az[1] = (groups[el['TargetGroup']].az[1] || 0) + parseInt(el['SecondDose']);\n                    }\n\n                    groups[el['TargetGroup']].target = (groups[el['TargetGroup']].target || 0) + parseInt(el['Denominator']);\n                  }\n                });\n                return _context5.abrupt(\"return\", groups);\n\n              case 4:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5);\n      }));\n\n      function getTotalAdministredDosesByAgeByWeek() {\n        return _getTotalAdministredDosesByAgeByWeek.apply(this, arguments);\n      }\n\n      return getTotalAdministredDosesByAgeByWeek;\n    }(),\n    getTotalSNS: function getTotalSNS() {\n      return sns.filter(function (el) {\n        return (el.TYPE === 'REGIONAL' || el.TYPE === 'GENERAL') && el.DATE == data.dateSnsStartWeirdFormat;\n      });\n    },\n    getTotalARS: function getTotalARS() {\n      var data = {};\n      ars.features.forEach(function (el) {\n        if (el.attributes.ARSNome === 'Nacional') el.attributes.ARSNome = 'All';\n\n        if (!(el.attributes.ARSNome in data)) {\n          data[el.attributes.ARSNome] = {\n            obitosNovos7Dias: 0,\n            casosNovos7Dias: 0\n          };\n        }\n\n        data[el.attributes.ARSNome].obitosNovos7Dias += el.attributes.VarObitos;\n        data[el.attributes.ARSNome].casosNovos7Dias += el.attributes.ConfirmadosNovos;\n      });\n      return data;\n    },\n    getCases: function getCases() {\n      return casesData;\n    },\n    getDosesRecebidasAcum: function getDosesRecebidasAcum() {\n      if (ecdc == false) return;\n      var labels = {};\n      var data = {};\n      var com = {};\n      var mod = {};\n      var az = {};\n      var sum = [];\n      var ecdcCopy = JSON.parse(JSON.stringify(ecdc));\n      var numbers = [1, 1, 1, 1];\n\n      function sumArray(array) {\n        return array.reduce(function (prev, current) {\n          return prev + current;\n        }, 0);\n      }\n\n      ecdcCopy.filter(function (el) {\n        return el['NumberDosesReceived'] > 0;\n      }).forEach(function (el) {\n        if (!labels.hasOwnProperty(el['YearWeekISO'])) {\n          labels[el['YearWeekISO']] = weeks[el['YearWeekISO']];\n        }\n\n        com[el['YearWeekISO']] = com[el['YearWeekISO']] || 0;\n        mod[el['YearWeekISO']] = mod[el['YearWeekISO']] || 0;\n        az[el['YearWeekISO']] = az[el['YearWeekISO']] || 0;\n\n        if (el['Vaccine'] === 'COM') {\n          com[el['YearWeekISO']] = parseInt(el['NumberDosesReceived']);\n        }\n\n        if (el['Vaccine'] === 'MOD') {\n          mod[el['YearWeekISO']] = parseInt(el['NumberDosesReceived']);\n        }\n\n        if (el['Vaccine'] === 'AZ') {\n          az[el['YearWeekISO']] = parseInt(el['NumberDosesReceived']);\n        }\n      });\n      com = Object.values(com).reverse().map(function (el, idx, arr) {\n        return sumArray(arr.slice(idx, arr.length));\n      }).reverse();\n      az = Object.values(az).reverse().map(function (el, idx, arr) {\n        return sumArray(arr.slice(idx, arr.length));\n      }).reverse();\n      mod = Object.values(mod).reverse().map(function (el, idx, arr) {\n        return sumArray(arr.slice(idx, arr.length));\n      }).reverse();\n      sum = mod.map(function (el, idx, arr) {\n        return com[idx] + az[idx] + mod[idx];\n      });\n      return {\n        mod: mod,\n        com: com,\n        az: az,\n        sum: sum,\n        labels: Object.values(labels)\n      };\n    }\n  };\n  useEffect(function () {\n    Promise.all([fetchWithLocalCache(\"/api/ecdc?\".concat(btoa(data.dateEcdc)), false), fetchWithLocalCache(\"/api/weeks\", false), fetchWithLocalCache(\"/api/sns?\".concat(btoa(data.dateSnsStartWeirdFormat)), false), fetchWithLocalCache(\"/api/vaccinesold?\".concat(btoa(data.date))), fetchWithLocalCache(\"/api/ars?\".concat(btoa(data.dateSnsStartWeirdFormat)), false), fetchWithLocalCache(\"/api/cases?\".concat(btoa(data.date))), fetchWithLocalCache(\"/api/owid?\".concat(btoa(data.date))), fetchWithLocalCache(\"/api/rt/continente?\".concat(btoa(Date.now())))]).then(function (_ref) {\n      var _ref2 = _slicedToArray(_ref, 8),\n          ecdc = _ref2[0],\n          weeks = _ref2[1],\n          sns = _ref2[2],\n          vaccines = _ref2[3],\n          ars = _ref2[4],\n          cases = _ref2[5],\n          owid = _ref2[6],\n          rt = _ref2[7];\n\n      setSns(sns);\n      setWeeks(weeks);\n      setECDC(ecdc);\n      setVaccines(vaccines);\n      setArs(ars);\n      setCasesData(cases);\n      setOwid(owid);\n      setRt(rt);\n      setReady(true);\n    });\n  }, []);\n\n  function update(type, data) {\n    switch (type) {\n      case 'vacinas':\n        var arr = Array.from(vaccines);\n        arr.push(data);\n        setVaccines(arr);\n        bumpVersioning(versioning + 1);\n        break;\n\n      case 'casos':\n        //casos.push(data);\n        //setCasos(casos);\n        bumpVersioning(versioning + 1);\n        break;\n\n      case 'reload':\n        window.location.reload();\n        break;\n    }\n  }\n\n  return {\n    versioning: versioning,\n    statistics: statistics,\n    ready: ready,\n    update: update\n  };\n}","map":null,"metadata":{},"sourceType":"module"}