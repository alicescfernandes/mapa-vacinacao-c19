{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useContext, useEffect, useRef, useState } from 'react';\nimport { Bar } from 'react-chartjs-2';\nimport { REGIOES, RESIZE_TRESHOLD } from '../../constants';\nimport { calculateDims, formatNumber, makeAnnotations } from '../../utils';\nimport { Card } from './../Card';\nimport acontecimentos from './../../data/acontecimentos.json';\nimport { RegiaoContext } from '../context/regiao';\nimport { CustomCheckbox } from './../CustomCheckbox';\nimport styles from './../Card.module.scss';\nexport function VacinadosPorDia({\n  statistics,\n  colors\n}) {\n  let regiao = useContext(RegiaoContext);\n  let {\n    0: loading,\n    1: setLoading\n  } = useState(true);\n  let {\n    values,\n    labels,\n    valuesIn1,\n    valuesIn2\n  } = statistics.getDiariosInoculacoes();\n  let {\n    values: values2\n  } = statistics.getMediaMovelDiaria(7);\n  let {\n    0: vacinas_stock,\n    1: setVacinas_stock\n  } = useState([]);\n  let {\n    main,\n    tints,\n    shades,\n    complements\n  } = colors;\n  let {\n    0: dim,\n    1: setDim\n  } = useState(calculateDims());\n  let {\n    0: toggleStats,\n    1: setToggleStats\n  } = useState({\n    stock: true\n  });\n  const canvasRef = useRef(null);\n\n  const data = canvas => {\n    canvas.parentNode.parentNode.scrollLeft = dim.width;\n    let datasets = [{\n      label: 'Vacinas diárias - Média movel de 7 dias',\n      fill: false,\n      lineTension: 0.5,\n      overlayBars: true,\n      type: 'line',\n      lineBorder: 1,\n      borderWidth: 3,\n      borderColor: complements[1],\n      borderJoinStyle: 'miter',\n      pointBorderColor: complements[1],\n      pointBackgroundColor: complements[1],\n      pointBorderWidth: 1,\n      pointHoverRadius: 3,\n      pointHoverBorderWidth: 2,\n      pointRadius: 1,\n      pointHitRadius: 3,\n      data: values2,\n      order: 2,\n      stack: 'stack1'\n    }, {\n      label: 'Inoculação - 2ª Dose',\n      fill: false,\n      type: 'bar',\n      overlayBars: true,\n      backgroundColor: tints[0],\n      data: valuesIn2,\n      order: 3,\n      display: false,\n      stack: 'stack0'\n    }, {\n      label: 'Inoculação - 1ª Dose',\n      backgroundColor: shades[0],\n      borderColor: shades[0],\n      data: valuesIn1,\n      overlayBars: true,\n      order: 4,\n      stack: 'stack0'\n    }, {\n      label: 'Vacinas Totais',\n      type: 'bar',\n      overlayBars: true,\n      fill: false,\n      borderColor: main,\n      backgroundColor: 'transparent',\n      data: values,\n      borderWidth: 2,\n      order: 5,\n      stack: 'stack0',\n      yAxisID: 'axisy2'\n    }];\n\n    if (regiao === REGIOES.PORTUGAL) {\n      datasets.push({\n        label: 'Stock de Vacinas - Estimativa',\n        fill: false,\n        lineTension: 0.5,\n        overlayBars: true,\n        type: 'line',\n        lineBorder: 1,\n        borderWidth: 3,\n        borderColor: complements[2],\n        borderJoinStyle: 'miter',\n        pointBorderColor: complements[2],\n        pointBackgroundColor: complements[2],\n        pointBorderWidth: 1,\n        pointHoverRadius: 3,\n        pointHoverBorderWidth: 2,\n        pointRadius: 1,\n        pointHitRadius: 3,\n        data: vacinas_stock,\n        order: 6,\n        hidden: !toggleStats.stock,\n        stack: 'stack2'\n      });\n    }\n\n    return {\n      labels: labels,\n      datasets\n    };\n  };\n\n  let numberFormatter = new Intl.NumberFormat();\n  let horizontalAnnotations = makeAnnotations(acontecimentos);\n  let annotations = {\n    annotations: [...horizontalAnnotations]\n  };\n  let aspectRatio = dim.width / dim.height;\n\n  const options = () => {\n    let max = Math.max(...values); //alert(max);\n\n    if (regiao == REGIOES.PORTUGAL) {\n      max = Math.max(...(toggleStats.stock === true ? vacinas_stock : values));\n    }\n\n    return {\n      aspectRatio,\n      layout: {\n        padding: -5\n      },\n      plugins: {\n        datalabels: {\n          display: false,\n          color: 'blue'\n        },\n        annotation: regiao == 'portugal' ? annotations : {},\n        legend: {\n          position: 'bottom',\n          align: 'end'\n        }\n      },\n      animation: {\n        duration: 1000\n      },\n      tooltips: {\n        mode: 'index',\n        intersect: false,\n        callbacks: {\n          label: (tooltipItem, data) => {\n            var label = data.datasets[tooltipItem.datasetIndex].label;\n            return label + ': ' + numberFormatter.format(parseInt(tooltipItem.value)).replace(',', ' ');\n          },\n          title: (tooltipItem, data) => {\n            return 'Dia ' + tooltipItem[0].label;\n          }\n        }\n      },\n      scales: {\n        y: {\n          position: 'right',\n          stacked: true,\n          display: true,\n          ticks: {\n            beginAtZero: true,\n            maxTicksLimit: window.innerWidth <= RESIZE_TRESHOLD ? 10 : 12,\n            minTicksLimit: window.innerWidth <= RESIZE_TRESHOLD ? 10 : 12,\n            callback: function (value, index, values) {\n              return formatNumber(value, false);\n            }\n          },\n          suggestedMax: max\n        },\n        axisy2: {\n          position: 'right',\n          display: false,\n          ticks: {\n            beginAtZero: true,\n            maxTicksLimit: window.innerWidth <= RESIZE_TRESHOLD ? 10 : 12,\n            minTicksLimit: window.innerWidth <= RESIZE_TRESHOLD ? 10 : 12,\n            callback: function (value, index, values) {\n              return formatNumber(value, false);\n            }\n          },\n          suggestedMax: max\n        },\n        x: {\n          ticks: {\n            beginAtZero: true,\n            maxTicksLimit: window.innerWidth <= RESIZE_TRESHOLD ? 90 : 120,\n            minTicksLimit: window.innerWidth <= RESIZE_TRESHOLD ? 90 : 120\n          }\n        }\n      }\n    };\n  };\n\n  useEffect(() => {\n    if (values.length && loading === true) {\n      statistics.getEstimativaStock().then(({\n        vaccines_stock_var\n      }) => {\n        setVacinas_stock(vaccines_stock_var);\n        setLoading(false);\n      });\n    }\n  }, [values]);\n  useEffect(() => {\n    window.addEventListener('resize', () => {\n      setDim(calculateDims());\n    });\n    return () => {\n      window.removeEventListener('resize', () => {\n        setDim(calculateDims());\n      });\n    };\n  }, []);\n  return /*#__PURE__*/_jsxs(Card, {\n    allowOverflow: true,\n    children: [regiao == REGIOES.PORTUGAL && /*#__PURE__*/_jsx(\"div\", {\n      className: [styles.card_sticky, styles.card_checkboxes, styles.card_scrollable].join(' '),\n      style: {\n        textAlign: 'left'\n      },\n      children: /*#__PURE__*/_jsx(CustomCheckbox, {\n        checked: toggleStats.stock,\n        label: 'Stock de Vacinas - Estimativa',\n        onChange: checked => {\n          setToggleStats(_objectSpread(_objectSpread({}, toggleStats), {}, {\n            stock: checked\n          }));\n        }\n      })\n    }), /*#__PURE__*/_jsx(\"div\", {\n      style: {\n        width: dim.width\n      },\n      children: !loading ? /*#__PURE__*/_jsx(Bar, {\n        ref: canvasRef,\n        options: options(),\n        data: data\n      }) : ''\n    })]\n  });\n}","map":null,"metadata":{},"sourceType":"module"}