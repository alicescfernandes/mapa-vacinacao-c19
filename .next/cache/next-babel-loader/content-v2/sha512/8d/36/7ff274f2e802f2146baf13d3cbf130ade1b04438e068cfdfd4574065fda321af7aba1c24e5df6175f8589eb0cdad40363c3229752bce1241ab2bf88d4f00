{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { createRef, useContext, useEffect, useState } from 'react';\nimport { Line, Chart } from 'react-chartjs-2';\nimport { Card } from './../Card';\nimport { formatNumber, hexToRgb, makeAnnotations, perHundred, calculateDims } from '../../utils';\nimport annotationPlugin from 'chartjs-plugin-annotation';\nimport datalabelsPlugin from 'chartjs-plugin-datalabels';\nimport acontecimentos from './../../data/acontecimentos.json';\nimport { CustomCheckbox } from './../CustomCheckbox';\nimport { REGIOES, RESIZE_TRESHOLD } from '../../constants';\nimport styles from './../Card.module.scss';\nimport { RegiaoContext } from '../context/regiao';\nChart.register([annotationPlugin, datalabelsPlugin]);\nexport function NumeroTotalVacinados({\n  colors,\n  statistics\n}) {\n  let regiao = useContext(RegiaoContext);\n  let {\n    labels\n  } = statistics.getDailyData();\n  let {\n    values,\n    valuesIn1,\n    valuesIn2\n  } = statistics.getVacinadosAcum();\n  let casesData = statistics.getCases();\n  let {\n    0: dim,\n    1: setDim\n  } = useState(calculateDims());\n  let {\n    0: toggleStats,\n    1: setToggleStats\n  } = useState({\n    imunidade: true,\n    primeira_fase: true,\n    segunda_fase: true,\n    infetados: true,\n    perHundred: false\n  });\n  let {\n    0: loading,\n    1: setLoading\n  } = useState(true);\n  let [foreground, color_1, color_2] = colors;\n  let commonProps = {\n    fill: true,\n    lineTension: 0.3,\n    lineBorder: 1,\n    borderWidth: 3,\n    borderJoinStyle: 'miter',\n    pointBorderWidth: 1,\n    pointHoverRadius: 3,\n    pointHoverBorderWidth: 2,\n    pointRadius: 1,\n    pointHitRadius: 10,\n    usePointStyle: true\n  };\n  let horizontalAnnotations = makeAnnotations(acontecimentos);\n  let annotations = {\n    annotations: [...horizontalAnnotations, {\n      type: 'line',\n      mode: 'horizontal',\n      scaleID: 'y',\n      value: toggleStats !== null && toggleStats !== void 0 && toggleStats.segunda_fase ? toggleStats.perHundred ? perHundred(2700000) : 2700000 : null,\n      borderColor: '#0A9DD1',\n      borderWidth: 2,\n      borderDash: [5, 5],\n      label: {\n        font: {\n          style: 'normal'\n        },\n        backgroundColor: 'rgba(0,0,0,0.0)',\n        textAlign: 'left',\n        color: '#0A9DD1',\n        position: 'end',\n        xAdjust: 10,\n        yAdjust: 10,\n        fontSize: '13px',\n        enabled: true,\n        content: '2ª Fase - Abril (2.7 milhões de pessoas, ver notas)'\n      }\n    }, {\n      type: 'line',\n      mode: 'horizontal',\n      scaleID: 'y',\n      value: toggleStats !== null && toggleStats !== void 0 && toggleStats.segunda_fase ? toggleStats.perHundred ? 20 : 1900000 : null,\n      borderColor: 'transparent',\n      label: {\n        font: {\n          style: 'normal'\n        },\n        enabled: false\n      }\n    }, {\n      type: 'line',\n      mode: 'horizontal',\n      scaleID: 'y',\n      value: toggleStats !== null && toggleStats !== void 0 && toggleStats.primeira_fase ? toggleStats.perHundred ? 11 : 1200000 : null,\n      borderColor: 'transparent',\n      label: {\n        font: {\n          style: 'normal'\n        },\n        enabled: false\n      }\n    }, {\n      type: 'line',\n      mode: 'horizontal',\n      scaleID: 'y',\n      value: toggleStats !== null && toggleStats !== void 0 && toggleStats.primeira_fase ? toggleStats.perHundred ? perHundred(950000) : 950000 : null,\n      borderColor: '#0A9DD1',\n      borderWidth: 2,\n      borderDash: [5, 5],\n      label: {\n        font: {\n          style: 'normal'\n        },\n        backgroundColor: 'rgba(0,0,0,0.0)',\n        textAlign: 'left',\n        color: '#0A9DD1',\n        position: 'end',\n        xAdjust: 5,\n        yAdjust: 10,\n        fontSize: '13px',\n        enabled: true,\n        content: '1ª Fase - Dezembro (950 mil pessoas)'\n      }\n    }, {\n      type: 'line',\n      mode: 'horizontal',\n      scaleID: 'y',\n      value: toggleStats !== null && toggleStats !== void 0 && toggleStats.imunidade ? toggleStats.perHundred ? perHundred(10286300 * 0.7) : 10286300 * 0.7 : null,\n      borderColor: '#D17615',\n      borderWidth: 2,\n      borderDash: [5, 5],\n      label: {\n        font: {\n          style: 'normal'\n        },\n        backgroundColor: 'rgba(0,0,0,0.0)',\n        textAlign: 'left',\n        color: '#D17615',\n        fontSize: '13px',\n        position: 'end',\n        xAdjust: 5,\n        yAdjust: 10,\n        enabled: true,\n        content: 'Imunidade de Grupo (cerca de 7.2 milhões de pessoas)'\n      }\n    }, {\n      type: 'line',\n      mode: 'horizontal',\n      scaleID: 'y',\n      borderColor: 'transparent',\n      label: {\n        font: {\n          style: 'normal'\n        },\n        enabled: false\n      }\n    }]\n  };\n  let chartRef = /*#__PURE__*/createRef();\n\n  const data = (canvas, cenas) => {\n    const ctx = canvas.getContext('2d');\n    const gradient = ctx.createLinearGradient(0, 0, 0, dim.height);\n    let {\n      r,\n      g,\n      b\n    } = hexToRgb(foreground);\n\n    try {\n      gradient.addColorStop(0, 'rgba(' + r + ',' + g + ',' + b + ',15%)');\n      gradient.addColorStop(1, 'rgba(' + r + ',' + g + ',' + b + ',0)');\n    } catch (e) {\n      gradient.addColorStop(0, '#d9f3ef');\n      gradient.addColorStop(1, '#ffffff');\n    }\n\n    canvas.parentNode.parentNode.scrollLeft = dim.width;\n    window.addEventListener('resize', () => {\n      setDim(calculateDims());\n    });\n    const chartData = {\n      labels: labels,\n      datasets: [_objectSpread(_objectSpread({}, commonProps), {}, {\n        label: 'Total vacinas administradas',\n        backgroundColor: gradient,\n        borderColor: foreground,\n        pointBorderColor: foreground,\n        pointBackgroundColor: foreground,\n        pointHoverBackgroundColor: foreground,\n        pointHoverBorderColor: foreground,\n        data: toggleStats.perHundred ? values.map(el => perHundred(el)) : values\n      }), _objectSpread(_objectSpread({}, commonProps), {}, {\n        label: 'Total de vacinas administradas - 1ª Dose',\n        fill: false,\n        borderColor: color_1,\n        pointBorderColor: color_1,\n        pointBackgroundColor: color_1,\n        pointHoverBackgroundColor: color_1,\n        pointHoverBorderColor: color_1,\n        data: toggleStats.perHundred ? valuesIn1.map(el => perHundred(el)) : valuesIn1\n      }), _objectSpread(_objectSpread({}, commonProps), {}, {\n        label: 'Total de vacinas administradas - 2ª Dose',\n        fill: false,\n        borderColor: color_2,\n        pointBorderColor: color_2,\n        pointBackgroundColor: color_2,\n        pointHoverBackgroundColor: color_2,\n        pointHoverBorderColor: color_2,\n        data: toggleStats.perHundred ? valuesIn2.map(el => perHundred(el)) : valuesIn2\n      })]\n    };\n\n    if (regiao == REGIOES.PORTUGAL) {\n      chartData.datasets.push(_objectSpread(_objectSpread({}, commonProps), {}, {\n        label: 'Casos Confirmados',\n        backgroundColor: '#D11541',\n        borderColor: '#D11541',\n        fill: false,\n        pointBorderColor: '#D11541',\n        pointBackgroundColor: '#D11541',\n        pointHoverBackgroundColor: '#D11541',\n        pointHoverBorderColor: '#D11541',\n        hidden: toggleStats.infetados === false,\n        data: casesData.filter(el => el.data >= 1609070400000).map(el => toggleStats.perHundred ? perHundred(el.confirmados) : el.confirmados)\n      }));\n    }\n\n    console.log(casesData);\n    return chartData;\n  };\n\n  let aspectRatio = dim.width / dim.height;\n\n  const options = () => {\n    return {\n      aspectRatio,\n      plugins: {\n        datalabels: {\n          display: false\n        },\n        annotation: regiao == 'portugal' ? annotations : {},\n        legend: {\n          position: 'bottom',\n          align: 'end'\n        }\n      },\n      animation: {\n        duration: 1000\n      },\n      tooltips: {\n        mode: 'index',\n        intersect: false,\n        callbacks: {\n          label: (tooltipItem, data) => {\n            var label = data.datasets[tooltipItem.datasetIndex].label;\n            return label + ': ' + formatNumber(tooltipItem.value);\n          },\n          title: (tooltipItem, data) => {\n            return 'Dia ' + tooltipItem[0].label;\n          }\n        }\n      },\n      scales: {\n        y: {\n          position: 'right',\n          ticks: {\n            beginAtZero: false,\n            maxTicksLimit: window.innerWidth <= RESIZE_TRESHOLD ? 10 : 12,\n            minTicksLimit: window.innerWidth <= RESIZE_TRESHOLD ? 10 : 12,\n            //max: 10000000,\n            callback: value => formatNumber(value, false)\n          }\n        },\n        x: {\n          ticks: {\n            maxTicksLimit: window.innerWidth <= RESIZE_TRESHOLD ? 90 : 120,\n            minTicksLimit: window.innerWidth <= RESIZE_TRESHOLD ? 90 : 120\n          }\n        }\n      }\n    };\n  };\n\n  useEffect(() => {\n    if (values.length > 0) {\n      setLoading(false);\n    }\n  }, [values]);\n  return /*#__PURE__*/_jsxs(Card, {\n    allowOverflow: true,\n    children: [regiao === 'portugal' && /*#__PURE__*/_jsxs(\"div\", {\n      className: [styles.card_sticky, styles.card_checkboxes, styles.card_scrollable].join(' '),\n      style: {\n        textAlign: 'left'\n      },\n      children: [/*#__PURE__*/_jsx(CustomCheckbox, {\n        checked: toggleStats.primeira_fase,\n        label: '1ª Fase',\n        onChange: checked => {\n          setToggleStats(_objectSpread(_objectSpread({}, toggleStats), {}, {\n            primeira_fase: checked\n          }));\n        }\n      }), /*#__PURE__*/_jsx(CustomCheckbox, {\n        checked: toggleStats.primeira_fase,\n        label: '2ª Fase',\n        onChange: checked => {\n          setToggleStats(_objectSpread(_objectSpread({}, toggleStats), {}, {\n            segunda_fase: checked\n          }));\n        }\n      }), /*#__PURE__*/_jsx(CustomCheckbox, {\n        checked: toggleStats.imunidade,\n        label: 'Imunidade de Grupo',\n        onChange: checked => {\n          setToggleStats(_objectSpread(_objectSpread({}, toggleStats), {}, {\n            imunidade: checked\n          }));\n        }\n      }), /*#__PURE__*/_jsx(CustomCheckbox, {\n        checked: toggleStats.infetados,\n        label: 'Casos Confirmados',\n        onChange: checked => {\n          setToggleStats(_objectSpread(_objectSpread({}, toggleStats), {}, {\n            infetados: checked\n          }));\n        }\n      })]\n    }), /*#__PURE__*/_jsx(\"div\", {\n      style: {\n        width: dim.width\n      },\n      children: !loading ? /*#__PURE__*/_jsx(Line, {\n        plugins: [annotationPlugin],\n        ref: chartRef,\n        options: options(),\n        data: data\n      }) : ''\n    })]\n  });\n}","map":null,"metadata":{},"sourceType":"module"}