{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nrequire('dotenv').config({\n  path: './../.env'\n});\n\nconst admin = require('firebase-admin');\n\nexport class FirebaseConnector {\n  constructor() {\n    _defineProperty(this, \"initialized\", false);\n\n    _defineProperty(this, \"fcm\", null);\n\n    if (!admin.apps.length) {\n      admin.initializeApp({\n        credential: admin.credential.cert({\n          project_id: process.env.FIREBASE_project_id,\n          private_key_id: process.env.FIREBASE_private_key_id,\n          private_key: process.env.FIREBASE_private_key.replace(/\\\\n/g, '\\n'),\n          client_email: process.env.FIREBASE_client_email,\n          client_id: process.env.FIREBASE_client_id\n        })\n      });\n    }\n\n    this.initialized = true;\n    this.fcm = admin.messaging();\n  }\n\n  registerDevice(token) {\n    console.log('cenas', token);\n    return this.fcm.subscribeToTopic([token], 'covid19');\n    /* .then(function (response) {\n    \t\tconsole.log('Successfully subscribed to topic:', response);\n    \t})\n    \t.catch(function (error) {\n    \t\tconsole.log('Error subscribing to topic:', error);\n    \t}); */\n  }\n\n  unregisterDevice(token) {\n    return this.fcm.unsubscribeToTopic([token], 'covid19');\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}