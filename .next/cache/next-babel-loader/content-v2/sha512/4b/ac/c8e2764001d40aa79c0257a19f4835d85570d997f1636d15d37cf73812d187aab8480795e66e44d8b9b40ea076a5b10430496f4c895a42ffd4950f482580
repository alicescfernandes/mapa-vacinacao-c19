{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useEffect, useState } from 'react';\nimport { Col, Row } from 'react-bootstrap';\nimport { Bar } from 'react-chartjs-2';\nimport { RESIZE_TRESHOLD } from '../../constants';\nimport { formatNumber } from '../../utils';\nimport { Card } from '../Card';\nimport cardStyles from './../Card.module.scss';\nimport classNames from 'classnames';\n\nfunction getColor(d) {\n  if (d >= 80) {\n    return '#01ae97';\n  }\n\n  if (d >= 60) {\n    return '#4dc6b6';\n  }\n\n  if (d >= 40) {\n    return '#80d7cb';\n  }\n\n  if (d >= 20) {\n    return '#b3e7e0';\n  }\n\n  if (d >= 0) {\n    return '#e6f7f5';\n  }\n}\n\nexport function ArsMapa({\n  statistics,\n  colors\n}) {\n  let {\n    0: loaded,\n    1: setLoaded\n  } = useState(false);\n  let {\n    main,\n    shades,\n    tints\n  } = colors;\n  const {\n    0: snsData,\n    1: setSNSData\n  } = useState({});\n  const {\n    0: mapLayers,\n    1: setMapLayers\n  } = useState(0);\n  const {\n    0: options,\n    1: setOptions\n  } = useState({\n    current_dose: 1\n  });\n  let layers2 = [];\n  let graphData = {\n    'ARS Alentejo': {},\n    'ARS Algarve': {},\n    'ARS Centro': {},\n    'ARS Norte': {},\n    'ARS Lisboa e Vale do Tejo': {}\n  };\n\n  if (loaded) {\n    //map the data\n    for (let key in graphData) {\n      let obj1 = Object.assign(graphData[key], snsData.filter(el => el.REGION.replace('RA ', '') == key)[0]); //let obj2 = ars[key];\n\n      if (key in graphData) {\n        graphData[key] = _objectSpread({}, obj1);\n      }\n    }\n  }\n\n  const grades = [0, 20, 40, 60, 80];\n  const grades_pretty = {\n    0: '0% a 19%',\n    20: '20% a 39%',\n    40: '40% a 59%',\n    60: '60% a 89%',\n    80: '80% a 100%'\n  };\n\n  function layerStyle(feature) {\n    let ars = feature.properties.ARS;\n    let data = graphData[ars];\n    let percentagem = parseFloat(data.COVER_1_VAC.replace(',', '.')) * 100; //(data.dose_2 / populacao_residente_ram[feature.properties.Dico].valor) * 100;\n\n    if (options.current_dose === 2) {\n      percentagem = parseFloat(data.COVER.replace(',', '.')) * 100; //(data.dose_2 / populacao_residente_ram[feature.properties.Dico].valor) * 100;\n    }\n\n    layers2.push(feature);\n    return {\n      fillOpacity: 1,\n      fillColor: getColor(percentagem),\n      lineJoin: 'round',\n      stroke: true,\n      weight: 2,\n      color: '#018b79'\n    };\n  }\n\n  const renderMap = async map => {\n    const arsGeo = await fetch('/ars.geojson').then(r => r.json());\n    const arsMapa = L.map('mapaars', {\n      zoomSnap: 0.1,\n      doubleClickZoom: false,\n      closePopupOnClick: false,\n      dragging: false,\n      zoomSnap: false,\n      zoomDelta: false,\n      trackResize: false,\n      touchZoom: false,\n      scrollWheelZoom: false,\n      zoomControl: false,\n      draggable: false\n    });\n    arsMapa.dragging.disable();\n    let layers = L.geoJSON(arsGeo, {\n      onEachFeature: (feature, shape) => {\n        let ars = feature.properties.ARS;\n        let data = graphData[ars];\n        let percentagem_1 = parseFloat(data.COVER_1_VAC.replace(',', '.')) * 100; //(data.dose_1 / populacao_residente_ram[feature.properties.Dico].valor) * 100;\n\n        let percentagem_2 = parseFloat(data.COVER.replace(',', '.')) * 100; //(data.dose_2 / populacao_residente_ram[feature.properties.Dico].valor) * 100;\n\n        shape.bindPopup(`<p>\n\t\t\t\t\t\t<strong>${feature.properties.Nome_Alternativo}</strong>\n\t\t\t\t\t\t<br>1ª Dose: ${formatNumber(400)} (${percentagem_1.toFixed(2)}%)\n\t\t\t\t\t\t</br>2ª Dose: ${formatNumber(200)} (${percentagem_2.toFixed(2)}%)\n\t\t\t\t\t</p>`);\n        shape.on('click', () => {//console.log('click');\n        });\n      },\n      style: layerStyle\n    }).addTo(arsMapa); //Create legend\n\n    setMapLayers(layers);\n    arsMapa.fitBounds(layers.getBounds());\n    arsMapa.setZoom(6.5);\n    var legend = L.control({\n      position: 'bottomleft'\n    });\n\n    legend.onAdd = function (map) {\n      var div = L.DomUtil.create('div', 'info legend');\n\n      for (var i = 0; i < grades.length; i++) {\n        let grade = grades[i];\n        let grade_pretty = grades_pretty[grade];\n        div.innerHTML += `<p>\n\t\t\t\t\t\t<i style=\"background:${getColor(grades[i] + 1)}\"></i>${grade_pretty}</p>`;\n      }\n\n      return div;\n    };\n\n    legend.addTo(arsMapa);\n  };\n\n  function renderGraph(el) {\n    const data = (canvas, cenas) => {\n      /* \tif (window.innerWidth <= RESIZE_TRESHOLD) {\n      \tcanvas.parentNode.style.width = RESIZE_TRESHOLD + 'px';\n      } else {\n      \tcanvas.parentNode.style.width = '100%';\n      } */\n\n      /* \twindow.addEventListener('resize', () => {\n      \tif (window.innerWidth <= RESIZE_TRESHOLD) {\n      \t\tcanvas.parentNode.style.width = RESIZE_TRESHOLD + 'px';\n      \t} else {\n      \t\tcanvas.parentNode.style.width = '100%';\n      \t}\n      });\n      */\n      const chartData = {\n        labels: [''],\n        datasets: [{\n          label: 'Total de vacinas administradas - 1ª Dose',\n          borderColor: main,\n          backgroundColor: main,\n          stack: 'stack0',\n          order: 2,\n          data: [el.CUMUL_VAC_1]\n        }, {\n          label: 'Total de vacinas administradas - 2ª Dose',\n          borderColor: shades[1],\n          backgroundColor: shades[1],\n          data: [el.CUMUL_VAC_2],\n          stack: 'stack0',\n          order: 1\n        }]\n      };\n      return chartData;\n    };\n\n    const options = () => {\n      let populacao_residente = Math.floor(el.CUMUL_VAC_2 / parseFloat(el.COVER.replace(',', '.'))) || 100000;\n      return {\n        indexAxis: 'y',\n        plugins: {\n          datalabels: {\n            display: false\n          },\n          legend: {\n            position: 'bottom',\n            align: 'start',\n            display: false\n          }\n        },\n        layout: {\n          padding: {\n            left: -12\n          }\n        },\n        animation: {\n          duration: 1000\n        },\n        tooltips: {\n          mode: 'index',\n          intersect: false,\n          callbacks: {\n            title: (tooltipItem, data) => {\n              return '';\n            }\n          }\n        },\n        scales: {\n          y: {\n            ticks: {\n              beginAtZero: true\n            },\n            max: populacao_residente\n          },\n          x: {\n            ticks: {\n              beginAtZero: true,\n              stepSize: Math.round(window.innerWidth <= RESIZE_TRESHOLD ? populacao_residente / 3 : populacao_residente / 6),\n              callback: value => formatNumber(value, false)\n            },\n            max: populacao_residente\n          }\n        }\n      };\n    };\n\n    return /*#__PURE__*/_jsx(Col, {\n      xs: 12,\n      lg: 6,\n      children: /*#__PURE__*/_jsxs(\"div\", {\n        className: cardStyles.ram_subchart_bar,\n        children: [/*#__PURE__*/_jsx(\"h2\", {\n          className: cardStyles.text_left,\n          children: el.REGION\n        }), /*#__PURE__*/_jsx(Bar, {\n          height: window.innerWidth <= RESIZE_TRESHOLD ? 40 : 55,\n          options: options(),\n          data: data\n        })]\n      })\n    });\n  }\n\n  useEffect(async () => {\n    if (loaded === false) {\n      setSNSData(await statistics.getTotalSNS());\n      setLoaded(true);\n    }\n\n    if (loaded === true) {\n      renderMap();\n    }\n  }, [loaded]);\n  useEffect(() => {\n    if (mapLayers) mapLayers.setStyle(layerStyle);\n  }, [options.current_dose]);\n  return loaded === true ? /*#__PURE__*/_jsxs(Card, {\n    children: [/*#__PURE__*/_jsx(Row, {\n      children: /*#__PURE__*/_jsx(\"div\", {\n        className: 'toggle_buttons hide_mobile',\n        children: /*#__PURE__*/_jsxs(\"p\", {\n          children: [/*#__PURE__*/_jsx(\"button\", {\n            className: classNames('toggle_button', {\n              active: options.current_dose === 1\n            }),\n            onClick: () => {\n              setOptions({\n                current_dose: 1\n              });\n            },\n            children: \"1\\xAA Dose\"\n          }), /*#__PURE__*/_jsx(\"button\", {\n            className: classNames('toggle_button', {\n              active: options.current_dose === 2\n            }),\n            onClick: () => {\n              setOptions({\n                current_dose: 2\n              });\n            },\n            children: \"2\\xAA Dose\"\n          })]\n        })\n      })\n    }), /*#__PURE__*/_jsxs(Row, {\n      children: [/*#__PURE__*/_jsx(Col, {\n        xs: 0,\n        lg: 4,\n        className: 'hide_mobile',\n        children: /*#__PURE__*/_jsx(\"div\", {\n          id: \"mapaars\",\n          style: {\n            height: '500px'\n          }\n        })\n      }), /*#__PURE__*/_jsxs(Col, {\n        xs: 12,\n        lg: 8,\n        children: [/*#__PURE__*/_jsx(\"div\", {\n          className: 'legends',\n          style: {\n            paddingLeft: '10px'\n          },\n          children: /*#__PURE__*/_jsxs(\"p\", {\n            children: [/*#__PURE__*/_jsxs(\"span\", {\n              className: 'legend',\n              children: [/*#__PURE__*/_jsx(\"span\", {\n                style: {\n                  backgroundColor: main\n                },\n                className: 'color_sample'\n              }), \"1\\xAA Dose\"]\n            }), /*#__PURE__*/_jsxs(\"span\", {\n              className: 'legend',\n              children: [/*#__PURE__*/_jsx(\"span\", {\n                style: {\n                  backgroundColor: shades[1]\n                },\n                className: 'color_sample'\n              }), \"2\\xAA Dose\"]\n            })]\n          })\n        }), /*#__PURE__*/_jsx(Row, {\n          children: Object.values(graphData).map(renderGraph)\n        })]\n      })]\n    })]\n  }) : '';\n} //<Row>{renderGraph(graphData.concelhos.ribeira_brava)}</Row>","map":null,"metadata":{},"sourceType":"module"}