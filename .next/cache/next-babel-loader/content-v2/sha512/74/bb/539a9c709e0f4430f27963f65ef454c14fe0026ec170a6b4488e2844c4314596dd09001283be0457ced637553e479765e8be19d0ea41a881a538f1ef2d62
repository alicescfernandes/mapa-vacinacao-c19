{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useEffect, useRef, useState } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport { lineChartCommon, lineChartCommon2, RESIZE_TRESHOLD } from '../../constants';\nimport { hexToRgb } from '../../utils';\nimport { Card } from './../Card';\nimport classNames from 'classnames';\nimport styles from './../Card.module.scss';\nexport function LineRt({\n  statistics,\n  colors,\n  regiao\n}) {\n  let {\n    0: loaded,\n    1: setLoaded\n  } = useState(false);\n  let {\n    main\n  } = colors;\n  let {\n    0: currentRegiao,\n    1: setCurrentRegiao\n  } = useState(regiao !== null && regiao !== void 0 ? regiao : 'continente');\n  let {\n    0: rtData,\n    1: setRtData\n  } = useState({});\n  const canvasRef = useRef(null);\n  useEffect(() => {\n    if (!loaded) return;\n    statistics.getRtRegiao(currentRegiao).then(data => setRtData(data));\n  }, [currentRegiao]);\n  useEffect(() => {\n    statistics.getRtRegiao(currentRegiao).then(data => {\n      setRtData(data);\n      setLoaded(true);\n    });\n  }, []);\n\n  const data = canvas => {\n    const ctx = canvas === null || canvas === void 0 ? void 0 : canvas.getContext('2d');\n    const gradient = ctx === null || ctx === void 0 ? void 0 : ctx.createLinearGradient(0, 0, 0, 400);\n    let color = '';\n    let {\n      r,\n      g,\n      b\n    } = hexToRgb(main);\n\n    try {\n      //See if supports transperancy\n      gradient.addColorStop(0, 'rgba(' + r + ',' + g + ',' + b + ',30%)');\n      color = 'rgba(' + r + ',' + g + ',' + b + ',30%)';\n    } catch (e) {\n      gradient.addColorStop(0, '#d9f3ef');\n      color = '#d9f3ef';\n    }\n\n    if (window.innerWidth <= RESIZE_TRESHOLD) {\n      canvas.parentNode.style.width = RESIZE_TRESHOLD + 'px';\n    } else {\n      canvas.parentNode.style.width = '100%';\n    }\n\n    window.addEventListener('resize', () => {\n      if (window.innerWidth <= RESIZE_TRESHOLD) {\n        canvas.parentNode.style.width = RESIZE_TRESHOLD + 'px';\n      } else {\n        canvas.parentNode.style.width = '100%';\n      }\n    });\n    return {\n      labels: rtData.labels,\n      datasets: [_objectSpread(_objectSpread({}, lineChartCommon2), {}, {\n        label: 'R(t) limite superior',\n        backgroundColor: color,\n        borderColor: 'transparent',\n        type: 'line',\n        fill: '2',\n        //fill until previous dataset\n        data: rtData.rt.map(el => el.limite_superior_IC95.toFixed(2)),\n        order: 1\n      }), _objectSpread(_objectSpread({}, lineChartCommon), {}, {\n        label: 'R(t)',\n        backgroundColor: main,\n        borderColor: main,\n        type: 'line',\n        fill: false,\n        data: rtData.rt.map(el => el.rt_numero_de_reproducao.toFixed(2)),\n        order: 2\n      }), _objectSpread(_objectSpread({}, lineChartCommon2), {}, {\n        label: 'R(t) limite inferior',\n        backgroundColor: 'white',\n        borderColor: 'transparent',\n        type: 'line',\n        fill: false,\n        data: rtData.rt.map(el => el.limite_inferior_IC95.toFixed(2)),\n        order: 3\n      })\n      /* \t{\n      \t...lineChartCommon,\n      \tfill: false,\n      \tborderColor: complements[1],\n      \tlabel: 'Casos Confirmados',\n      \tbackgroundColor: complements[1],\n      \tpointBorderColor: complements[1],\n      \tpointBackgroundColor: complements[1],\n      \tpointHoverBackgroundColor: complements[1],\n      \tpointHoverBorderColor: complements[1],\n      \tdata: casesData.filter((el) => el.Data >= 1609070400000).map((el) => el.ConfirmadosNovos),\n      \torder: 4,\n      }, */\n\n      /* {\n      \t...lineChartCommon,\n      \tfill: false,\n      \tborderColor: complements[2],\n      \tlabel: 'Totalmente inoculados',\n      \tbackgroundColor: complements[2],\n      \tpointBorderColor: complements[2],\n      \tpointBackgroundColor: complements[2],\n      \tpointHoverBackgroundColor: complements[2],\n      \tpointHoverBorderColor: complements[2],\n      \tdata: valuesIn2,\n      \torder: -1,\n      }, */\n      ]\n    };\n  };\n\n  const options = () => {\n    let max = parseInt(Math.max(...rtData.rt.map(el => el.limite_superior_IC95.toFixed(2))) + 1);\n    return {\n      plugins: {\n        datalabels: {\n          display: false\n        },\n        legend: {\n          position: 'bottom',\n          align: 'start',\n          labels: {\n            filter: function (item, chart) {\n              return !item.text.match('limite');\n            }\n          }\n        },\n        annotation: {\n          annotations: [{\n            type: 'line',\n            mode: 'horizontal',\n            scaleID: 'y',\n            value: 1,\n            borderColor: '#0A9DD1',\n            borderWidth: 2,\n            borderDash: [5, 5],\n            label: {\n              backgroundColor: 'rgba(0,0,0,0.0)',\n              drawTime: 'beforeDatasetsDraw',\n              font: {\n                style: 'normal'\n              },\n              textAlign: 'left',\n              color: '#0A9DD1',\n              position: 'end',\n              xAdjust: 10,\n              yAdjust: -10,\n              enabled: true,\n              content: 'R(t) = 1'\n            }\n          }]\n        }\n      },\n      animation: {\n        duration: 1000\n      },\n      tooltips: {\n        mode: 'index',\n        intersect: true,\n        callbacks: {\n          title: (tooltipItem, data) => {\n            return 'Dia ' + tooltipItem[0].label;\n          }\n        }\n      },\n      scales: {\n        y: {\n          type: 'linear',\n          ticks: {\n            beginAtZero: true,\n            maxTicksLimit: window.innerWidth <= RESIZE_TRESHOLD ? 8 : 10,\n            minTicksLimit: window.innerWidth <= RESIZE_TRESHOLD ? 8 : 10,\n            stepSize: max / 4\n          },\n          max: max\n        },\n        x: {\n          ticks: {\n            maxTicksLimit: 30,\n            minTicksLimit: 30\n          }\n        }\n      }\n    };\n  };\n\n  return /*#__PURE__*/_jsxs(Card, {\n    textLeft: true,\n    allowOverflow: true,\n    children: [/*#__PURE__*/_jsx(\"div\", {\n      className: [styles.card_scrollable].join(' '),\n      children: regiao === undefined ? /*#__PURE__*/_jsx(\"div\", {\n        className: 'toggle_buttons',\n        children: /*#__PURE__*/_jsxs(\"p\", {\n          children: [/*#__PURE__*/_jsx(\"button\", {\n            className: classNames('toggle_button', {\n              active: currentRegiao === 'continente'\n            }),\n            onClick: () => {\n              setCurrentRegiao('continente');\n            },\n            children: \"Continente\"\n          }), /*#__PURE__*/_jsx(\"button\", {\n            className: classNames('toggle_button', {\n              active: currentRegiao === 'nacional'\n            }),\n            onClick: () => {\n              setCurrentRegiao('nacional');\n            },\n            children: \"Nacional\"\n          }), /*#__PURE__*/_jsx(\"button\", {\n            className: classNames('toggle_button', {\n              active: currentRegiao === 'lvt'\n            }),\n            onClick: () => {\n              setCurrentRegiao('lvt');\n            },\n            children: \"Lisboa e Vale do Tejo\"\n          }), /*#__PURE__*/_jsx(\"button\", {\n            className: classNames('toggle_button', {\n              active: currentRegiao === 'algarve'\n            }),\n            onClick: () => {\n              setCurrentRegiao('algarve');\n            },\n            children: \"Algarve\"\n          }), /*#__PURE__*/_jsx(\"button\", {\n            className: classNames('toggle_button', {\n              active: currentRegiao === 'alentejo'\n            }),\n            onClick: () => {\n              setCurrentRegiao('alentejo');\n            },\n            children: \"Alentejo\"\n          }), /*#__PURE__*/_jsx(\"button\", {\n            className: classNames('toggle_button', {\n              active: currentRegiao === 'centro'\n            }),\n            onClick: () => {\n              setCurrentRegiao('centro');\n            },\n            children: \"Centro\"\n          }), /*#__PURE__*/_jsx(\"button\", {\n            className: classNames('toggle_button', {\n              active: currentRegiao === 'norte'\n            }),\n            onClick: () => {\n              setCurrentRegiao('norte');\n            },\n            children: \"Norte\"\n          })]\n        })\n      }) : /*#__PURE__*/_jsx(_Fragment, {})\n    }), /*#__PURE__*/_jsx(\"div\", {\n      children: loaded ? /*#__PURE__*/_jsx(Line, {\n        height: 80,\n        ref: canvasRef,\n        options: options(),\n        data: data\n      }) : ''\n    })]\n  });\n}","map":null,"metadata":{},"sourceType":"module"}