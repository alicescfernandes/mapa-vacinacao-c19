{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useEffect, useRef, useState } from 'react';\nimport { Bar } from 'react-chartjs-2';\nimport { RESIZE_TRESHOLD } from '../../constants';\nimport { formatNumber } from '../../utils';\nimport { Card } from './../Card';\nexport function VacinadosPorDia({\n  statistics,\n  colors\n}) {\n  let {\n    0: loading,\n    1: setLoading\n  } = useState(true);\n  let {\n    values,\n    labels,\n    valuesIn1,\n    valuesIn2\n  } = statistics.getDiariosInoculacoes();\n  let {\n    values: values2\n  } = statistics.getMediaMovelDiaria(7);\n  let {\n    0: vacinas_stock,\n    1: setVacinas_stock\n  } = useState([]);\n  let {\n    main,\n    tints,\n    shades,\n    complements\n  } = colors;\n  const canvasRef = useRef(null);\n\n  const data = canvas => {\n    if (window.innerWidth <= RESIZE_TRESHOLD) {\n      canvas.parentNode.style.width = RESIZE_TRESHOLD + 'px';\n    } else {\n      canvas.parentNode.style.width = '100%';\n    }\n\n    window.addEventListener('resize', () => {\n      if (window.innerWidth <= RESIZE_TRESHOLD) {\n        canvas.parentNode.style.width = RESIZE_TRESHOLD + 'px';\n      } else {\n        canvas.parentNode.style.width = '100%';\n      }\n    });\n    return {\n      labels: labels,\n      datasets: [\n      /* \t{\n      \tlabel: 'Stock de Vacinas - Estimativa',\n      \tfill: false,\n      \tlineTension: 0.5,\n      \toverlayBars: false,\n      \ttype: 'line',\n      \tlineBorder: 1,\n      \tborderWidth: 3,\n      \tborderColor: complements[2],\n      \tborderJoinStyle: 'miter',\n      \tpointBorderColor: complements[2],\n      \tpointBackgroundColor: complements[2],\n      \tpointBorderWidth: 1,\n      \tpointHoverRadius: 3,\n      \tpointHoverBorderWidth: 2,\n      \tpointRadius: 1,\n      \tpointHitRadius: 3,\n      \tdata: vacinas_stock,\n      \torder: 1,\n      \tyAxisID: 'total',\n      }, */\n      {\n        label: 'Vacinas diárias - Média movel de 7 dias',\n        fill: false,\n        lineTension: 0.5,\n        overlayBars: true,\n        type: 'line',\n        lineBorder: 1,\n        borderWidth: 3,\n        borderColor: complements[1],\n        borderJoinStyle: 'miter',\n        pointBorderColor: complements[1],\n        pointBackgroundColor: complements[1],\n        pointBorderWidth: 1,\n        pointHoverRadius: 3,\n        pointHoverBorderWidth: 2,\n        pointRadius: 1,\n        pointHitRadius: 3,\n        data: values2,\n        order: 2\n      }, {\n        label: 'Inoculação - 2ª Dose',\n        fill: false,\n        type: 'bar',\n        overlayBars: true,\n        backgroundColor: tints[0],\n        data: valuesIn2,\n        order: 3,\n        display: false,\n        stack: 'stack0'\n      }, {\n        label: 'Inoculação - 1ª Dose',\n        backgroundColor: shades[0],\n        borderColor: shades[0],\n        data: valuesIn1,\n        overlayBars: true,\n        order: 4,\n        stack: 'stack0'\n      }, {\n        label: 'Vacinas Totais',\n        type: 'bar',\n        overlayBars: true,\n        fill: false,\n        borderColor: main,\n        backgroundColor: 'transparent',\n        data: values,\n        borderWidth: 2,\n        order: 5,\n        yAxisID: 'total',\n        stack: 'stack0'\n      }]\n    };\n  };\n\n  let numberFormatter = new Intl.NumberFormat();\n\n  const options = () => {\n    return {\n      layout: {\n        padding: -5\n      },\n      plugins: {\n        datalabels: {\n          display: false,\n          color: 'blue'\n        }\n      },\n      legend: {\n        position: 'bottom',\n        align: 'start'\n      },\n      animation: {\n        duration: 1000\n      },\n      tooltips: {\n        mode: 'index',\n        intersect: false,\n        callbacks: {\n          label: (tooltipItem, data) => {\n            var label = data.datasets[tooltipItem.datasetIndex].label;\n            return label + ': ' + numberFormatter.format(parseInt(tooltipItem.value)).replace(',', ' ');\n          },\n          title: (tooltipItem, data) => {\n            return 'Dia ' + tooltipItem[0].label;\n          }\n        }\n      },\n      scales: {\n        yAxes: [{\n          stacked: true,\n          ticks: {\n            beginAtZero: false,\n            maxTicksLimit: window.innerWidth <= RESIZE_TRESHOLD ? 8 : 10,\n            minTicksLimit: window.innerWidth <= RESIZE_TRESHOLD ? 8 : 10,\n            callback: function (value, index, values) {\n              return formatNumber(value, false);\n            } //max: 900_000,\n\n          }\n        }, {\n          stacked: true,\n          id: 'total',\n          display: false,\n          ticks: {//max: 900_000,\n          }\n        }],\n        xAxes: [{\n          stacked: true,\n          ticks: {\n            beginAtZero: true,\n            maxTicksLimit: window.innerWidth <= RESIZE_TRESHOLD ? 30 : 60,\n            minTicksLimit: window.innerWidth <= RESIZE_TRESHOLD ? 30 : 60\n          }\n        }]\n      }\n    };\n  };\n\n  useEffect(() => {\n    if (values.length && loading === true) {\n      statistics.getEstimativaStock().then(({\n        vaccines_stock_var\n      }) => {\n        setVacinas_stock(vaccines_stock_var);\n        setLoading(false);\n      });\n    }\n  }, [values]);\n  return /*#__PURE__*/_jsx(Card, {\n    allowOverflow: true,\n    children: /*#__PURE__*/_jsx(\"div\", {\n      children: !loading ? /*#__PURE__*/_jsx(Bar, {\n        height: 80,\n        ref: canvasRef,\n        options: options(),\n        data: data\n      }) : ''\n    })\n  });\n}","map":null,"metadata":{},"sourceType":"module"}