{"ast":null,"code":"\"use strict\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nexports.__esModule = true;\nexports.detectDomainLocale = detectDomainLocale;\n\nfunction detectDomainLocale(domainItems, hostname, detectedLocale) {\n  var domainItem;\n\n  if (domainItems) {\n    if (detectedLocale) {\n      detectedLocale = detectedLocale.toLowerCase();\n    }\n\n    var _iterator = _createForOfIteratorHelper(domainItems),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var item = _step.value;\n\n        var _item$domain, _item$locales; // remove port if present\n\n\n        var domainHostname = (_item$domain = item.domain) == null ? void 0 : _item$domain.split(':')[0].toLowerCase();\n\n        if (hostname === domainHostname || detectedLocale === item.defaultLocale.toLowerCase() || (_item$locales = item.locales) != null && _item$locales.some(function (locale) {\n          return locale.toLowerCase() === detectedLocale;\n        })) {\n          domainItem = item;\n          break;\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  }\n\n  return domainItem;\n}","map":{"version":3,"sources":["../../../../next-server/lib/i18n/detect-domain-locale.ts"],"names":["detectedLocale","domainHostname","item","hostname","locale","domainItem"],"mappings":";;;;;;;;;;;AAAO,SAAA,kBAAA,CAAA,WAAA,EAAA,QAAA,EAAA,cAAA,EAWL;AACA,MAAA,UAAA;;AASA,MAAA,WAAA,EAAiB;AACf,QAAA,cAAA,EAAoB;AAClBA,MAAAA,cAAc,GAAGA,cAAc,CAA/BA,WAAiBA,EAAjBA;AAGF;;AALe,+CAKf,WALe;AAAA;;AAAA;AAKf,0DAAgC;AAAA,YAAhC,IAAgC;;AAAA,YAAA,YAAA,EAAA,aAAA,CAAA,CAC9B;;;AACA,YAAMC,cAAc,GAAA,CAAA,YAAA,GAAGC,IAAI,CAAP,MAAA,KAAA,IAAA,GAAA,KAAA,CAAA,GAAGA,YAAAA,CAAAA,KAAAA,CAAAA,GAAAA,EAAAA,CAAAA,EAAvB,WAAuBA,EAAvB;;AACA,YACEC,QAAQ,KAARA,cAAAA,IACAH,cAAc,KAAKE,IAAI,CAAJA,aAAAA,CADnBC,WACmBD,EADnBC,IAAAA,CAAAA,aAAAA,GAEAD,IAAI,CAFJC,OAAAA,KAAAA,IAAAA,IAEAD,aAAAA,CAAAA,IAAAA,CAAoBE,UAAAA,MAAD;AAAA,iBAAYA,MAAM,CAANA,WAAAA,OAHjC,cAGqB;AAAA,SAAnBF,CAHF,EAIE;AACAG,UAAAA,UAAU,GAAVA,IAAAA;AACA;AAEH;AACF;AAjBgB;AAAA;AAAA;AAAA;AAAA;AAmBjB;;AAAA,SAAA,UAAA;AACD","sourcesContent":["export function detectDomainLocale(\n  domainItems:\n    | Array<{\n        http?: boolean\n        domain: string\n        locales?: string[]\n        defaultLocale: string\n      }>\n    | undefined,\n  hostname?: string,\n  detectedLocale?: string\n) {\n  let domainItem:\n    | {\n        http?: boolean\n        domain: string\n        locales?: string[]\n        defaultLocale: string\n      }\n    | undefined\n\n  if (domainItems) {\n    if (detectedLocale) {\n      detectedLocale = detectedLocale.toLowerCase()\n    }\n\n    for (const item of domainItems) {\n      // remove port if present\n      const domainHostname = item.domain?.split(':')[0].toLowerCase()\n      if (\n        hostname === domainHostname ||\n        detectedLocale === item.defaultLocale.toLowerCase() ||\n        item.locales?.some((locale) => locale.toLowerCase() === detectedLocale)\n      ) {\n        domainItem = item\n        break\n      }\n    }\n  }\n\n  return domainItem\n}\n"]},"metadata":{},"sourceType":"script"}