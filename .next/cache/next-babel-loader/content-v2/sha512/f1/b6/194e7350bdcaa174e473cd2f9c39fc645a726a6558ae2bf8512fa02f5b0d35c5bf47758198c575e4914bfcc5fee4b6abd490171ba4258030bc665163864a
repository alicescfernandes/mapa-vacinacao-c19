{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport _defineProperty from \"/home/runner/work/mapa-vacinacao-c19/mapa-vacinacao-c19/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"/home/runner/work/mapa-vacinacao-c19/mapa-vacinacao-c19/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { createRef, useContext, useEffect, useState } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport { Card } from './../Card';\nimport { formatNumber, hexToRgb, perHundred } from '../../utils';\nimport 'chartjs-plugin-annotation';\nimport { CustomCheckbox } from './../CustomCheckbox';\nimport { REGIOES, RESIZE_TRESHOLD } from '../../constants';\nimport styles from './../Card.module.scss';\nimport { RegiaoContext } from '../context/regiao';\nexport function NumeroTotalVacinados(_ref) {\n  var colors = _ref.colors,\n      statistics = _ref.statistics;\n  var regiao = useContext(RegiaoContext);\n\n  var _useState = useState([1]),\n      vacinasStockVar = _useState[0],\n      vacinasStockVarUpdate = _useState[1];\n\n  var _statistics$getDailyD = statistics.getDailyData(),\n      labels = _statistics$getDailyD.labels;\n\n  var _statistics$getVacina = statistics.getVacinadosAcum(),\n      values = _statistics$getVacina.values,\n      valuesIn1 = _statistics$getVacina.valuesIn1,\n      valuesIn2 = _statistics$getVacina.valuesIn2;\n\n  var casesData = statistics.getCases();\n\n  var _useState2 = useState({\n    imunidade: false,\n    primeira_fase: true,\n    segunda_fase: true,\n    infetados: false,\n    perHundred: false\n  }),\n      toggleStats = _useState2[0],\n      setToggleStats = _useState2[1];\n\n  var _useState3 = useState(true),\n      loading = _useState3[0],\n      setLoading = _useState3[1];\n\n  var _useState4 = useState(400),\n      height = _useState4[0],\n      setHeight = _useState4[1];\n\n  var _colors = _slicedToArray(colors, 3),\n      foreground = _colors[0],\n      color_1 = _colors[1],\n      color_2 = _colors[2];\n\n  var commonProps = {\n    fill: true,\n    lineTension: 0.5,\n    lineBorder: 1,\n    borderWidth: 3,\n    borderJoinStyle: 'miter',\n    pointBorderWidth: 1,\n    pointHoverRadius: 3,\n    pointHoverBorderWidth: 2,\n    pointRadius: 1,\n    pointHitRadius: 10,\n    usePointStyle: true\n  };\n  var annotations = {\n    annotations: [{\n      type: 'line',\n      mode: 'horizontal',\n      scaleID: 'y-axis-0',\n      value: toggleStats !== null && toggleStats !== void 0 && toggleStats.segunda_fase ? toggleStats.perHundred ? perHundred(2700000) : 2700000 : null,\n      borderColor: '#0A9DD1',\n      borderWidth: 2,\n      borderDash: [5, 5],\n      label: {\n        backgroundColor: 'rgba(0,0,0,0.0)',\n        drawTime: 'afterDatasetsDraw',\n        textAlign: 'left',\n        fontColor: '#0A9DD1',\n        position: 'left',\n        xAdjust: 10,\n        yAdjust: -10,\n        fontSize: '13px',\n        enabled: true,\n        content: '2ª Fase - Abril (2.7 milhões de pessoas, ver notas)'\n      }\n    }, {\n      type: 'line',\n      mode: 'horizontal',\n      scaleID: 'y-axis-0',\n      value: toggleStats !== null && toggleStats !== void 0 && toggleStats.segunda_fase ? toggleStats.perHundred ? 20 : 1900000 : null,\n      borderColor: 'transparent',\n      label: {\n        enabled: false\n      }\n    }, {\n      type: 'line',\n      mode: 'horizontal',\n      scaleID: 'y-axis-0',\n      value: toggleStats !== null && toggleStats !== void 0 && toggleStats.primeira_fase ? toggleStats.perHundred ? 11 : 1200000 : null,\n      borderColor: 'transparent',\n      label: {\n        enabled: false\n      }\n    }, {\n      type: 'line',\n      mode: 'horizontal',\n      scaleID: 'y-axis-0',\n      value: toggleStats !== null && toggleStats !== void 0 && toggleStats.primeira_fase ? toggleStats.perHundred ? perHundred(950000) : 950000 : null,\n      borderColor: '#0A9DD1',\n      borderWidth: 2,\n      borderDash: [5, 5],\n      label: {\n        backgroundColor: 'rgba(0,0,0,0.0)',\n        drawTime: 'afterDatasetsDraw',\n        textAlign: 'left',\n        fontColor: '#0A9DD1',\n        position: 'left',\n        xAdjust: 5,\n        yAdjust: -10,\n        fontSize: '13px',\n        enabled: true,\n        content: '1ª Fase - Dezembro (950 mil pessoas)'\n      }\n    }, {\n      type: 'line',\n      mode: 'horizontal',\n      scaleID: 'y-axis-0',\n      value: toggleStats !== null && toggleStats !== void 0 && toggleStats.imunidade ? toggleStats.perHundred ? perHundred(10286300 * 0.7) : 10286300 * 0.7 : null,\n      borderColor: '#D17615',\n      borderWidth: 2,\n      borderDash: [5, 5],\n      label: {\n        backgroundColor: 'rgba(0,0,0,0.0)',\n        drawTime: 'afterDatasetsDraw',\n        textAlign: 'left',\n        fontColor: '#D17615',\n        fontSize: '13px',\n        position: 'left',\n        xAdjust: 5,\n        yAdjust: -10,\n        enabled: true,\n        content: 'Imunidade de Grupo (cerca de 7.2 milhões de pessoas)'\n      }\n    }, {\n      type: 'line',\n      mode: 'horizontal',\n      scaleID: 'y-axis-0',\n      value: toggleStats !== null && toggleStats !== void 0 && toggleStats.imunidade && toggleStats.perHundred ? 75 : null,\n      borderColor: 'transparent',\n      label: {\n        enabled: false\n      }\n    }]\n  };\n  var chartRef = /*#__PURE__*/createRef();\n\n  var data = function data(canvas, cenas) {\n    var ctx = canvas.getContext('2d');\n    var gradient = ctx.createLinearGradient(0, 0, 0, height);\n\n    var _hexToRgb = hexToRgb(foreground),\n        r = _hexToRgb.r,\n        g = _hexToRgb.g,\n        b = _hexToRgb.b;\n\n    try {\n      gradient.addColorStop(0, 'rgba(' + r + ',' + g + ',' + b + ',15%)');\n      gradient.addColorStop(1, 'rgba(' + r + ',' + g + ',' + b + ',0)');\n    } catch (e) {\n      gradient.addColorStop(0, '#d9f3ef');\n      gradient.addColorStop(1, '#ffffff');\n    }\n\n    if (window.innerWidth <= RESIZE_TRESHOLD) {\n      canvas.parentNode.style.width = RESIZE_TRESHOLD + 'px';\n    } else {\n      canvas.parentNode.style.width = '100%';\n    }\n\n    window.addEventListener('resize', function () {\n      if (window.innerWidth <= RESIZE_TRESHOLD) {\n        canvas.parentNode.style.width = RESIZE_TRESHOLD + 'px';\n      } else {\n        canvas.parentNode.style.width = '100%';\n      }\n    });\n    var chartData = {\n      labels: labels,\n      datasets: [_objectSpread(_objectSpread({}, commonProps), {}, {\n        label: 'Total vacinas administradas',\n        backgroundColor: gradient,\n        borderColor: foreground,\n        pointBorderColor: foreground,\n        pointBackgroundColor: foreground,\n        pointHoverBackgroundColor: foreground,\n        pointHoverBorderColor: foreground,\n        data: toggleStats.perHundred ? values.map(function (el) {\n          return perHundred(el);\n        }) : values\n      }), _objectSpread(_objectSpread({}, commonProps), {}, {\n        label: 'Total de vacinas administradas - 1ª Dose',\n        fill: false,\n        borderColor: color_1,\n        pointBorderColor: color_1,\n        pointBackgroundColor: color_1,\n        pointHoverBackgroundColor: color_1,\n        pointHoverBorderColor: color_1,\n        data: toggleStats.perHundred ? valuesIn1.map(function (el) {\n          return perHundred(el);\n        }) : valuesIn1\n      }), _objectSpread(_objectSpread({}, commonProps), {}, {\n        label: 'Total de vacinas administradas - 2ª Dose',\n        fill: false,\n        borderColor: color_2,\n        pointBorderColor: color_2,\n        pointBackgroundColor: color_2,\n        pointHoverBackgroundColor: color_2,\n        pointHoverBorderColor: color_2,\n        data: toggleStats.perHundred ? valuesIn2.map(function (el) {\n          return perHundred(el);\n        }) : valuesIn2\n      })]\n    };\n\n    if (regiao == REGIOES.PORTUGAL) {\n      chartData.datasets.push(_objectSpread(_objectSpread({}, commonProps), {}, {\n        label: 'Casos Confirmados',\n        backgroundColor: '#D11541',\n        borderColor: '#D11541',\n        fill: false,\n        pointBorderColor: '#D11541',\n        pointBackgroundColor: '#D11541',\n        pointHoverBackgroundColor: '#D11541',\n        pointHoverBorderColor: '#D11541',\n        hidden: toggleStats.infetados === false,\n        data: casesData.filter(function (el) {\n          return el.Data >= 1609070400000;\n        }).map(function (el) {\n          return toggleStats.perHundred ? perHundred(el.ConfirmadosAcumulado) : el.ConfirmadosAcumulado;\n        })\n      }));\n    }\n\n    return chartData;\n  };\n\n  var options = function options() {\n    return {\n      plugins: {\n        datalabels: {\n          display: false\n        }\n      },\n      legend: {\n        position: 'bottom',\n        align: 'start'\n      },\n      animation: {\n        duration: 1000\n      },\n      annotation: regiao == 'portugal' ? annotations : {},\n      tooltips: {\n        mode: 'index',\n        intersect: false,\n        callbacks: {\n          label: function label(tooltipItem, data) {\n            var label = data.datasets[tooltipItem.datasetIndex].label;\n            return label + ': ' + formatNumber(tooltipItem.value);\n          },\n          title: function title(tooltipItem, data) {\n            return 'Dia ' + tooltipItem[0].label;\n          }\n        }\n      },\n      scales: {\n        yAxes: [{\n          ticks: {\n            beginAtZero: false,\n            maxTicksLimit: window.innerWidth <= RESIZE_TRESHOLD ? 8 : 10,\n            minTicksLimit: window.innerWidth <= RESIZE_TRESHOLD ? 8 : 10,\n            //max: 10000000,\n            callback: function callback(value) {\n              return formatNumber(value, false);\n            }\n          }\n        }],\n        xAxes: [{\n          ticks: {\n            maxTicksLimit: window.innerWidth <= RESIZE_TRESHOLD ? 30 : 60,\n            minTicksLimit: window.innerWidth <= RESIZE_TRESHOLD ? 30 : 60\n          }\n        }]\n      }\n    };\n  };\n\n  useEffect(function () {\n    if (values.length > 0) {\n      setLoading(false);\n    }\n  }, [values]);\n  return /*#__PURE__*/_jsxs(Card, {\n    allowOverflow: true,\n    children: [regiao === 'portugal' && /*#__PURE__*/_jsxs(\"div\", {\n      className: [styles.card_checkboxes, styles.card_scrollable].join(' '),\n      style: {\n        textAlign: 'left'\n      },\n      children: [/*#__PURE__*/_jsx(CustomCheckbox, {\n        checked: toggleStats.primeira_fase,\n        label: '1ª Fase',\n        onChange: function onChange(checked) {\n          setToggleStats(_objectSpread(_objectSpread({}, toggleStats), {}, {\n            primeira_fase: checked\n          }));\n        }\n      }), /*#__PURE__*/_jsx(CustomCheckbox, {\n        checked: toggleStats.primeira_fase,\n        label: '2ª Fase',\n        onChange: function onChange(checked) {\n          setToggleStats(_objectSpread(_objectSpread({}, toggleStats), {}, {\n            segunda_fase: checked\n          }));\n        }\n      }), /*#__PURE__*/_jsx(CustomCheckbox, {\n        checked: toggleStats.imunidade,\n        label: 'Imunidade de Grupo',\n        onChange: function onChange(checked) {\n          setToggleStats(_objectSpread(_objectSpread({}, toggleStats), {}, {\n            imunidade: checked\n          }));\n        }\n      }), /*#__PURE__*/_jsx(CustomCheckbox, {\n        checked: toggleStats.infetados,\n        label: 'Casos Confirmados',\n        onChange: function onChange(checked) {\n          setToggleStats(_objectSpread(_objectSpread({}, toggleStats), {}, {\n            infetados: checked\n          }));\n        }\n      })]\n    }), /*#__PURE__*/_jsxs(\"div\", {\n      children: [\" \", !loading ? /*#__PURE__*/_jsx(Line, {\n        height: 100,\n        ref: chartRef,\n        options: options(),\n        data: data\n      }) : '']\n    })]\n  });\n}","map":null,"metadata":{},"sourceType":"module"}