{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useEffect, useState } from 'react';\nimport { Bar } from 'react-chartjs-2';\nimport { RESIZE_TRESHOLD } from '../../constants';\nimport { formatNumber } from '../../utils';\nimport { Card } from './../Card';\nexport function LineVacinadosInfecoesRecuperados({\n  statistics,\n  colors\n}) {\n  let {\n    0: loading,\n    1: setLoading\n  } = useState(true);\n  let marriedData = {};\n  let {\n    values,\n    labels,\n    valuesIn1,\n    valuesIn2,\n    raw: rawDiarios\n  } = statistics.getDiariosInoculacoes();\n  let {\n    raw: rawCasos\n  } = statistics.getDiariosCases();\n  let {\n    main,\n    shades,\n    tints,\n    complements\n  } = colors; //map the last 30 days in data\n  //Marry the data pls\n\n  if (labels.length > 0) {\n    let datesVaccines = Array.from(rawDiarios).reverse().slice(0, 14);\n    let datesCases = Array.from(rawCasos).reverse().slice(0, 14);\n    datesVaccines.forEach(element => {\n      let date = new Date(element.Data);\n      let key = `${date.getUTCFullYear()}_${date.getMonth()}_${date.getDate()}`;\n      marriedData[key] = element;\n    });\n    datesCases.forEach((element, i) => {\n      let date = new Date(element.Data);\n      let key = `${date.getUTCFullYear()}_${date.getMonth()}_${date.getDate()}`;\n\n      if (marriedData[key] !== undefined) {\n        marriedData[key] = _objectSpread(_objectSpread({}, element), marriedData[key]);\n      }\n    });\n  }\n\n  marriedData = Object.values(marriedData).reverse();\n\n  const data = canvas => {\n    if (window.innerWidth <= RESIZE_TRESHOLD) {\n      canvas.parentNode.style.width = RESIZE_TRESHOLD + 'px';\n    } else {\n      canvas.parentNode.style.width = 'auto';\n    }\n\n    window.addEventListener('resize', () => {\n      if (window.innerWidth <= RESIZE_TRESHOLD) {\n        canvas.parentNode.style.width = RESIZE_TRESHOLD + 'px';\n      } else {\n        canvas.parentNode.style.width = '100%';\n      }\n    });\n    return {\n      labels: labels.slice(labels.length - 14, labels.length),\n      datasets: [{\n        label: 'Inoculação - 2ª Dose',\n        fill: false,\n        type: 'bar',\n        backgroundColor: main,\n        data: valuesIn2.slice(valuesIn2.length - 14, valuesIn2.length),\n        stack: 'stack0',\n        order: 1\n      }, {\n        label: 'Inoculação - 1ª Dose',\n        backgroundColor: shades[0],\n        borderColor: shades[0],\n        data: valuesIn1.slice(valuesIn1.length - 14, valuesIn1.length),\n        stack: 'stack0',\n        order: 2\n      }, {\n        label: 'Vacinas Totais',\n        type: 'bar',\n        backgroundColor: shades[1],\n        data: values.slice(values.length - 14, values.length),\n        stack: 'stack0',\n        yAxisID: 'total',\n        order: 3\n      }, {\n        label: 'Número de infectados diário',\n        type: 'bar',\n        backgroundColor: complements[1],\n        data: marriedData.map(el => el.ConfirmadosNovos),\n        stack: 'stack1',\n        yAxisID: 'total',\n        order: 4\n      }, {\n        label: 'Número de recuperados diário',\n        type: 'bar',\n        backgroundColor: complements[2],\n        data: marriedData.map(el => el.VarRecuperados),\n        stack: 'stack2',\n        yAxisID: 'total',\n        order: 5\n      }]\n    };\n  };\n\n  const options = () => {\n    return {\n      plugins: {\n        datalabels: {\n          display: false,\n          color: 'blue'\n        }\n      },\n      legend: {\n        position: 'bottom',\n        align: 'start'\n      },\n      animation: {\n        duration: 1000\n      },\n      tooltips: {\n        mode: 'index',\n        intersect: false,\n        callbacks: {\n          label: (tooltipItem, data) => {\n            var label = data.datasets[tooltipItem.datasetIndex].label;\n            return label + ': ' + formatNumber(parseInt(tooltipItem.value), false);\n          },\n          title: (tooltipItem, data) => {\n            return 'Dia ' + tooltipItem[0].label;\n          }\n        }\n      },\n      scales: {\n        yAxes: [{\n          stacked: true,\n          ticks: {\n            maxTicksLimit: window.innerWidth <= RESIZE_TRESHOLD ? 8 : 10,\n            minTicksLimit: window.innerWidth <= RESIZE_TRESHOLD ? 8 : 10,\n            callback: function (value, index, values) {\n              return formatNumber(value, false);\n            }\n          }\n        }, {\n          stacked: false,\n          id: 'total',\n          display: false,\n          ticks: {\n            maxTicksLimit: window.innerWidth <= RESIZE_TRESHOLD ? 8 : 10,\n            minTicksLimit: window.innerWidth <= RESIZE_TRESHOLD ? 8 : 10\n          }\n        }],\n        xAxes: [{\n          stacked: true,\n          ticks: {\n            beginAtZero: true\n          }\n        }]\n      }\n    };\n  };\n\n  useEffect(() => {\n    if (values.length > 0) {\n      setLoading(false);\n    }\n  }, [values, labels]);\n  return /*#__PURE__*/_jsx(Card, {\n    allowOverflow: true,\n    children: /*#__PURE__*/_jsx(\"div\", {\n      children: !loading ? /*#__PURE__*/_jsx(Bar, {\n        height: 80,\n        options: options(),\n        data: data\n      }) : ''\n    })\n  });\n}","map":null,"metadata":{},"sourceType":"module"}