{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useEffect, useRef, useState } from 'react';\nimport { Bar } from 'react-chartjs-2';\nimport { Pie } from 'react-chartjs-2';\nimport { COLOR_1 } from '../../constants';\nimport { Card } from './../Card';\nimport ChartDataLabels from 'chartjs-plugin-datalabels';\nimport { formatNumber } from './../../utils';\nexport function PieAdministradasDoses({\n  statistics,\n  colors\n}) {\n  let {\n    0: loading,\n    1: setLoading\n  } = useState(true);\n  let {\n    main,\n    shades,\n    tints,\n    complements\n  } = colors;\n\n  const data = canvas => {\n    return {\n      labels: ['Doses Adminstradas - 1ª Inoculação', 'Doses Adminstradas - 2ª Inoculação', 'Doses por administrar'],\n      datasets: [{\n        backgroundColor: [main, shades[0], shades[1]],\n        data: [statistics.primeiras, statistics.segundas, statistics.recebidas - statistics.administradas]\n      }]\n    };\n  };\n\n  const options = () => {\n    return {\n      maintainAspectRatio: false,\n      plugins: {\n        datalabels: {\n          color: 'white',\n          formatter: (value, chart) => {\n            let sum = 0;\n\n            if (value === statistics.primeiras) {\n              sum = statistics.primeiras / statistics.recebidas;\n            }\n\n            if (value === statistics.segundas) {\n              sum = statistics.segundas / statistics.recebidas;\n            }\n\n            if (value === statistics.recebidas - statistics.administradas) {\n              sum = 1 - statistics.administradas / statistics.recebidas;\n            }\n\n            sum = sum * 100;\n\n            if (sum > 10) {\n              return sum.toFixed(2) + '%';\n            }\n\n            return '';\n          }\n        }\n      },\n      onResize: (a, b, c) => {},\n      legend: {\n        position: 'bottom',\n        align: 'start'\n      },\n      animation: {\n        duration: 1000\n      },\n      tooltips: {\n        callbacks: {\n          label: function ({\n            index\n          }, {\n            datasets,\n            labels\n          }) {\n            let label = labels[index];\n            let data = datasets[0].data[index];\n\n            if (label === 'Doses Recebidas') {\n              data = statistics.recebidas;\n            }\n\n            return `${label}: ${formatNumber(data)}`;\n          }\n        }\n      }\n    };\n  };\n\n  useEffect(() => {\n    setLoading(false);\n  }, []);\n  return /*#__PURE__*/_jsx(Card, {\n    allowOverflow: true,\n    children: /*#__PURE__*/_jsx(\"div\", {\n      children: !loading ? /*#__PURE__*/_jsx(Pie, {\n        plugins: [ChartDataLabels],\n        height: 350,\n        options: options(),\n        data: data\n      }) : ''\n    })\n  });\n}","map":null,"metadata":{},"sourceType":"module"}