{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useEffect, useRef, useState } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport { formatNumber } from '../../utils';\nimport { Card } from './../Card';\nimport classNames from 'classnames';\nimport { RESIZE_TRESHOLD, lineChartCommon } from './../../constants';\nexport function RamBarAdministradasPorFaixaEtaria({\n  statistics,\n  colors\n}) {\n  let {\n    0: loaded,\n    1: setLoaded\n  } = useState(false);\n  let {\n    main,\n    shades,\n    tints,\n    complements\n  } = colors;\n  let {\n    0: graphData,\n    1: setGraphData\n  } = useState({});\n  let {\n    0: activeDose,\n    1: setActiveDose\n  } = useState(1);\n  const canvasRef = useRef(null);\n\n  function generateColor(color) {\n    return {\n      borderColor: color,\n      pointBorderColor: color,\n      pointBackgroundColor: color,\n      pointHoverBackgroundColor: color,\n      pointHoverBorderColor: color\n    };\n  }\n\n  useEffect(() => {\n    var _canvasRef$current;\n\n    if (canvasRef !== null && canvasRef !== void 0 && (_canvasRef$current = canvasRef.current) !== null && _canvasRef$current !== void 0 && _canvasRef$current.chartInstance) {\n      canvasRef.current.chartInstance.data.datasets.forEach(dataset => {\n        if (dataset.customDose == activeDose) {\n          dataset.hidden = false;\n        } else {\n          dataset.hidden = true;\n        }\n\n        canvasRef.current.chartInstance.update();\n      });\n    }\n  }, [activeDose]);\n\n  const data = canvas => {\n    let {\n      labels,\n      groups\n    } = graphData;\n\n    if (window.innerWidth <= RESIZE_TRESHOLD) {\n      canvas.parentNode.style.width = '1000px';\n    } else {\n      canvas.parentNode.style.width = 'auto';\n    }\n\n    window.addEventListener('resize', () => {\n      if (window.innerWidth <= RESIZE_TRESHOLD) {\n        canvas.parentNode.style.width = '1000px';\n      } else {\n        canvas.parentNode.style.width = '100%';\n      }\n    });\n    return {\n      labels: Object.keys(graphData.labels).map(key => {\n        let fromDate = new Date(labels[key]);\n        return `${formatNumber(fromDate.getDate())}/${formatNumber(fromDate.getMonth() + 1)}`;\n      }),\n      datasets: [_objectSpread(_objectSpread(_objectSpread({}, lineChartCommon), generateColor(shades[0])), {}, {\n        label: 'Grupo 18/24 - 2ª Dose',\n        labelGroup: 'Grupo 18/24',\n        fill: false,\n        backgroundColor: shades[0],\n        data: groups.map(group => group.e1824.dose_2 || 0),\n        order: 1,\n        hidden: true,\n        display: false,\n        customDose: 2,\n        yAxisID: 'axis'\n      }), _objectSpread(_objectSpread(_objectSpread({}, lineChartCommon), generateColor(shades[0])), {}, {\n        label: 'Grupo 18/24 - 1ª Dose',\n        labelGroup: 'Grupo 18/24',\n        fill: false,\n        backgroundColor: shades[0],\n        data: groups.map(group => group.e1824.dose_1 || 0),\n        order: 2,\n        hidden: false,\n        display: true,\n        customDose: 1,\n        yAxisID: 'axis'\n      }), _objectSpread(_objectSpread(_objectSpread({}, lineChartCommon), generateColor(tints[1])), {}, {\n        label: 'Grupo 25/49 - 2ª Dose',\n        labelGroup: 'Grupo 25/49',\n        fill: false,\n        backgroundColor: tints[1],\n        data: groups.map(group => group.e2549.dose_2 || 0),\n        order: 3,\n        hidden: true,\n        display: false,\n        customDose: 2,\n        yAxisID: 'axis'\n      }), _objectSpread(_objectSpread(_objectSpread({}, lineChartCommon), generateColor(tints[1])), {}, {\n        label: 'Grupo 25/49 - 1ª Dose',\n        labelGroup: 'Grupo 25/49',\n        backgroundColor: tints[1],\n        fill: false,\n        data: groups.map(group => group.e2549.dose_1 || 0),\n        order: 4,\n        hidden: false,\n        display: true,\n        customDose: 1,\n        yAxisID: 'axis'\n      }), _objectSpread(_objectSpread(_objectSpread({}, lineChartCommon), generateColor(main)), {}, {\n        label: 'Grupo 50/59 - 2ª Dose',\n        labelGroup: 'Grupo 50/59',\n        fill: false,\n        backgroundColor: main,\n        data: groups.map(group => group.e5059.dose_2 || 0),\n        stack: 'stack1',\n        order: 5,\n        hidden: true,\n        display: false,\n        customDose: 2,\n        yAxisID: 'axis'\n      }), _objectSpread(_objectSpread(_objectSpread({}, lineChartCommon), generateColor(main)), {}, {\n        label: 'Grupo 50/59 - 1ª Dose',\n        labelGroup: 'Grupo 50/59',\n        backgroundColor: main,\n        fill: false,\n        data: groups.map(group => group.e5059.dose_1 || 0),\n        stack: 'stack1',\n        order: 6,\n        hidden: false,\n        display: true,\n        customDose: 1,\n        yAxisID: 'axis'\n      }), _objectSpread(_objectSpread(_objectSpread({}, lineChartCommon), generateColor(shades[2])), {}, {\n        label: 'Grupo 60/69 - 2ª Dose',\n        labelGroup: 'Grupo 60/69',\n        fill: false,\n        backgroundColor: shades[2],\n        data: groups.map(group => group.e6064.dose_2 + group.e6569.dose_2 || 0),\n        yAxisID: 'axis',\n        xAxisID: 'xaxis',\n        order: 7,\n        hidden: true,\n        display: false,\n        customDose: 2\n      }), _objectSpread(_objectSpread(_objectSpread({}, lineChartCommon), generateColor(shades[2])), {}, {\n        label: 'Grupo 60/69 - 1ª Dose',\n        labelGroup: 'Grupo 60/69',\n        backgroundColor: shades[2],\n        data: groups.map(group => group.e6064.dose_1 + group.e6569.dose_1 || 0),\n        xAxisID: 'xaxis',\n        order: 8,\n        hidden: false,\n        fill: false,\n        display: true,\n        customDose: 1,\n        yAxisID: 'axis'\n      }), _objectSpread(_objectSpread(_objectSpread({}, lineChartCommon), generateColor(complements[2])), {}, {\n        label: 'Grupo 70/79 - 2ª Dose',\n        labelGroup: 'Grupo 70/79',\n        fill: false,\n        backgroundColor: complements[2],\n        data: groups.map(group => group.e7079.dose_2 || 0),\n        order: 9,\n        hidden: true,\n        display: false,\n        customDose: 2,\n        yAxisID: 'axis'\n      }), _objectSpread(_objectSpread(_objectSpread({}, lineChartCommon), generateColor(complements[2])), {}, {\n        label: 'Grupo 70/79 - 1ª Dose',\n        labelGroup: 'Grupo 70/79',\n        backgroundColor: complements[2],\n        data: groups.map(group => group.e7079.dose_1 || 0),\n        order: 10,\n        hidden: false,\n        fill: false,\n        display: true,\n        customDose: 1,\n        yAxisID: 'axis'\n      }), _objectSpread(_objectSpread(_objectSpread({}, lineChartCommon), generateColor(complements[1])), {}, {\n        label: 'Grupo 80+ - 2ª Dose',\n        labelGroup: 'Grupo 80+',\n        xAxisID: 'xaxis',\n        backgroundColor: complements[1],\n        data: groups.map(group => group.e80.dose_2 || 0),\n        order: 11,\n        hidden: true,\n        stack: 'stack2',\n        fill: false,\n        display: false,\n        customDose: 2,\n        yAxisID: 'axis'\n      }), _objectSpread(_objectSpread(_objectSpread({}, lineChartCommon), generateColor(complements[1])), {}, {\n        label: 'Grupo 80+ - 1ª Dose',\n        labelGroup: 'Grupo 80+',\n        backgroundColor: complements[1],\n        data: groups.map(group => group.e80.dose_1 || 0),\n        stack: 'stack2',\n        xAxisID: 'xaxis',\n        yAxisID: 'axis',\n        order: 12,\n        hidden: false,\n        fill: false,\n        display: true,\n        customDose: 1\n      })]\n    };\n  };\n\n  const options = () => {\n    let maxValue = 100;\n    return {\n      //maintainAspectRatio: false,\n      plugins: {\n        datalabels: {\n          display: false,\n          color: 'blue'\n        }\n      },\n      onResize: (a, b, c) => {\n        if (window.innerWidth <= RESIZE_TRESHOLD) {\n          a.canvas.parentNode.style.width = '1000px';\n        } else {\n          a.canvas.parentNode.style.width = 'auto';\n        }\n      },\n      legend: {\n        position: 'bottom',\n        align: 'start',\n        onHover: function (event, legend) {\n          document.body.classList.add('mouse-pointer');\n        },\n        onLeave: function (event, legend) {\n          document.body.classList.remove('mouse-pointer');\n        },\n        labels: {\n          filter: function (item, chart) {\n            return chart.datasets[item.datasetIndex].hidden == false;\n          }\n        }\n      },\n      animation: {\n        duration: 1000\n      },\n      tooltips: {\n        mode: 'index',\n        intersect: false,\n        callbacks: _objectSpread(_objectSpread(_objectSpread({}, lineChartCommon), generateColor(shades[0])), {}, {\n          label: (tooltipItem, data) => {\n            var label = data.datasets[tooltipItem.datasetIndex].label;\n            return label.replace('- 1ª Dose', '').replace('- 2ª Dose', '') + ': ' + parseFloat(tooltipItem.value).toFixed(2) + '%';\n          },\n          title: (tooltipItem, data) => {\n            return tooltipItem[0].label;\n          }\n        })\n      },\n      scales: {\n        yAxes: [{\n          id: 'axis',\n          stacked: false,\n          ticks: {\n            beginAtZero: false,\n            min: 0,\n            max: maxValue,\n            stepSize: (maxValue / 5).toFixed(0),\n            callback: value => formatNumber(value, false) + '%'\n          }\n        }],\n        xAxes: [{\n          id: 'xaxis',\n          stacked: false,\n          ticks: {\n            beginAtZero: false\n          }\n        }]\n      }\n    };\n  };\n\n  useEffect(() => {\n    statistics.getAdministredDosesByAgeByWeekRam().then(data => {\n      setGraphData(data);\n      setLoaded(true);\n      setActiveDose(1);\n    });\n  }, []);\n  return /*#__PURE__*/_jsx(Card, {\n    textLeft: true,\n    allowOverflow: true,\n    children: /*#__PURE__*/_jsx(\"div\", {\n      children: loaded === true ? /*#__PURE__*/_jsxs(_Fragment, {\n        children: [/*#__PURE__*/_jsx(\"div\", {\n          className: 'toggle_buttons',\n          children: /*#__PURE__*/_jsxs(\"p\", {\n            children: [/*#__PURE__*/_jsx(\"button\", {\n              className: classNames('toggle_button', {\n                active: activeDose === 1\n              }),\n              onClick: () => {\n                setActiveDose(1);\n              },\n              children: \"1\\xAA Dose\"\n            }), /*#__PURE__*/_jsx(\"button\", {\n              className: classNames('toggle_button', {\n                active: activeDose === 2\n              }),\n              onClick: () => {\n                setActiveDose(2);\n              },\n              children: \"2\\xAA Dose\"\n            })]\n          })\n        }), /*#__PURE__*/_jsx(\"div\", {\n          children: /*#__PURE__*/_jsx(Line, {\n            height: 80,\n            ref: canvasRef,\n            options: options(),\n            data: data\n          })\n        })]\n      }) : ''\n    })\n  });\n}","map":null,"metadata":{},"sourceType":"module"}