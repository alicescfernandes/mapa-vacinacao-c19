{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { format } from 'date-fns';\nimport { pt } from 'date-fns/locale';\nimport fetchNode from 'node-fetch';\nimport { RESIZE_TRESHOLD } from './constants';\nexport const formatNumber = (number, isDate = true) => {\n  let numberFormatter = new Intl.NumberFormat('pt-PT', {\n    minimumIntegerDigits: isDate ? 2 : 1\n  });\n  return numberFormatter.format(number).replace(/,/gm, ' ');\n};\nimport { populacao } from './data/generic.json'; //https://stackoverflow.com/questions/5623838/rgb-to-hex-and-hex-to-rgb\n\nexport function hexToRgb(hex) {\n  var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n  return result ? {\n    r: parseInt(result[1], 16),\n    g: parseInt(result[2], 16),\n    b: parseInt(result[3], 16)\n  } : null;\n}\nexport function dateWithoutTimezone(unix) {\n  const dt = new Date(unix);\n  return new Date(dt.valueOf() + dt.getTimezoneOffset() * 60 * 1000);\n}\nexport function trackPlausible(req) {\n  var _req$headers;\n\n  if (req === undefined) return;\n  if (req.url !== '/' && req.url !== '/madeira' && !req.url.match('/api/')) return;\n  let host = req.headers.host;\n  let url = req.url;\n  let userAgent = req.headers['user-agent'];\n  let referer = ((_req$headers = req.headers) === null || _req$headers === void 0 ? void 0 : _req$headers.referer) || '';\n  var ip = req.headers['x-forwarded-for'] || req.connection.remoteAddress;\n\n  if (ip.substr(0, 7) == '::ffff:') {\n    ip = ip.substr(7);\n  }\n\n  let headers = {\n    'user-agent': userAgent,\n    'x-forwarded-for': ip,\n    referer: referer\n  };\n  let data = {\n    name: 'pageview',\n    url: 'https://www.vacinacaocovid19.pt' + url,\n    domain: 'vacinacaocovid19.pt',\n    referrer: referer,\n    screen_width: null\n  };\n  if (host.match('localhost')) return;\n  if (req.headers['x-request-self'] === 'true') return;\n  console.log('track', headers, JSON.stringify(data));\n  fetchNode('https://plausible.io/api/event', {\n    method: 'post',\n    headers,\n    body: JSON.stringify(data)\n  }).then(() => {\n    console.log('request', 'post', JSON.stringify(data), headers);\n  }).catch(() => {\n    console.log('err');\n  });\n}\nexport function downloadPNG(canvasElement, graphName) {\n  var link = document.createElement('a');\n  link.download = 'filename.png';\n  link.href = canvasElement.toDataURL();\n  link.click();\n}\nexport function perHundred(total, populacaoTotal = populacao.valor) {\n  return total / populacaoTotal * 100;\n}\nexport function fetchWithLocalCache(url, options) {\n  let useCache = true;\n  let [path, cacheBuster] = url.split('?');\n  let items = JSON.parse(JSON.stringify(localStorage));\n\n  for (var k in items) {\n    let [lsPath, lsCacheBuster] = k.split('?');\n\n    if (lsPath === path && lsCacheBuster !== cacheBuster) {\n      useCache = false;\n      localStorage.removeItem(k);\n    }\n  }\n\n  if (window && localStorage.getItem(url) && useCache === true) {\n    let data = JSON.parse(localStorage.getItem(url));\n    return Promise.resolve(data);\n  } else {\n    return fetch(url, _objectSpread(_objectSpread({}, options), {}, {\n      headers: {\n        'X-Request-Self': true\n      }\n    })).then(res => res.json()).then(data => {\n      localStorage.setItem(url, JSON.stringify(data));\n      return data;\n    });\n  }\n}\nexport function formatDateShort(date) {\n  return format(new Date(date), \"dd'/'MM'/'yyyy\", {\n    locale: pt\n  });\n}\nexport function makeAnnotations(annotationsArray) {\n  let annotationBoilerplate = {\n    type: 'line',\n    mode: 'horizontal',\n    scaleID: 'y',\n    value: null,\n    borderColor: '#0A9DD1',\n    borderWidth: 1,\n    borderDash: [5, 5],\n    label: {\n      font: {\n        style: 'normal'\n      },\n      backgroundColor: 'rgba(255,255,255,0.6)',\n      cornerRadius: 0,\n      drawTime: 'afterDraw',\n      color: '#0A9DD1',\n      rotation: 270,\n      xAdjust: 8,\n      //xAdjust: -8,\n      yAdjust: 0,\n      fontSize: '13px',\n      enabled: true,\n      content: ''\n    }\n  };\n  let arr = [];\n  annotationsArray.forEach(el => {\n    var _el$xAdjust;\n\n    let annotation = _objectSpread(_objectSpread({}, annotationBoilerplate), {}, {\n      mode: el.mode,\n      scaleID: el.mode === 'horizontal' ? 'y' : 'x',\n      borderColor: el.color,\n      value: el.position,\n      display: el.display,\n      label: _objectSpread(_objectSpread({}, annotationBoilerplate.label), {}, {\n        content: el.marcador,\n        color: el.color,\n        xAdjust: (_el$xAdjust = el.xAdjust) !== null && _el$xAdjust !== void 0 ? _el$xAdjust : 0\n      })\n    });\n\n    arr.push(annotation);\n  });\n  return arr;\n}\nexport function calculateDims() {\n  if (window.innerWidth <= RESIZE_TRESHOLD) {\n    return {\n      width: 2000,\n      height: 350\n    };\n  } else {\n    return {\n      width: 3000,\n      height: 500\n    };\n  }\n}\n/*\n\n\nexport function makeAnnotations(annotationsArray) {\n\tlet annotationBoilerplate = {\n\t\ttype: 'line',\n\t\tmode: 'horizontal',\n\t\tscaleID: 'y-axis-0',\n\t\tvalue: null,\n\t\tborderColor: '#0A9DD1',\n\t\tborderWidth: 2,\n\t\tborderDash: [5, 5],\n\n\t\tlabel: {\n\t\t\tbackgroundColor: 'rgba(0,0,0,0.0)',\n\n\t\t\tdrawTime: 'afterDatasetsDraw',\n\n\t\t\ttextAlign: 'left',\n\t\t\tfontColor: '#0A9DD1',\n\t\t\tposition: 'left',\n\t\t\txAdjust: 10,\n\t\t\tyAdjust: -10,\n\t\t\tfontSize: '13px',\n\t\t\tenabled: true,\n\t\t\tcontent: '',\n\t\t},\n\t};\n\tlet arr = [];\n\tannotationsArray.forEach((el) => {\n\t\tlet annotation = {\n\t\t\t...annotationBoilerplate,\n\t\t\tmode: el.mode,\n\t\t\tscaleID: el.mode === 'horizontal' ? 'y-axis-0' : 'x-axis-0',\n\t\t\tborderColor: el.color,\n\t\t\tvalue: el.position,\n\t\t\tlabel: {\n\t\t\t\t...annotationBoilerplate.label,\n\t\t\t\tcontent: el.marcador,\n\t\t\t\tfontColor: el.color,\n\t\t\t},\n\t\t};\n\t\tarr.push(annotation);\n\t});\n\n\treturn arr;\n}\n\n*/","map":null,"metadata":{},"sourceType":"module"}