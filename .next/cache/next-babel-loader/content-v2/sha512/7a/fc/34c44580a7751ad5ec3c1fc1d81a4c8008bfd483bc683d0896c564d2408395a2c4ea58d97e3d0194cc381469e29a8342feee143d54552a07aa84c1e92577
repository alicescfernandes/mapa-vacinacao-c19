{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useEffect, useState } from 'react';\nimport { ECDC_MAPPING, REGIOES } from '../constants';\nimport { fetchWithLocalCache } from '../utils';\nimport data from './../data/last-update.json';\nimport { populacao, populacao_ram, populacao_raa } from './../data/generic.json';\nimport lastUpdate from './../data/last-update.json';\nimport { isSameDay } from 'date-fns';\nexport function useData({\n  regiao\n}) {\n  let {\n    0: ready,\n    1: setReady\n  } = useState(false);\n  let {\n    0: versioning,\n    1: bumpVersioning\n  } = useState(false);\n  let {\n    0: ecdc,\n    1: setECDC\n  } = useState(false);\n  let {\n    0: vaccines,\n    1: setVaccines\n  } = useState(false);\n  let {\n    0: casesData,\n    1: setCasesData\n  } = useState(false);\n  let {\n    0: arquipelagos,\n    1: setArquipelagos\n  } = useState({\n    madeira: {\n      vacinas: [],\n      casos: []\n    },\n    acores: {\n      vacinas: [],\n      casos: []\n    }\n  });\n  let options = {\n    month: 'numeric',\n    day: 'numeric'\n  };\n  /* let options2 = {\n  \tmonth: 'short',\n  \tday: 'numeric',\n  \tyear: 'numeric',\n  }; \n  console.log(1)\n  */\n\n  let f = new Intl.DateTimeFormat('pt-PT', options); // let f2 = new Intl.DateTimeFormat('pt-PT', options2);\n\n  function parseData(data) {\n    if (!ready) return;\n    let vaccines_stock = [];\n    let values = [];\n    let labels = [];\n    data.forEach(el => {\n      labels.push(f.format(new Date(el.Data)));\n      values.push(el.Vacinados_Ac);\n    });\n    return {\n      values,\n      labels\n    };\n  }\n\n  let statistics = {\n    getRaw: () => {\n      return vaccines;\n    },\n    getEstimativaStock: async () => {\n      let DAYS_PER_WEEK = 7;\n      let totalDays = (data.week + 1) * DAYS_PER_WEEK;\n      let {\n        values: totalDiarios,\n        labels\n      } = statistics.getDiariosInoculacoes();\n      let vaccines_stock = Array(totalDiarios.length).fill(0);\n      let vaccines_stock_var = Array(totalDays).fill(0);\n      let {\n        com,\n        mod,\n        az,\n        labels: labelsEcdc\n      } = await statistics.getReceivedDosesByBrandByWeek();\n      let totais = com.map((el, idx) => {\n        var _mod$idx, _az$idx, _com$idx;\n\n        return ((_mod$idx = mod[idx]) !== null && _mod$idx !== void 0 ? _mod$idx : 0) + ((_az$idx = az[idx]) !== null && _az$idx !== void 0 ? _az$idx : 0) + ((_com$idx = com[idx]) !== null && _com$idx !== void 0 ? _com$idx : 0);\n      });\n      vaccines_stock = vaccines_stock.map((el, idx) => {\n        let found_date = null;\n        let date = vaccines[idx].Data; //Try to find if that date had vaccines\n\n        labelsEcdc.filter((el, date_idx) => {\n          if (idx == 0) {\n            found_date = 1;\n            return;\n          }\n\n          if (idx == 1) {\n            return;\n          }\n\n          if (isSameDay(date, new Date(el.from).getTime())) {\n            found_date = date_idx;\n          }\n        });\n\n        if (found_date !== null) {\n          return totais[found_date];\n        }\n\n        return 0;\n      });\n      let current_vaccine_stock = 0;\n      vaccines_stock_var = vaccines_stock_var.map((el, idx) => {\n        current_vaccine_stock = current_vaccine_stock - (totalDiarios[idx] || 0) + vaccines_stock[idx];\n        return current_vaccine_stock;\n      });\n      return {\n        vaccines_stock_var,\n        labels\n      };\n    },\n    getLastVaccineAvaliable: () => {\n      let data = {};\n\n      if (regiao !== REGIOES.PORTUGAL) {\n        let dados_regiao = arquipelagos[regiao].vacinas;\n        let lastItem = dados_regiao[dados_regiao.length - 1];\n        data = {\n          dose_2: lastItem.dose_2,\n          dose_1: lastItem.dose_1,\n          total: lastItem.total\n        };\n      } else {\n        let lastItem = vaccines[vaccines.length - 1];\n        data = {\n          dose_2: lastItem.Inoculacao2_Ac,\n          dose_1: lastItem.Inoculacao1_Ac,\n          total: lastItem.Vacinados_Ac\n        };\n      }\n\n      return data;\n    },\n    getLastCaseAvaliable: () => {\n      let data = {};\n\n      if (regiao !== REGIOES.PORTUGAL) {\n        let dados_regiao = arquipelagos[regiao].casos;\n        let lastItem = dados_regiao[dados_regiao.length - 1];\n        data = {\n          ativos: parseInt(lastItem.ativos),\n          recuperados: parseInt(lastItem.recuperados),\n          obitos: parseInt(lastItem.obitos),\n          populacao: regiao == REGIOES.MADEIRA ? parseInt(populacao_ram.valor) : parseInt(populacao_raa.valor),\n          data: lastItem.data\n        };\n      } else {\n        let lastItem = casesData[casesData.length - 1];\n        data = {\n          ativos: lastItem.ativos,\n          recuperados: lastItem.recuperados,\n          obitos: lastItem.obitos,\n          populacao: populacao.valor,\n          data: lastItem.data\n        };\n      }\n\n      return data;\n    },\n    getDailyData: () => {\n      if (regiao !== REGIOES.PORTUGAL) {\n        let dados_regiao = arquipelagos[regiao].vacinas;\n        let labels = [];\n        let values = [];\n        dados_regiao.forEach(el => {\n          labels.push(f.format(new Date(el.data)));\n          values.push(el.total);\n        });\n        return {\n          labels,\n          values\n        };\n      } else {\n        return parseData(vaccines);\n      }\n    },\n    getDesvioPadrao: () => {},\n    getMediaMovel: dias => {\n      let medias = [];\n      let labelsMedias = [];\n\n      if (regiao === REGIOES.PORTUGAL) {\n        let {\n          labels,\n          values\n        } = parseData(vaccines);\n\n        for (let start = 1; start <= dias; start++) {\n          let sum = Math.round(values.slice(0, start).reduce((prev, current) => prev + current, 0) / start);\n          medias.push(sum);\n          labelsMedias.push(labels[start]);\n        }\n\n        for (let start = dias; start <= values.length; start++) {\n          let sum = Math.round(values.slice(start - dias, start).reduce((prev, current) => prev + current, 0) / dias);\n          medias.push(sum);\n          labelsMedias.push(labels[start]);\n        }\n      }\n\n      return {\n        values: medias,\n        labels: labelsMedias\n      };\n    },\n    getRtRegiao: async regiao => {\n      let data2 = await fetchWithLocalCache(`/api/rt/${regiao}?${btoa(lastUpdate.date)}`).then(responseRt => {\n        return responseRt;\n      });\n      let date = new Date('2021-01-01').getTime();\n      let returnRt = data2.filter(el => new Date(el.Data).getTime() >= date); //let returnRt = data2;\n\n      return {\n        labels: returnRt.map(el => f.format(new Date(el.Data))),\n        rt: returnRt\n      };\n    },\n    getRtRegioes: async () => {\n      let data = await fetchWithLocalCache(`/api/rt/todas?${btoa(lastUpdate.date)}`).then(responseRt => {\n        return responseRt;\n      });\n      let dates = data.rt_continente.map(el => el.Data); //get rt for each date\n\n      let rtData = [];\n      dates.forEach(el => {\n        let tempD = {\n          continente: data.rt_continente.filter(tempEl => tempEl.Data === el)[0],\n          centro: data.rt_centro.filter(tempEl => tempEl.Data === el)[0],\n          nacional: data.rt_nacional.filter(tempEl => tempEl.Data === el)[0],\n          lvt: data.rt_lvt.filter(tempEl => tempEl.Data === el)[0],\n          alentejo: data.rt_alentejo.filter(tempEl => tempEl.Data === el)[0],\n          norte: data.rt_norte.filter(tempEl => tempEl.Data === el)[0],\n          algarve: data.rt_algarve.filter(tempEl => tempEl.Data === el)[0],\n          ram: data.rt_ram.filter(tempEl => tempEl.Data === el)[0],\n          raa: data.rt_raa.filter(tempEl => tempEl.Data === el)[0]\n        };\n        rtData.push(tempD);\n      });\n      return {\n        labels: dates.map(el => f.format(new Date(el))),\n        values: rtData\n      };\n    },\n    getOwid: async () => {\n      let owid = await fetchWithLocalCache(`/api/owid?${btoa(lastUpdate.date)}`);\n      let labels = owid.eun.data.map(el => f.format(new Date(el.date)));\n      let data = {\n        pt: owid.prt.data,\n        eu: owid.eun.data\n      };\n      return _objectSpread(_objectSpread({}, data), {}, {\n        labels\n      });\n    },\n    getMediaMovelDiaria: dias => {\n      let medias = [];\n      let labels = [];\n      let labelsMedias = [];\n\n      if (regiao === REGIOES.PORTUGAL) {\n        let {\n          values\n        } = statistics.getVacinadosPorDia();\n\n        for (let start = 1; start < dias; start++) {\n          if (values[start] === null) {\n            medias.push(null);\n            continue;\n          }\n\n          let sum = Math.round(values.slice(0, start).reduce((prev, current) => prev + current, 0) / start);\n          medias.push(sum);\n          labelsMedias.push(labels[start]);\n        }\n\n        for (let start = dias; start <= values.length; start++) {\n          let slice = values.slice(start - dias, start);\n\n          if (values[start] === null || slice.includes(null) > 0) {\n            medias.push(null);\n            continue;\n          }\n\n          let sum = Math.round(slice.reduce((prev, current) => prev + current, 0) / dias);\n          medias.push(sum);\n          labelsMedias.push(labels[start]);\n        }\n      }\n\n      return {\n        values: medias,\n        labels: labelsMedias\n      };\n    },\n    getVacinadosPorDia: () => {\n      let {\n        labels,\n        values\n      } = statistics.getDailyData();\n      let vacinadosPorDia = values.map((val, idx, vals) => {\n        //The first one\n        if (idx === 0) {\n          return val;\n        }\n\n        let nextDay = idx - 1;\n\n        if (vals[nextDay] == null || val == null) {\n          return null;\n        }\n\n        return val - vals[nextDay];\n      });\n      return {\n        values: vacinadosPorDia,\n        labels\n      };\n    },\n    getVacinadosAcum: () => {\n      let in1 = [];\n      let in2 = [];\n      let total = [];\n      let {\n        labels,\n        values\n      } = statistics.getDailyData();\n\n      if (regiao !== REGIOES.PORTUGAL) {\n        let dados_regiao = arquipelagos[regiao].vacinas;\n        dados_regiao.forEach((val, idx, vals) => {\n          in1.push(dados_regiao[idx].dose_1);\n          in2.push(dados_regiao[idx].dose_2);\n          total.push(dados_regiao[idx].total);\n        });\n      } else {\n        values.forEach((val, idx, vals) => {\n          in1.push(vaccines[idx].Inoculacao1_Ac);\n          in2.push(vaccines[idx].Inoculacao2_Ac);\n          total.push(vaccines[idx].Vacinados_Ac);\n        });\n      }\n\n      return {\n        valuesIn1: in1,\n        valuesIn2: in2,\n        values: total,\n        labels\n      };\n    },\n    getDiariosInoculacoes: () => {\n      let in1 = [];\n      let in2 = [];\n      let total = [];\n      let raw = vaccines;\n      let labels = [];\n\n      if (regiao !== REGIOES.PORTUGAL) {\n        let raw = arquipelagos[regiao].vacinas;\n        let {\n          labels: labelsMad,\n          values\n        } = statistics.getDailyData();\n        labels = labelsMad;\n        total = values.map((val, idx, vals) => {\n          //The first one\n          if (idx === 0) {\n            in1.push(raw[idx].dose_1);\n            in2.push(raw[idx].dose_2);\n            return val;\n          }\n\n          let prevDay = idx - 1;\n\n          if (raw[prevDay].dose_1 == null || raw[idx].dose_1 == null) {\n            in1.push(null);\n          } else {\n            in1.push(raw[idx].dose_1 - raw[prevDay].dose_1);\n          }\n\n          if (raw[prevDay].dose_2 == null || raw[idx].dose_2 == null) {\n            in2.push(null);\n          } else {\n            in2.push(raw[idx].dose_2 - raw[prevDay].dose_2);\n          }\n\n          if (vals[prevDay] == null || val == null) {\n            return null;\n          }\n\n          let total_today = raw[idx].dose_2 + raw[idx].dose_1;\n          let total_prev = raw[prevDay].dose_2 + raw[prevDay].dose_1;\n          return total_today - total_prev; //return val - vals[prevDay];\n        });\n        console.log(in2);\n      } else {\n        let {\n          labels: labelsCont,\n          values\n        } = parseData(vaccines);\n        labels = labelsCont;\n        total = values.map((val, idx, vals) => {\n          //The first one\n          if (idx === 0) {\n            in1.push(vaccines[idx].Inoculacao1_Ac);\n            in2.push(vaccines[idx].Inoculacao2_Ac);\n            return val;\n          }\n\n          let prevDay = idx - 1;\n\n          if (vaccines[prevDay].Inoculacao1_Ac == null || vaccines[idx].Inoculacao1_Ac == null) {\n            in1.push(null);\n          } else {\n            in1.push(vaccines[idx].Inoculacao1_Ac - vaccines[prevDay].Inoculacao1_Ac);\n          }\n\n          if (vaccines[prevDay].Inoculacao2_Ac == null || vaccines[idx].Inoculacao2_Ac == null) {\n            in2.push(null);\n          } else {\n            in2.push(vaccines[idx].Inoculacao2_Ac - vaccines[prevDay].Inoculacao2_Ac);\n          }\n\n          if (vals[prevDay] == null || val == null) {\n            return null;\n          }\n\n          return val - vals[prevDay];\n        });\n      }\n\n      return {\n        valuesIn1: in1,\n        valuesIn2: in2,\n        values: total,\n        raw,\n        labels\n      };\n    },\n    getDiariosCases: () => {\n      let labels2 = [];\n      let values2 = [];\n      casesData.forEach(el => {\n        labels2.push(new Date(el.Data));\n        values2.push(el);\n      });\n      return {\n        labels: labels2,\n        values: values2,\n        raw: casesData\n      };\n    },\n    getReceivedDosesByBrandByWeek: async () => {\n      let labels = {};\n      let weeks = await fetchWithLocalCache(`/api/weeks`, false);\n      let com = {};\n      let mod = {};\n      let az = {};\n      let janss = {};\n      let ecdcRegion = ECDC_MAPPING[regiao];\n      ecdc.forEach(el => {\n        if (parseInt(el['NumberDosesReceived']) > 0 && el['Region'] === ecdcRegion) {\n          com[el['YearWeekISO']] = com[el['YearWeekISO']] || null;\n          mod[el['YearWeekISO']] = mod[el['YearWeekISO']] || null;\n          az[el['YearWeekISO']] = az[el['YearWeekISO']] || null;\n          janss[el['YearWeekISO']] = janss[el['YearWeekISO']] || null;\n          labels[el['YearWeekISO']] = weeks[el['YearWeekISO']];\n\n          if (el['Vaccine'] === 'COM') {\n            com[el['YearWeekISO']] = parseInt(el['NumberDosesReceived']);\n          }\n\n          if (el['Vaccine'] === 'MOD') {\n            mod[el['YearWeekISO']] = parseInt(el['NumberDosesReceived']);\n          }\n\n          if (el['Vaccine'] === 'AZ') {\n            az[el['YearWeekISO']] = parseInt(el['NumberDosesReceived']);\n          }\n\n          if (el['Vaccine'] === 'JANSS') {\n            janss[el['YearWeekISO']] = parseInt(el['NumberDosesReceived']);\n          }\n        }\n      });\n      com = Object.values(com);\n      mod = Object.values(mod);\n      az = Object.values(az);\n      janss = Object.values(janss);\n      labels = Object.values(labels);\n      return {\n        com,\n        mod,\n        az,\n        janss,\n        labels\n      };\n    },\n    getAdministredDosesByAgeByWeek: async () => {\n      let labels = {};\n      let maxValue = 0;\n      let weeks = await fetchWithLocalCache(`/api/weeks`, false);\n      let groups = {};\n      let ecdcRegion = ECDC_MAPPING[regiao];\n      ecdc.forEach(el => {\n        if (el['NumberDosesReceived'] == '' && el['Region'] === ecdcRegion) {\n          if (!labels.hasOwnProperty(el['YearWeekISO'])) {\n            labels[el['YearWeekISO'].replace('-', '')] = weeks[el['YearWeekISO']];\n          }\n\n          groups[el['TargetGroup']] = groups[el['TargetGroup']] || {\n            dose_1: [],\n            dose_2: []\n          };\n          maxValue = Math.max(el['FirstDose'], el['SecondDose']);\n          groups[el['TargetGroup']].dose_1[el['YearWeekISO']] = (groups[el['TargetGroup']].dose_1[el['YearWeekISO']] || 0) + parseInt(el['FirstDose']);\n          groups[el['TargetGroup']].dose_2[el['YearWeekISO']] = (groups[el['TargetGroup']].dose_2[el['YearWeekISO']] || 0) + parseInt(el['SecondDose']);\n        }\n      });\n      return {\n        maxValue,\n        labels,\n        groups\n      };\n    },\n    getAdministredDosesByAgeByWeekRam: async () => {\n      let labels = [];\n      let maxValue = 0;\n      let groups = [];\n      arquipelagos.madeira.vacinas.forEach(el => {\n        labels.push(el.data);\n        groups.push(el.escaloes);\n      });\n      return {\n        maxValue,\n        labels,\n        groups\n      };\n    },\n    getTotalAdministredDosesByAgeByWeek: async () => {\n      let groups = {};\n      ecdc.forEach(el => {\n        if (el['NumberDosesReceived'] == '') {\n          groups[el['TargetGroup']] = groups[el['TargetGroup']] || {\n            mod: [],\n            com: [],\n            az: [],\n            janss: [],\n            target: 0,\n            max: 0\n          };\n\n          if (el['Vaccine'] === 'COM') {\n            groups[el['TargetGroup']].com[0] = parseInt((groups[el['TargetGroup']].com[0] || 0) + parseInt(el['FirstDose']));\n            groups[el['TargetGroup']].com[1] = (groups[el['TargetGroup']].com[1] || 0) + parseInt(el['SecondDose']);\n          }\n\n          if (el['Vaccine'] === 'MOD') {\n            groups[el['TargetGroup']].mod[0] = (groups[el['TargetGroup']].mod[0] || 0) + parseInt(el['FirstDose']);\n            groups[el['TargetGroup']].mod[1] = (groups[el['TargetGroup']].mod[1] || 0) + parseInt(el['SecondDose']);\n          }\n\n          if (el['Vaccine'] === 'AZ') {\n            groups[el['TargetGroup']].az[0] = (groups[el['TargetGroup']].az[0] || 0) + parseInt(el['FirstDose']);\n            groups[el['TargetGroup']].az[1] = (groups[el['TargetGroup']].az[1] || 0) + parseInt(el['SecondDose']);\n          }\n\n          if (el['Vaccine'] === 'JANSS') {\n            groups[el['TargetGroup']].janss[0] = (groups[el['TargetGroup']].janss[0] || 0) + parseInt(el['FirstDose']);\n            groups[el['TargetGroup']].janss[1] = (groups[el['TargetGroup']].janss[1] || 0) + parseInt(el['SecondDose']);\n          }\n\n          groups[el['TargetGroup']].target = (groups[el['TargetGroup']].target || 0) + parseInt(el['Denominator']);\n        }\n      });\n      return groups;\n    },\n    getTotalSNS: async () => {\n      let sns = await fetchWithLocalCache(`/api/sns?${btoa(lastUpdate.dateSnsStartWeirdFormat)}`, false);\n      return sns.filter(el => {\n        return (el.TYPE === 'REGIONAL' || el.TYPE === 'GENERAL') && el.DATE == data.dateSnsStartWeirdFormat;\n      });\n    },\n    getTotalSNSIdade: async () => {\n      let sns = await fetchWithLocalCache(`/api/sns?${btoa(lastUpdate.dateSnsStartWeirdFormat)}`, false);\n      return sns.filter(el => {\n        return el.TYPE === 'AGES';\n      });\n    },\n    getTotalSNSRecebidas: async () => {\n      let sns = await fetchWithLocalCache(`/api/sns?${btoa(lastUpdate.dateSnsStartWeirdFormat)}`, false);\n      let [item] = sns.filter(el => {\n        return el.TYPE === 'GENERAL' && el.RECEIVED !== 'NA' && el.DATE == data.dateSnsStartWeirdFormat;\n      });\n      return item;\n    },\n    getTotalARS: async () => {\n      let ars = await fetchWithLocalCache(`/api/ars?${btoa(lastUpdate.dateSnsStartWeirdFormat)}`, false);\n      let data = {};\n      ars.features.forEach(el => {\n        if (el.attributes.ARSNome === 'Nacional') el.attributes.ARSNome = 'All';\n\n        if (!(el.attributes.ARSNome in data)) {\n          data[el.attributes.ARSNome] = {\n            obitosNovos7Dias: 0,\n            casosNovos7Dias: 0\n          };\n        }\n\n        data[el.attributes.ARSNome].obitosNovos7Dias += el.attributes.var_obitos;\n        data[el.attributes.ARSNome].casosNovos7Dias += el.attributes.confirmados_novos;\n      });\n      return data;\n    },\n    getCases: () => {\n      return casesData;\n    },\n    getDosesRecebidasAcum: async () => {\n      let weeks = await fetchWithLocalCache(`/api/weeks`, false);\n      if (ecdc == false) return;\n      let labels = {};\n      let com = {};\n      let mod = {};\n      let az = {};\n      let janss = {};\n      let sum = [];\n      let ecdcCopy = JSON.parse(JSON.stringify(ecdc));\n\n      function sumArray(array) {\n        return array.reduce((prev, current) => {\n          return prev + current;\n        }, 0);\n      }\n\n      ecdcCopy.filter(el => el['NumberDosesReceived'] > 0).forEach(el => {\n        if (!labels.hasOwnProperty(el['YearWeekISO'])) {\n          labels[el['YearWeekISO']] = weeks[el['YearWeekISO']];\n        }\n\n        com[el['YearWeekISO']] = com[el['YearWeekISO']] || 0;\n        mod[el['YearWeekISO']] = mod[el['YearWeekISO']] || 0;\n        az[el['YearWeekISO']] = az[el['YearWeekISO']] || 0;\n        janss[el['YearWeekISO']] = janss[el['YearWeekISO']] || 0;\n\n        if (el['Vaccine'] === 'COM') {\n          com[el['YearWeekISO']] = parseInt(el['NumberDosesReceived']);\n        }\n\n        if (el['Vaccine'] === 'MOD') {\n          mod[el['YearWeekISO']] = parseInt(el['NumberDosesReceived']);\n        }\n\n        if (el['Vaccine'] === 'AZ') {\n          az[el['YearWeekISO']] = parseInt(el['NumberDosesReceived']);\n        }\n\n        if (el['Vaccine'] === 'JANSS') {\n          janss[el['YearWeekISO']] = parseInt(el['NumberDosesReceived']);\n        }\n      });\n      com = Object.values(com).reverse().map((el, idx, arr) => sumArray(arr.slice(idx, arr.length))).reverse();\n      az = Object.values(az).reverse().map((el, idx, arr) => sumArray(arr.slice(idx, arr.length))).reverse();\n      mod = Object.values(mod).reverse().map((el, idx, arr) => sumArray(arr.slice(idx, arr.length))).reverse();\n      janss = Object.values(janss).reverse().map((el, idx, arr) => sumArray(arr.slice(idx, arr.length))).reverse();\n      sum = mod.map((el, idx, arr) => {\n        return com[idx] + az[idx] + mod[idx] + janss[idx];\n      });\n      return {\n        mod,\n        com,\n        az,\n        janss,\n        sum,\n        labels: Object.values(labels)\n      };\n    },\n    getArquipelagoData: async () => {\n      let res = await fetchWithLocalCache(`/api/${regiao}?${btoa(lastUpdate.dateMadeira)}`);\n      return res;\n    },\n    getMadeiraPDS: async () => {\n      let res = await fetchWithLocalCache(`/api/${regiao}/pontosituacao?${btoa(lastUpdate.dateMadeiraCases)}`);\n      return res;\n    },\n    getSesaram: async () => {\n      let res = await fetch(`/api/sesaram?${btoa(lastUpdate.date)}`);\n      let json = res.json();\n      return json;\n    }\n  };\n  useEffect(() => {\n    Promise.all([fetchWithLocalCache(`/api/ecdc?${btoa(lastUpdate.dateEcdc)}`, false), fetchWithLocalCache(`/api/vaccinesold?${btoa(lastUpdate.date)}`), fetchWithLocalCache(`/api/cases?${btoa(lastUpdate.date)}`), fetchWithLocalCache(`/api/madeira?${btoa(lastUpdate.dateMadeira)}`), fetchWithLocalCache(`/api/madeira/pontosituacao?${btoa(lastUpdate.dateMadeiraCases)}`), fetchWithLocalCache(`/api/acores?${btoa(lastUpdate.dateAcores)}`), fetchWithLocalCache(`/api/acores/pontosituacao?${btoa(lastUpdate.dateAcoresCases)}`)]).then(([ecdc, vaccines, cases, madeira, madeiraPDS, acores, acoresPDS]) => {\n      setECDC(ecdc);\n      setVaccines(vaccines);\n      setCasesData(cases);\n      setArquipelagos({\n        madeira: {\n          vacinas: madeira,\n          casos: madeiraPDS\n        },\n        acores: {\n          vacinas: acores,\n          casos: acoresPDS\n        }\n      });\n      setReady(true);\n    });\n  }, []);\n\n  function update(type, data) {\n    switch (type) {\n      case 'vacinas':\n        let arr = Array.from(vaccines);\n        arr.push(data);\n        setVaccines(arr);\n        bumpVersioning(versioning + 1);\n        break;\n\n      case 'casos':\n        //casos.push(data);\n        //setCasos(casos);\n        bumpVersioning(versioning + 1);\n        break;\n\n      case 'reload':\n        window.location.reload();\n        break;\n    }\n  }\n\n  return {\n    versioning,\n    statistics,\n    ready,\n    update\n  };\n}","map":null,"metadata":{},"sourceType":"module"}