{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport _regeneratorRuntime from \"/home/runner/work/mapa-vacinacao-c19/mapa-vacinacao-c19/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/runner/work/mapa-vacinacao-c19/mapa-vacinacao-c19/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"/home/runner/work/mapa-vacinacao-c19/mapa-vacinacao-c19/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useEffect, useState } from 'react';\nimport { Col, Row } from 'react-bootstrap';\nimport { Bar } from 'react-chartjs-2';\nimport { grades, grades_pretty, RESIZE_TRESHOLD } from '../../constants';\nimport { formatNumber, getColor } from '../../utils';\nimport { Card } from '../Card';\nimport cardStyles from './../Card.module.scss';\nimport classNames from 'classnames';\nexport function ArsMapa(_ref) {\n  var statistics = _ref.statistics,\n      colors = _ref.colors;\n\n  var _useState = useState(false),\n      loaded = _useState[0],\n      setLoaded = _useState[1];\n\n  var main = colors.main,\n      shades = colors.shades;\n\n  var _useState2 = useState({}),\n      snsData = _useState2[0],\n      setSNSData = _useState2[1];\n\n  var _useState3 = useState(0),\n      mapLayers = _useState3[0],\n      setMapLayers = _useState3[1];\n\n  var _useState4 = useState({\n    current_dose: 1\n  }),\n      options = _useState4[0],\n      setOptions = _useState4[1];\n\n  var layers2 = [];\n  var graphData = {\n    'ARS Alentejo': {},\n    'ARS Algarve': {},\n    'ARS Centro': {},\n    'ARS Norte': {},\n    'ARS Lisboa e Vale do Tejo': {}\n  };\n\n  if (loaded) {\n    var _loop = function _loop(key) {\n      var obj1 = Object.assign(graphData[key], snsData.filter(function (el) {\n        return el.REGION.replace('RA ', '') == key;\n      })[0]); //let obj2 = ars[key];\n\n      if (key in graphData) {\n        graphData[key] = _objectSpread({}, obj1);\n      }\n    };\n\n    //map the data\n    for (var key in graphData) {\n      _loop(key);\n    }\n  }\n\n  function layerStyle(feature) {\n    var ars = feature.properties.ARS;\n    var data = graphData[ars];\n    var percentagem = parseFloat(data.COVER_1_VAC.replace(',', '.')) * 100; //(data.dose_2 / populacao_residente_ram[feature.properties.Dico].valor) * 100;\n\n    if (options.current_dose === 2) {\n      percentagem = parseFloat(data.COVER.replace(',', '.')) * 100; //(data.dose_2 / populacao_residente_ram[feature.properties.Dico].valor) * 100;\n    }\n\n    layers2.push(feature);\n    return {\n      fillOpacity: 1,\n      fillColor: getColor(percentagem),\n      lineJoin: 'round',\n      stroke: true,\n      weight: 2,\n      color: '#018b79'\n    };\n  }\n\n  var renderMap = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(map) {\n      var arsGeo, arsMapa, layers, legend;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return fetch('/ars.geojson').then(function (r) {\n                return r.json();\n              });\n\n            case 2:\n              arsGeo = _context.sent;\n              arsMapa = L.map('mapaars', {\n                zoomSnap: 0.1,\n                doubleClickZoom: false,\n                closePopupOnClick: false,\n                dragging: false,\n                zoomDelta: false,\n                trackResize: false,\n                touchZoom: false,\n                scrollWheelZoom: false,\n                zoomControl: false,\n                draggable: false\n              });\n              arsMapa.dragging.disable();\n              layers = L.geoJSON(arsGeo, {\n                onEachFeature: function onEachFeature(feature, shape) {\n                  var ars = feature.properties.ARS;\n                  var data = graphData[ars];\n                  var percentagem_1 = parseFloat(data.COVER_1_VAC.replace(',', '.')) * 100; //(data.dose_1 / populacao_residente_ram[feature.properties.Dico].valor) * 100;\n\n                  var percentagem_2 = parseFloat(data.COVER.replace(',', '.')) * 100; //(data.dose_2 / populacao_residente_ram[feature.properties.Dico].valor) * 100;\n\n                  shape.bindPopup(\"<p>\\n\\t\\t\\t\\t\\t\\t<strong>\".concat(feature.properties.Nome_Alternativo, \"</strong>\\n\\t\\t\\t\\t\\t\\t<br>1\\xAA Dose: \").concat(formatNumber(400), \" (\").concat(percentagem_1.toFixed(2), \"%)\\n\\t\\t\\t\\t\\t\\t</br>2\\xAA Dose: \").concat(formatNumber(200), \" (\").concat(percentagem_2.toFixed(2), \"%)\\n\\t\\t\\t\\t\\t</p>\"));\n                  shape.on('click', function () {//console.log('click');\n                  });\n                },\n                style: layerStyle\n              }).addTo(arsMapa); //Create legend\n\n              setMapLayers(layers);\n              arsMapa.fitBounds(layers.getBounds());\n              arsMapa.setZoom(6.5);\n              legend = L.control({\n                position: 'bottomleft'\n              });\n\n              legend.onAdd = function (map) {\n                var div = L.DomUtil.create('div', 'info legend');\n\n                for (var i = 0; i < grades.length; i++) {\n                  var grade = grades[i];\n                  var grade_pretty = grades_pretty[grade];\n                  div.innerHTML += \"<p>\\n\\t\\t\\t\\t\\t\\t<i style=\\\"background:\".concat(getColor(grades[i] + 1), \"\\\"></i>\").concat(grade_pretty, \"</p>\");\n                }\n\n                return div;\n              };\n\n              legend.addTo(arsMapa);\n\n            case 12:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function renderMap(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  function renderGraph(el) {\n    var data = function data(canvas, cenas) {\n      /* \tif (window.innerWidth <= RESIZE_TRESHOLD) {\n      \tcanvas.parentNode.style.width = RESIZE_TRESHOLD + 'px';\n      } else {\n      \tcanvas.parentNode.style.width = '100%';\n      } */\n\n      /* \twindow.addEventListener('resize', () => {\n      \tif (window.innerWidth <= RESIZE_TRESHOLD) {\n      \t\tcanvas.parentNode.style.width = RESIZE_TRESHOLD + 'px';\n      \t} else {\n      \t\tcanvas.parentNode.style.width = '100%';\n      \t}\n      });\n      */\n      var chartData = {\n        labels: [''],\n        datasets: [{\n          label: 'Total de vacinas administradas - 1ª Dose',\n          borderColor: main,\n          backgroundColor: main,\n          stack: 'stack0',\n          order: 2,\n          data: [el.CUMUL_VAC_1]\n        }, {\n          label: 'Total de vacinas administradas - 2ª Dose',\n          borderColor: shades[1],\n          backgroundColor: shades[1],\n          data: [el.CUMUL_VAC_2],\n          stack: 'stack0',\n          order: 1\n        }]\n      };\n      return chartData;\n    };\n\n    var options = function options() {\n      var populacao_residente = Math.floor(el.CUMUL_VAC_2 / parseFloat(el.COVER.replace(',', '.'))) || 100000;\n      return {\n        indexAxis: 'y',\n        plugins: {\n          datalabels: {\n            display: false\n          },\n          legend: {\n            position: 'bottom',\n            align: 'start',\n            display: false\n          }\n        },\n        layout: {\n          padding: {\n            left: -12\n          }\n        },\n        animation: {\n          duration: 1000\n        },\n        tooltips: {\n          mode: 'index',\n          intersect: false,\n          callbacks: {\n            title: function title(tooltipItem, data) {\n              return '';\n            }\n          }\n        },\n        scales: {\n          y: {\n            ticks: {\n              beginAtZero: true\n            },\n            max: populacao_residente\n          },\n          x: {\n            ticks: {\n              beginAtZero: true,\n              stepSize: Math.round(window.innerWidth <= RESIZE_TRESHOLD ? populacao_residente / 3 : populacao_residente / 6),\n              callback: function callback(value) {\n                return formatNumber(value, false);\n              }\n            },\n            max: populacao_residente\n          }\n        }\n      };\n    };\n\n    return /*#__PURE__*/_jsx(Col, {\n      xs: 12,\n      lg: 6,\n      children: /*#__PURE__*/_jsxs(\"div\", {\n        className: cardStyles.ram_subchart_bar,\n        children: [/*#__PURE__*/_jsx(\"h2\", {\n          className: cardStyles.text_left,\n          children: el.REGION\n        }), /*#__PURE__*/_jsx(Bar, {\n          height: window.innerWidth <= RESIZE_TRESHOLD ? 40 : 55,\n          options: options(),\n          data: data\n        })]\n      })\n    });\n  }\n\n  useEffect( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (!(loaded === false)) {\n              _context2.next = 7;\n              break;\n            }\n\n            _context2.t0 = setSNSData;\n            _context2.next = 4;\n            return statistics.getTotalSNS();\n\n          case 4:\n            _context2.t1 = _context2.sent;\n            (0, _context2.t0)(_context2.t1);\n            setLoaded(true);\n\n          case 7:\n            if (loaded === true) {\n              renderMap();\n            }\n\n          case 8:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  })), [loaded]);\n  useEffect(function () {\n    if (mapLayers) mapLayers.setStyle(layerStyle);\n  }, [options.current_dose]);\n  return loaded === true ? /*#__PURE__*/_jsxs(Card, {\n    children: [/*#__PURE__*/_jsx(Row, {\n      children: /*#__PURE__*/_jsx(\"div\", {\n        className: 'toggle_buttons hide_mobile',\n        children: /*#__PURE__*/_jsxs(\"p\", {\n          children: [/*#__PURE__*/_jsx(\"button\", {\n            className: classNames('toggle_button', {\n              active: options.current_dose === 1\n            }),\n            onClick: function onClick() {\n              setOptions({\n                current_dose: 1\n              });\n            },\n            children: \"1\\xAA Dose\"\n          }), /*#__PURE__*/_jsx(\"button\", {\n            className: classNames('toggle_button', {\n              active: options.current_dose === 2\n            }),\n            onClick: function onClick() {\n              setOptions({\n                current_dose: 2\n              });\n            },\n            children: \"2\\xAA Dose\"\n          })]\n        })\n      })\n    }), /*#__PURE__*/_jsxs(Row, {\n      children: [/*#__PURE__*/_jsx(Col, {\n        xs: 0,\n        lg: 4,\n        className: 'hide_mobile',\n        children: /*#__PURE__*/_jsx(\"div\", {\n          id: \"mapaars\",\n          style: {\n            height: '500px'\n          }\n        })\n      }), /*#__PURE__*/_jsxs(Col, {\n        xs: 12,\n        lg: 8,\n        children: [/*#__PURE__*/_jsx(\"div\", {\n          className: 'legends',\n          style: {\n            paddingLeft: '10px'\n          },\n          children: /*#__PURE__*/_jsxs(\"p\", {\n            children: [/*#__PURE__*/_jsxs(\"span\", {\n              className: 'legend',\n              children: [/*#__PURE__*/_jsx(\"span\", {\n                style: {\n                  backgroundColor: main\n                },\n                className: 'color_sample'\n              }), \"1\\xAA Dose\"]\n            }), /*#__PURE__*/_jsxs(\"span\", {\n              className: 'legend',\n              children: [/*#__PURE__*/_jsx(\"span\", {\n                style: {\n                  backgroundColor: shades[1]\n                },\n                className: 'color_sample'\n              }), \"2\\xAA Dose\"]\n            })]\n          })\n        }), /*#__PURE__*/_jsx(Row, {\n          children: Object.values(graphData).map(renderGraph)\n        })]\n      })]\n    })]\n  }) : '';\n} //<Row>{renderGraph(graphData.concelhos.ribeira_brava)}</Row>","map":null,"metadata":{},"sourceType":"module"}